syntax = "proto3";
option go_package = "common/pb_msg";
package pb_msg;
import "common/pb_msg/common.proto";


// ---------------------------------------------------------------------------
/** An animation consists of key-frame data for a number of nodes. For
 *  each node affected by the animation a separate series of data is given.*/
    message AiAnimation {
/** The name of the animation. If the modeling package this data was
 *  exported from does support only a single animation channel, this
 *  name is usually empty (length is zero). */
    string Name=1;

/** Duration of the animation in ticks.  */
    double Duration=2;

/** Ticks per second. 0 if not specified in the imported file */
    double TicksPerSecond=3;
/** The node animation channels. Each channel affects a single node.
 *  The array is mNumChannels in size. */
   repeated AiNodeAnim Channels=4;
/** The mesh animation channels. Each channel affects a single mesh.
 *  The array is mNumMeshChannels in size. */
   repeated  AiMeshAnim MeshChannels=5;
/** The morph mesh animation channels. Each channel affects a single mesh.
 *  The array is mNumMorphMeshChannels in size. */
      repeated AiMeshMorphAnim MorphMeshChannels=6;
    }

// ---------------------------------------------------------------------------
/** Describes a morphing animation of a given mesh. */
    message AiMeshMorphAnim {
      /** Name of the mesh to be animated. An empty string is not allowed,
 *  animated meshes need to be named (not necessarily uniquely,
 *  the name can basically serve as wildcard to select a group
 *  of meshes with similar animation setup)*/
     string Name=1;
      /** Key frames of the animation. May not be nullptr. */
     repeated AiMeshMorphKey Keys=2;
    }


// ---------------------------------------------------------------------------
/** Binds a morph anim mesh to a specific point in time. */
    message AiMeshMorphKey {
/** The time of this key */
    double Time=1;

/** The values and weights at the time of this key
 *   - mValues: index of attachment mesh to apply weight at the same position in mWeights
 *   - mWeights: weight to apply to the blend shape index at the same position in mValues
 */
  repeated uint32 Values=2;
    repeated  double Weights=3;
    }



// ---------------------------------------------------------------------------
/** Describes the animation of a single node. The name specifies the
 *  bone/node which is affected by this animation channel. The keyframes
 *  are given in three separate series of values, one each for position,
 *  rotation and scaling. The transformation matrix computed from these
 *  values replaces the node's original transformation matrix at a
 *  specific time.
 *  This means all keys are absolute and not relative to the bone default pose.
 *  The order in which the transformations are applied is
 *  - as usual - scaling, rotation, translation.
 *
 *  @note All keys are returned in their correct, chronological order.
 *  Duplicate keys don't pass the validation step. Most likely there
 *  will be no negative time values, but they are not forbidden also ( so
 *  implementations need to cope with them! ) */
    message AiNodeAnim {
/** The name of the node affected by this animation. The node
 *  must exist and it must be unique.*/
    string NodeName=1;

/** The position keys of this animation channel. Positions are
 * specified as 3D vector. The array is mNumPositionKeys in size.
 *
 * If there are position keys, there will also be at least one
 * scaling and one rotation key.*/
    repeated  AiVectorKey PositionKeys=2;
/** The rotation keys of this animation channel. Rotations are
 *  given as quaternions,  which are 4D vectors. The array is
 *  mNumRotationKeys in size.
 *
 * If there are rotation keys, there will also be at least one
 * scaling and one position key. */
   repeated AiQuatKey RotationKeys=3;
/** The scaling keys of this animation channel. Scalings are
 *  specified as 3D vector. The array is mNumScalingKeys in size.
 *
 * If there are scaling keys, there will also be at least one
 * position and one rotation key.*/
   repeated AiVectorKey ScalingKeys=4;

/** Defines how the animation behaves before the first
 *  key is encountered.
 *
 *  The default value is aiAnimBehaviour_DEFAULT (the original
 *  transformation matrix of the affected node is used).*/
   int32 PreState=5;

/** Defines how the animation behaves after the last
 *  key was processed.
 *
 *  The default value is aiAnimBehaviour_DEFAULT (the original
 *  transformation matrix of the affected node is taken).*/
    int32 PostState=6;
    }

// ---------------------------------------------------------------------------
/** Describes vertex-based animations for a single mesh or a group of
 *  meshes. Meshes carry the animation data for each frame in their
 *  aiMesh::mAnimMeshes array. The purpose of aiMeshAnim is to
 *  define keyframes linking each mesh attachment to a particular
 *  point in time. */
    message AiMeshAnim {
/** Name of the mesh to be animated. An empty string is not allowed,
 *  animated meshes need to be named (not necessarily uniquely,
 *  the name can basically serve as wild-card to select a group
 *  of meshes with similar animation setup)*/
    string Name=1;
/** Key frames of the animation. May not be nullptr. */
    repeated AiMeshKey Keys=2;
    }

// ---------------------------------------------------------------------------
/** A time-value pair specifying a certain 3D vector for the given time. */
    message AiVectorKey {
/** The time of this key */
    double Time=1;

/** The value of this key */
  AiVector3D Value=2;
    }
// ---------------------------------------------------------------------------
/** A time-value pair specifying a rotation for the given time.
 *  Rotations are expressed with quaternions. */
message AiQuatKey {
/** The time of this key */
    double Time=1;

/** The value of this key */
   AiQuaternion Value=2;
}

// ---------------------------------------------------------------------------
/** Binds a anim-mesh to a specific point in time. */
message AiMeshKey {
/** The time of this key */
    double Time=1;

/** Index into the aiMesh::mAnimMeshes array of the
 *  mesh corresponding to the #aiMeshAnim hosting this
 *  key frame. The referenced anim mesh is evaluated
 *  according to the rules defined in the docs for #aiAnimMesh.*/
    uint32 Value=2;}
