// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0
// source: common/pb_msg/ai_camera.proto

package pb_msg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// * Helper structure to describe a virtual camera.
//
// Cameras have a representation in the node graph and can be animated.
// An important aspect is that the camera itself is also part of the
// scene-graph. This means, any values such as the look-at vector are not
// *absolute*, they're <b>relative</b> to the coordinate system defined
// by the node which corresponds to the camera. This allows for camera
// animations. For static cameras parameters like the 'look-at' or 'up' vectors
// are usually specified directly in aiCamera, but beware, they could also
// be encoded in the node transformation. The following (pseudo)code sample
// shows how to do it: <br><br>
// @code
// // Get the camera matrix for a camera at a specific time
// // if the node hierarchy for the camera does not contain
// // at least one animated node this is a static computation
// get-camera-matrix (node sceneRoot, camera cam) : matrix
//
//	{
//	   node   cnd = find-node-for-camera(cam)
//	   matrix cmt = identity()
//
//	   // as usual - get the absolute camera transformation for this frame
//	   for each node nd in hierarchy from sceneRoot to cnd
//	     matrix cur
//	     if (is-animated(nd))
//	        cur = eval-animation(nd)
//	     else cur = nd->mTransformation;
//	     cmt = mult-matrices( cmt, cur )
//	   end for
//
//	   // now multiply with the camera's own local transform
//	   cam = mult-matrices (cam, get-camera-matrix(cmt) )
//	}
//
// @endcode
//
// @note some file formats (such as 3DS, ASE) export a "target point" -
// the point the camera is looking at (it can even be animated). Assimp
// writes the target point as a subnode of the camera's main node,
// called "<camName>.Target". However this is just additional information
// then the transformation tracks of the camera main node make the
// camera already look in the right direction.
type AiCamera struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * The name of the camera.
	//
	//	There must be a node in the scenegraph with the same name.
	//	This node specifies the position of the camera in the scene
	//	hierarchy and can be animated.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	//   - Position of the camera relative to the coordinate space
	//     defined by the corresponding node.
	//
	//     The default value is 0|0|0.
	Position *AiVector3D `protobuf:"bytes,2,opt,name=Position,proto3" json:"Position,omitempty"`
	//   - 'Up' - vector of the camera coordinate system relative to
	//     the coordinate space defined by the corresponding node.
	//
	//     The 'right' vector of the camera coordinate system is
	//     the cross product of  the up and lookAt vectors.
	//     The default value is 0|1|0. The vector
	//     may be normalized, but it needn't.
	Up *AiVector3D `protobuf:"bytes,3,opt,name=Up,proto3" json:"Up,omitempty"`
	//   - 'LookAt' - vector of the camera coordinate system relative to
	//     the coordinate space defined by the corresponding node.
	//
	//     This is the viewing direction of the user.
	//     The default value is 0|0|1. The vector
	//     may be normalized, but it needn't.
	LookAt *AiVector3D `protobuf:"bytes,4,opt,name=LookAt,proto3" json:"LookAt,omitempty"`
	// * Horizontal field of view angle, in radians.
	//
	//	The field of view angle is the angle between the center
	//	line of the screen and the left or right border.
	//	The default value is 1/4PI.
	HorizontalFOV float32 `protobuf:"fixed32,5,opt,name=HorizontalFOV,proto3" json:"HorizontalFOV,omitempty"`
	// * Distance of the near clipping plane from the camera.
	//
	// The value may not be 0.f (for arithmetic reasons to prevent
	// a division through zero). The default value is 0.1f.
	ClipPlaneNear float32 `protobuf:"fixed32,6,opt,name=ClipPlaneNear,proto3" json:"ClipPlaneNear,omitempty"`
	// * Distance of the far clipping plane from the camera.
	//
	// The far clipping plane must, of course, be further away than the
	// near clipping plane. The default value is 1000.f. The ratio
	// between the near and the far plane should not be too
	// large (between 1000-10000 should be ok) to avoid floating-point
	// inaccuracies which could lead to z-fighting.
	ClipPlaneFar float32 `protobuf:"fixed32,7,opt,name=ClipPlaneFar,proto3" json:"ClipPlaneFar,omitempty"`
	// * Screen aspect ratio.
	//
	// This is the ration between the width and the height of the
	// screen. Typical values are 4/3, 1/2 or 1/1. This value is
	// 0 if the aspect ratio is not defined in the source file.
	// 0 is also the default value.
	Aspect float32 `protobuf:"fixed32,8,opt,name=Aspect,proto3" json:"Aspect,omitempty"`
	// * Half horizontal orthographic width, in scene units.
	//
	//	The orthographic width specifies the half width of the
	//	orthographic view box. If non-zero the camera is
	//	orthographic and the mAspect should define to the
	//	ratio between the orthographic width and height
	//	and mHorizontalFOV should be set to 0.
	//	The default value is 0 (not orthographic).
	OrthographicWidth float32 `protobuf:"fixed32,9,opt,name=OrthographicWidth,proto3" json:"OrthographicWidth,omitempty"`
}

func (x *AiCamera) Reset() {
	*x = AiCamera{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_pb_msg_ai_camera_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiCamera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiCamera) ProtoMessage() {}

func (x *AiCamera) ProtoReflect() protoreflect.Message {
	mi := &file_common_pb_msg_ai_camera_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiCamera.ProtoReflect.Descriptor instead.
func (*AiCamera) Descriptor() ([]byte, []int) {
	return file_common_pb_msg_ai_camera_proto_rawDescGZIP(), []int{0}
}

func (x *AiCamera) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AiCamera) GetPosition() *AiVector3D {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *AiCamera) GetUp() *AiVector3D {
	if x != nil {
		return x.Up
	}
	return nil
}

func (x *AiCamera) GetLookAt() *AiVector3D {
	if x != nil {
		return x.LookAt
	}
	return nil
}

func (x *AiCamera) GetHorizontalFOV() float32 {
	if x != nil {
		return x.HorizontalFOV
	}
	return 0
}

func (x *AiCamera) GetClipPlaneNear() float32 {
	if x != nil {
		return x.ClipPlaneNear
	}
	return 0
}

func (x *AiCamera) GetClipPlaneFar() float32 {
	if x != nil {
		return x.ClipPlaneFar
	}
	return 0
}

func (x *AiCamera) GetAspect() float32 {
	if x != nil {
		return x.Aspect
	}
	return 0
}

func (x *AiCamera) GetOrthographicWidth() float32 {
	if x != nil {
		return x.OrthographicWidth
	}
	return 0
}

var File_common_pb_msg_ai_camera_proto protoreflect.FileDescriptor

var file_common_pb_msg_ai_camera_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f,
	0x61, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x02, 0x0a, 0x08, 0x41, 0x69, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e,
	0x41, 0x69, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x44, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x02, 0x55, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x44, 0x52, 0x02, 0x55, 0x70, 0x12, 0x2a, 0x0a, 0x06, 0x4c, 0x6f, 0x6f, 0x6b,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x2e, 0x41, 0x69, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x44, 0x52, 0x06, 0x4c, 0x6f,
	0x6f, 0x6b, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x46, 0x4f, 0x56, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x48, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x4f, 0x56, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c,
	0x69, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4e, 0x65, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4e, 0x65, 0x61, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x46, 0x61, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x70, 0x50, 0x6c, 0x61, 0x6e,
	0x65, 0x46, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x4f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x4f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x57, 0x69, 0x64, 0x74, 0x68, 0x42, 0x0f, 0x5a, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_common_pb_msg_ai_camera_proto_rawDescOnce sync.Once
	file_common_pb_msg_ai_camera_proto_rawDescData = file_common_pb_msg_ai_camera_proto_rawDesc
)

func file_common_pb_msg_ai_camera_proto_rawDescGZIP() []byte {
	file_common_pb_msg_ai_camera_proto_rawDescOnce.Do(func() {
		file_common_pb_msg_ai_camera_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_pb_msg_ai_camera_proto_rawDescData)
	})
	return file_common_pb_msg_ai_camera_proto_rawDescData
}

var file_common_pb_msg_ai_camera_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_common_pb_msg_ai_camera_proto_goTypes = []interface{}{
	(*AiCamera)(nil),   // 0: pb_msg.AiCamera
	(*AiVector3D)(nil), // 1: pb_msg.AiVector3D
}
var file_common_pb_msg_ai_camera_proto_depIdxs = []int32{
	1, // 0: pb_msg.AiCamera.Position:type_name -> pb_msg.AiVector3D
	1, // 1: pb_msg.AiCamera.Up:type_name -> pb_msg.AiVector3D
	1, // 2: pb_msg.AiCamera.LookAt:type_name -> pb_msg.AiVector3D
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_common_pb_msg_ai_camera_proto_init() }
func file_common_pb_msg_ai_camera_proto_init() {
	if File_common_pb_msg_ai_camera_proto != nil {
		return
	}
	file_common_pb_msg_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_pb_msg_ai_camera_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiCamera); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_pb_msg_ai_camera_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_pb_msg_ai_camera_proto_goTypes,
		DependencyIndexes: file_common_pb_msg_ai_camera_proto_depIdxs,
		MessageInfos:      file_common_pb_msg_ai_camera_proto_msgTypes,
	}.Build()
	File_common_pb_msg_ai_camera_proto = out.File
	file_common_pb_msg_ai_camera_proto_rawDesc = nil
	file_common_pb_msg_ai_camera_proto_goTypes = nil
	file_common_pb_msg_ai_camera_proto_depIdxs = nil
}
