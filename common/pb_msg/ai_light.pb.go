// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0
// source: common/pb_msg/ai_light.proto

package pb_msg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// * Helper structure to describe a light source.
//
//	Assimp supports multiple sorts of light sources, including
//	directional, point and spot lights. All of them are defined with just
//	a single structure and distinguished by their parameters.
//	Note - some file formats (such as 3DS, ASE) export a "target point" -
//	the point a spot light is looking at (it can even be animated). Assimp
//	writes the target point as a sub-node of a spot-lights's main node,
//	called "<spotName>.Target". However, this is just additional information
//	then, the transformation tracks of the main node make the
//	spot light already point in the right direction.
type AiLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * The name of the light source.
	//
	//	There must be a node in the scene-graph with the same name.
	//	This node specifies the position of the light in the scene
	//	hierarchy and can be animated.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// * The type of the light source.
	//
	// aiLightSource_UNDEFINED is not a valid value for this member.
	Type int32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	//   - Position of the light source in space. Relative to the
	//     transformation of the node corresponding to the light.
	//
	//     The position is undefined for directional lights.
	Position *AiVector3D `protobuf:"bytes,3,opt,name=Position,proto3" json:"Position,omitempty"`
	//   - Direction of the light source in space. Relative to the
	//     transformation of the node corresponding to the light.
	//
	//     The direction is undefined for point lights. The vector
	//     may be normalized, but it needn't.
	Direction *AiVector3D `protobuf:"bytes,4,opt,name=Direction,proto3" json:"Direction,omitempty"`
	//   - Up direction of the light source in space. Relative to the
	//     transformation of the node corresponding to the light.
	//
	//     The direction is undefined for point lights. The vector
	//     may be normalized, but it needn't.
	Up *AiVector3D `protobuf:"bytes,5,opt,name=Up,proto3" json:"Up,omitempty"`
	// * Constant light attenuation factor.
	//
	//	The intensity of the light source at a given distance 'd' from
	//	the light's position is
	//	@code
	//	Atten = 1/( att0 + att1 * d + att2 * d*d)
	//	@endcode
	//	This member corresponds to the att0 variable in the equation.
	//	Naturally undefined for directional lights.
	AttenuationConstant float32 `protobuf:"fixed32,6,opt,name=AttenuationConstant,proto3" json:"AttenuationConstant,omitempty"`
	// * Linear light attenuation factor.
	//
	//	The intensity of the light source at a given distance 'd' from
	//	the light's position is
	//	@code
	//	Atten = 1/( att0 + att1 * d + att2 * d*d)
	//	@endcode
	//	This member corresponds to the att1 variable in the equation.
	//	Naturally undefined for directional lights.
	AttenuationLinear float32 `protobuf:"fixed32,7,opt,name=AttenuationLinear,proto3" json:"AttenuationLinear,omitempty"`
	// * Quadratic light attenuation factor.
	//
	//	The intensity of the light source at a given distance 'd' from
	//	the light's position is
	//	@code
	//	Atten = 1/( att0 + att1 * d + att2 * d*d)
	//	@endcode
	//	This member corresponds to the att2 variable in the equation.
	//	Naturally undefined for directional lights.
	AttenuationQuadratic float32 `protobuf:"fixed32,8,opt,name=AttenuationQuadratic,proto3" json:"AttenuationQuadratic,omitempty"`
	// * Diffuse color of the light source
	//
	//	The diffuse light color is multiplied with the diffuse
	//	material color to obtain the final color that contributes
	//	to the diffuse shading term.
	ColorDiffuse *AiColor3D `protobuf:"bytes,9,opt,name=ColorDiffuse,proto3" json:"ColorDiffuse,omitempty"`
	// * Specular color of the light source
	//
	//	The specular light color is multiplied with the specular
	//	material color to obtain the final color that contributes
	//	to the specular shading term.
	ColorSpecular *AiColor3D `protobuf:"bytes,10,opt,name=ColorSpecular,proto3" json:"ColorSpecular,omitempty"`
	// * Ambient color of the light source
	//
	//	The ambient light color is multiplied with the ambient
	//	material color to obtain the final color that contributes
	//	to the ambient shading term. Most renderers will ignore
	//	this value it, is just a remaining of the fixed-function pipeline
	//	that is still supported by quite many file formats.
	ColorAmbient *AiColor3D `protobuf:"bytes,11,opt,name=ColorAmbient,proto3" json:"ColorAmbient,omitempty"`
	// * Inner angle of a spot light's light cone.
	//
	//	The spot light has maximum influence on objects inside this
	//	angle. The angle is given in radians. It is 2PI for point
	//	lights and undefined for directional lights.
	AngleInnerCone float32 `protobuf:"fixed32,12,opt,name=AngleInnerCone,proto3" json:"AngleInnerCone,omitempty"`
	// * Outer angle of a spot light's light cone.
	//
	//	The spot light does not affect objects outside this angle.
	//	The angle is given in radians. It is 2PI for point lights and
	//	undefined for directional lights. The outer angle must be
	//	greater than or equal to the inner angle.
	//	It is assumed that the application uses a smooth
	//	interpolation between the inner and the outer cone of the
	//	spot light.
	AngleOuterCone float32 `protobuf:"fixed32,13,opt,name=AngleOuterCone,proto3" json:"AngleOuterCone,omitempty"`
	// * Size of area light source.
	Size *AiVector2D `protobuf:"bytes,14,opt,name=Size,proto3" json:"Size,omitempty"`
}

func (x *AiLight) Reset() {
	*x = AiLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_pb_msg_ai_light_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiLight) ProtoMessage() {}

func (x *AiLight) ProtoReflect() protoreflect.Message {
	mi := &file_common_pb_msg_ai_light_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiLight.ProtoReflect.Descriptor instead.
func (*AiLight) Descriptor() ([]byte, []int) {
	return file_common_pb_msg_ai_light_proto_rawDescGZIP(), []int{0}
}

func (x *AiLight) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AiLight) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AiLight) GetPosition() *AiVector3D {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *AiLight) GetDirection() *AiVector3D {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *AiLight) GetUp() *AiVector3D {
	if x != nil {
		return x.Up
	}
	return nil
}

func (x *AiLight) GetAttenuationConstant() float32 {
	if x != nil {
		return x.AttenuationConstant
	}
	return 0
}

func (x *AiLight) GetAttenuationLinear() float32 {
	if x != nil {
		return x.AttenuationLinear
	}
	return 0
}

func (x *AiLight) GetAttenuationQuadratic() float32 {
	if x != nil {
		return x.AttenuationQuadratic
	}
	return 0
}

func (x *AiLight) GetColorDiffuse() *AiColor3D {
	if x != nil {
		return x.ColorDiffuse
	}
	return nil
}

func (x *AiLight) GetColorSpecular() *AiColor3D {
	if x != nil {
		return x.ColorSpecular
	}
	return nil
}

func (x *AiLight) GetColorAmbient() *AiColor3D {
	if x != nil {
		return x.ColorAmbient
	}
	return nil
}

func (x *AiLight) GetAngleInnerCone() float32 {
	if x != nil {
		return x.AngleInnerCone
	}
	return 0
}

func (x *AiLight) GetAngleOuterCone() float32 {
	if x != nil {
		return x.AngleOuterCone
	}
	return 0
}

func (x *AiLight) GetSize() *AiVector2D {
	if x != nil {
		return x.Size
	}
	return nil
}

var File_common_pb_msg_ai_light_proto protoreflect.FileDescriptor

var file_common_pb_msg_ai_light_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f,
	0x61, 0x69, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xea, 0x04, 0x0a, 0x07, 0x41, 0x69, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x2e, 0x41, 0x69, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x44, 0x52, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x2e, 0x41, 0x69, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x44, 0x52, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x02, 0x55, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x44, 0x52, 0x02, 0x55, 0x70, 0x12, 0x30, 0x0a, 0x13,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x14,
	0x41, 0x74, 0x74, 0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x64, 0x72,
	0x61, 0x74, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x41, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63,
	0x12, 0x35, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e,
	0x41, 0x69, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x33, 0x44, 0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x33,
	0x44, 0x52, 0x0d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72,
	0x12, 0x35, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e,
	0x41, 0x69, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x33, 0x44, 0x52, 0x0c, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x41, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6e, 0x67, 0x6c, 0x65,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x75,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41,
	0x69, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x44, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x0f, 0x5a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_pb_msg_ai_light_proto_rawDescOnce sync.Once
	file_common_pb_msg_ai_light_proto_rawDescData = file_common_pb_msg_ai_light_proto_rawDesc
)

func file_common_pb_msg_ai_light_proto_rawDescGZIP() []byte {
	file_common_pb_msg_ai_light_proto_rawDescOnce.Do(func() {
		file_common_pb_msg_ai_light_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_pb_msg_ai_light_proto_rawDescData)
	})
	return file_common_pb_msg_ai_light_proto_rawDescData
}

var file_common_pb_msg_ai_light_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_common_pb_msg_ai_light_proto_goTypes = []interface{}{
	(*AiLight)(nil),    // 0: pb_msg.AiLight
	(*AiVector3D)(nil), // 1: pb_msg.AiVector3D
	(*AiColor3D)(nil),  // 2: pb_msg.AiColor3D
	(*AiVector2D)(nil), // 3: pb_msg.AiVector2D
}
var file_common_pb_msg_ai_light_proto_depIdxs = []int32{
	1, // 0: pb_msg.AiLight.Position:type_name -> pb_msg.AiVector3D
	1, // 1: pb_msg.AiLight.Direction:type_name -> pb_msg.AiVector3D
	1, // 2: pb_msg.AiLight.Up:type_name -> pb_msg.AiVector3D
	2, // 3: pb_msg.AiLight.ColorDiffuse:type_name -> pb_msg.AiColor3D
	2, // 4: pb_msg.AiLight.ColorSpecular:type_name -> pb_msg.AiColor3D
	2, // 5: pb_msg.AiLight.ColorAmbient:type_name -> pb_msg.AiColor3D
	3, // 6: pb_msg.AiLight.Size:type_name -> pb_msg.AiVector2D
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_common_pb_msg_ai_light_proto_init() }
func file_common_pb_msg_ai_light_proto_init() {
	if File_common_pb_msg_ai_light_proto != nil {
		return
	}
	file_common_pb_msg_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_pb_msg_ai_light_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_pb_msg_ai_light_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_pb_msg_ai_light_proto_goTypes,
		DependencyIndexes: file_common_pb_msg_ai_light_proto_depIdxs,
		MessageInfos:      file_common_pb_msg_ai_light_proto_msgTypes,
	}.Build()
	File_common_pb_msg_ai_light_proto = out.File
	file_common_pb_msg_ai_light_proto_rawDesc = nil
	file_common_pb_msg_ai_light_proto_goTypes = nil
	file_common_pb_msg_ai_light_proto_depIdxs = nil
}
