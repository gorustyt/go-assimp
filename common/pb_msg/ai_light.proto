syntax = "proto3";
option go_package = "common/pb_msg";
package pb_msg;
import "common/pb_msg/common.proto";

// ---------------------------------------------------------------------------
/** Helper structure to describe a light source.
 *
 *  Assimp supports multiple sorts of light sources, including
 *  directional, point and spot lights. All of them are defined with just
 *  a single structure and distinguished by their parameters.
 *  Note - some file formats (such as 3DS, ASE) export a "target point" -
 *  the point a spot light is looking at (it can even be animated). Assimp
 *  writes the target point as a sub-node of a spot-lights's main node,
 *  called "<spotName>.Target". However, this is just additional information
 *  then, the transformation tracks of the main node make the
 *  spot light already point in the right direction.
*/
    message AiLight {
/** The name of the light source.
 *
 *  There must be a node in the scene-graph with the same name.
 *  This node specifies the position of the light in the scene
 *  hierarchy and can be animated.
 */
   string Name=1;

/** The type of the light source.
 *
 * aiLightSource_UNDEFINED is not a valid value for this member.
 */
    int32 Type=2;

/** Position of the light source in space. Relative to the
 *  transformation of the node corresponding to the light.
 *
 *  The position is undefined for directional lights.
 */
  AiVector3D Position=3;

/** Direction of the light source in space. Relative to the
 *  transformation of the node corresponding to the light.
 *
 *  The direction is undefined for point lights. The vector
 *  may be normalized, but it needn't.
 */
   AiVector3D Direction=4;

/** Up direction of the light source in space. Relative to the
 *  transformation of the node corresponding to the light.
 *
 *  The direction is undefined for point lights. The vector
 *  may be normalized, but it needn't.
 */
   AiVector3D Up=5;

/** Constant light attenuation factor.
 *
 *  The intensity of the light source at a given distance 'd' from
 *  the light's position is
 *  @code
 *  Atten = 1/( att0 + att1 * d + att2 * d*d)
 *  @endcode
 *  This member corresponds to the att0 variable in the equation.
 *  Naturally undefined for directional lights.
 */
    float AttenuationConstant=6;

/** Linear light attenuation factor.
 *
 *  The intensity of the light source at a given distance 'd' from
 *  the light's position is
 *  @code
 *  Atten = 1/( att0 + att1 * d + att2 * d*d)
 *  @endcode
 *  This member corresponds to the att1 variable in the equation.
 *  Naturally undefined for directional lights.
 */
    float AttenuationLinear=7;

/** Quadratic light attenuation factor.
 *
 *  The intensity of the light source at a given distance 'd' from
 *  the light's position is
 *  @code
 *  Atten = 1/( att0 + att1 * d + att2 * d*d)
 *  @endcode
 *  This member corresponds to the att2 variable in the equation.
 *  Naturally undefined for directional lights.
 */
    float AttenuationQuadratic=8;

/** Diffuse color of the light source
 *
 *  The diffuse light color is multiplied with the diffuse
 *  material color to obtain the final color that contributes
 *  to the diffuse shading term.
 */
    AiColor3D ColorDiffuse=9;

/** Specular color of the light source
 *
 *  The specular light color is multiplied with the specular
 *  material color to obtain the final color that contributes
 *  to the specular shading term.
 */
  AiColor3D ColorSpecular=10;

/** Ambient color of the light source
 *
 *  The ambient light color is multiplied with the ambient
 *  material color to obtain the final color that contributes
 *  to the ambient shading term. Most renderers will ignore
 *  this value it, is just a remaining of the fixed-function pipeline
 *  that is still supported by quite many file formats.
 */
    AiColor3D ColorAmbient=11;

/** Inner angle of a spot light's light cone.
 *
 *  The spot light has maximum influence on objects inside this
 *  angle. The angle is given in radians. It is 2PI for point
 *  lights and undefined for directional lights.
 */
    float AngleInnerCone=12;

/** Outer angle of a spot light's light cone.
 *
 *  The spot light does not affect objects outside this angle.
 *  The angle is given in radians. It is 2PI for point lights and
 *  undefined for directional lights. The outer angle must be
 *  greater than or equal to the inner angle.
 *  It is assumed that the application uses a smooth
 *  interpolation between the inner and the outer cone of the
 *  spot light.
 */
    float AngleOuterCone=13;

/** Size of area light source. */
    AiVector2D Size=14;
    }