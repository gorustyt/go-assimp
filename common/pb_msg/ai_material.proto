syntax = "proto3";
option go_package = "common/pb_msg";
package pb_msg;
import "common/pb_msg/common.proto";
enum AiMaterialPropertyType{
  AiPropertyTypeBytes=0;
  AiPropertyTypeString=1;
  AiPropertyTypeFloat64=2;
  AiPropertyTypeInt=3;
  AiPropertyTypeVector3D=4;
  AiPropertyTypeAiUVTransform=5;
  AiPropertyTypeVector4D=6;
  AiPropertyTypeColor4D=7;
  AiPropertyTypeColor3D=8;
}
message AiMaterialPropertyFloat64 {
  repeated  double Data=1;
}

message AiMaterialPropertyInt64 {
  repeated  int64  Data=1;
}

message AiMaterialPropertyString {
  repeated  string Data=1;
}

message AiUVTransform {
  AiVector2D Translation =1;
  AiVector2D Scaling=2;
  float Rotation=3;
}

message  AiMaterial{
  /** List of all material properties loaded. */
  repeated AiMaterialProperty Properties=1;
  int32 NumAllocated =2;
}

// ---------------------------------------------------------------------------
/** @brief Data structure for a single material property
 *
 *  As an user, you'll probably never need to deal with this data structure.
 *  Just use the provided aiGetMaterialXXX() or aiMaterial::Get() family
 *  of functions to query material properties easily. Processing them
 *  manually is faster, but it is not the recommended way. It isn't worth
 *  the effort. <br>
 *  Material property names follow a simple scheme:
 *  @code
 *    $<name>
 *    ?<name>
 *       A public property, there must be corresponding AI_MATKEY_XXX define
 *       2nd: Public, but ignored by the #aiProcess_RemoveRedundantMaterials
 *       post-processing step.
 *    ~<name>
 *       A temporary property for internal use.
 *  @endcode
 *  @see aiMaterial
 */
    message AiMaterialProperty {
/** Specifies the name of the property (key)
 *  Keys are generally case insensitive.
 */
   string Key=1;

/** Textures: Specifies their exact usage semantic.
 * For non-texture properties, this member is always 0
 * (or, better-said, #aiTextureType_NONE).
 */
   uint32 Semantic=2;

/** Textures: Specifies the index of the texture.
 *  For non-texture properties, this member is always 0.
 */
      uint32  Index=3;
/** Type information for the property.
 *
 * Defines the data layout inside the data buffer. This is used
 * by the library internally to perform debug checks and to
 * utilize proper type conversions.
 * (It's probably a hacky solution, but it works.)
 */
      AiMaterialPropertyType Type=4;

/** Binary buffer to hold the property's value.
 * The size of the buffer is always mDataLength.
 */
    bytes Data=5;
    }