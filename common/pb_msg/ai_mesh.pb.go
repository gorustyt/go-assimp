// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0
// source: common/pb_msg/ai_mesh.proto

package pb_msg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// * @brief A mesh represents a geometry or model with a single material.
//
// It usually consists of a number of vertices and a series of primitives/faces
// referencing the vertices. In addition there might be a series of bones, each
// of them addressing a number of vertices with a certain weight. Vertex data
// is presented in channels with each channel containing a single per-vertex
// information such as a set of texture coordinates or a normal vector.
// If a data pointer is non-null, the corresponding data stream is present.
// From C++-programs you can also use the comfort functions Has*() to
// test for the presence of various data streams.
//
// A Mesh uses only a single material which is referenced by a material ID.
// @note The mPositions member is usually not optional. However, vertex positions
// *could* be missing if the #AI_SCENE_FLAGS_INCOMPLETE flag is set in
// @code
// aiScene::mFlags
// @endcode
type AiMesh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Bitwise combination of the members of the #aiPrimitiveType enum.
	// This specifies which types of primitives are present in the mesh.
	// The "SortByPrimitiveType"-Step can be used to make sure the
	// output meshes consist of one primitive type each.
	PrimitiveTypes uint32 `protobuf:"varint,1,opt,name=PrimitiveTypes,proto3" json:"PrimitiveTypes,omitempty"`
	// *
	// @brief Vertex positions.
	//
	// This array is always present in a mesh. The array is
	// mNumVertices in size.
	Vertices []*AiVector3D `protobuf:"bytes,2,rep,name=Vertices,proto3" json:"Vertices,omitempty"`
	// *
	// @brief Vertex normals.
	//
	// The array contains normalized vectors, nullptr if not present.
	// The array is mNumVertices in size. Normals are undefined for
	// point and line primitives. A mesh consisting of points and
	// lines only may not have normal vectors. Meshes with mixed
	// primitive types (i.e. lines and triangles) may have normals,
	// but the normals for vertices that are only referenced by
	// point or line primitives are undefined and set to QNaN (WARN:
	// qNaN compares to inequal to *everything*, even to qNaN itself.
	// Using code like this to check whether a field is qnan is:
	// @code
	// #define IS_QNAN(f) (f != f)
	// @endcode
	// still dangerous because even 1.f == 1.f could evaluate to false! (
	// remember the subtleties of IEEE754 artithmetics). Use stuff like
	// @c fpclassify instead.
	// @note Normal vectors computed by Assimp are always unit-length.
	// However, this needn't apply for normals that have been taken
	// directly from the model file.
	Normals []*AiVector3D `protobuf:"bytes,3,rep,name=Normals,proto3" json:"Normals,omitempty"`
	// *
	// @brief Vertex tangents.
	//
	// The tangent of a vertex points in the direction of the positive
	// X texture axis. The array contains normalized vectors, nullptr if
	// not present. The array is mNumVertices in size. A mesh consisting
	// of points and lines only may not have normal vectors. Meshes with
	// mixed primitive types (i.e. lines and triangles) may have
	// normals, but the normals for vertices that are only referenced by
	// point or line primitives are undefined and set to qNaN.  See
	// the #mNormals member for a detailed discussion of qNaNs.
	// @note If the mesh contains tangents, it automatically also
	// contains bitangents.
	Tangents []*AiVector3D `protobuf:"bytes,4,rep,name=Tangents,proto3" json:"Tangents,omitempty"`
	// *
	// @brief Vertex bitangents.
	//
	// The bitangent of a vertex points in the direction of the positive
	// Y texture axis. The array contains normalized vectors, nullptr if not
	// present. The array is mNumVertices in size.
	// @note If the mesh contains tangents, it automatically also contains
	// bitangents.
	Bitangents []*AiVector3D `protobuf:"bytes,5,rep,name=Bitangents,proto3" json:"Bitangents,omitempty"`
	// *
	// @brief Vertex color sets.
	//
	// A mesh may contain 0 to #AI_MAX_NUMBER_OF_COLOR_SETS vertex
	// colors per vertex. nullptr if not present. Each array is
	// mNumVertices in size if present.
	Colors        []*AiMesh_ColorsArray        `protobuf:"bytes,6,rep,name=Colors,proto3" json:"Colors,omitempty"`
	TextureCoords []*AiMesh_TextureCoordsArray `protobuf:"bytes,7,rep,name=TextureCoords,proto3" json:"TextureCoords,omitempty"`
	// *
	// @brief Specifies the number of components for a given UV channel.
	//
	// Up to three channels are supported (UVW, for accessing volume
	// or cube maps). If the value is 2 for a given channel n, the
	// component p.z of mTextureCoords[n][p] is set to 0.0f.
	// If the value is 1 for a given channel, p.y is set to 0.0f, too.
	// @note 4D coordinates are not supported
	NumUVComponents []uint32 `protobuf:"varint,8,rep,packed,name=NumUVComponents,proto3" json:"NumUVComponents,omitempty"`
	// *
	// @brief The faces the mesh is constructed from.
	//
	// Each face refers to a number of vertices by their indices.
	// This array is always present in a mesh, its size is given
	//
	//	in mNumFaces. If the #AI_SCENE_FLAGS_NON_VERBOSE_FORMAT
	//
	// is NOT set each face references an unique set of vertices.
	Faces []*AiFace `protobuf:"bytes,9,rep,name=Faces,proto3" json:"Faces,omitempty"`
	// *
	// @brief The bones of this mesh.
	//
	// A bone consists of a name by which it can be found in the
	// frame hierarchy and a set of vertex weights.
	Bones []*AiBone `protobuf:"bytes,10,rep,name=Bones,proto3" json:"Bones,omitempty"`
	// *
	// @brief The material used by this mesh.
	//
	// A mesh uses only a single material. If an imported model uses
	// multiple materials, the import splits up the mesh. Use this value
	// as index into the scene's material list.
	MaterialIndex int32 `protobuf:"varint,12,opt,name=MaterialIndex,proto3" json:"MaterialIndex,omitempty"`
	// *
	//
	//	Name of the mesh. Meshes can be named, but this is not a
	//	requirement and leaving this field empty is totally fine.
	//	There are mainly three uses for mesh names:
	//	 - some formats name nodes and meshes independently.
	//	 - importers tend to split meshes up to meet the
	//	    one-material-per-mesh requirement. Assigning
	//	    the same (dummy) name to each of the result meshes
	//	    aids the caller at recovering the original mesh
	//	    partitioning.
	//	 - Vertex animations refer to meshes by their names.
	Name string `protobuf:"bytes,13,opt,name=Name,proto3" json:"Name,omitempty"`
	// *
	// Attachment meshes for this mesh, for vertex-based animation.
	// Attachment meshes carry replacement data for some of the
	// mesh'es vertex components (usually positions, normals).
	// Currently known to work with loaders:
	// - Collada
	// - gltf
	AnimMeshes []*AiAnimMesh `protobuf:"bytes,14,rep,name=AnimMeshes,proto3" json:"AnimMeshes,omitempty"`
	// *
	//
	//	Method of morphing when anim-meshes are specified.
	//	@see aiMorphingMethod to learn more about the provided morphing targets.
	Method int32 `protobuf:"varint,15,opt,name=Method,proto3" json:"Method,omitempty"`
	// *
	//
	//	The bounding box.
	AABB *AiAABB `protobuf:"bytes,16,opt,name=AABB,proto3" json:"AABB,omitempty"`
	// *
	// Vertex UV stream names. Pointer to array of size AI_MAX_NUMBER_OF_TEXTURECOORDS
	TextureCoordsNames []string `protobuf:"bytes,17,rep,name=TextureCoordsNames,proto3" json:"TextureCoordsNames,omitempty"`
}

func (x *AiMesh) Reset() {
	*x = AiMesh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_pb_msg_ai_mesh_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiMesh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiMesh) ProtoMessage() {}

func (x *AiMesh) ProtoReflect() protoreflect.Message {
	mi := &file_common_pb_msg_ai_mesh_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiMesh.ProtoReflect.Descriptor instead.
func (*AiMesh) Descriptor() ([]byte, []int) {
	return file_common_pb_msg_ai_mesh_proto_rawDescGZIP(), []int{0}
}

func (x *AiMesh) GetPrimitiveTypes() uint32 {
	if x != nil {
		return x.PrimitiveTypes
	}
	return 0
}

func (x *AiMesh) GetVertices() []*AiVector3D {
	if x != nil {
		return x.Vertices
	}
	return nil
}

func (x *AiMesh) GetNormals() []*AiVector3D {
	if x != nil {
		return x.Normals
	}
	return nil
}

func (x *AiMesh) GetTangents() []*AiVector3D {
	if x != nil {
		return x.Tangents
	}
	return nil
}

func (x *AiMesh) GetBitangents() []*AiVector3D {
	if x != nil {
		return x.Bitangents
	}
	return nil
}

func (x *AiMesh) GetColors() []*AiMesh_ColorsArray {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *AiMesh) GetTextureCoords() []*AiMesh_TextureCoordsArray {
	if x != nil {
		return x.TextureCoords
	}
	return nil
}

func (x *AiMesh) GetNumUVComponents() []uint32 {
	if x != nil {
		return x.NumUVComponents
	}
	return nil
}

func (x *AiMesh) GetFaces() []*AiFace {
	if x != nil {
		return x.Faces
	}
	return nil
}

func (x *AiMesh) GetBones() []*AiBone {
	if x != nil {
		return x.Bones
	}
	return nil
}

func (x *AiMesh) GetMaterialIndex() int32 {
	if x != nil {
		return x.MaterialIndex
	}
	return 0
}

func (x *AiMesh) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AiMesh) GetAnimMeshes() []*AiAnimMesh {
	if x != nil {
		return x.AnimMeshes
	}
	return nil
}

func (x *AiMesh) GetMethod() int32 {
	if x != nil {
		return x.Method
	}
	return 0
}

func (x *AiMesh) GetAABB() *AiAABB {
	if x != nil {
		return x.AABB
	}
	return nil
}

func (x *AiMesh) GetTextureCoordsNames() []string {
	if x != nil {
		return x.TextureCoordsNames
	}
	return nil
}

// *
// @brief A single face in a mesh, referring to multiple vertices.
//
// If mNumIndices is 3, we call the face 'triangle', for mNumIndices > 3
// it's called 'polygon' (hey, that's just a definition!).
// <br>
// aiMesh::mPrimitiveTypes can be queried to quickly examine which types of
// primitive are actually present in a mesh. The #aiProcess_SortByPType flag
// executes a special post-processing algorithm which splits meshes with
// *different* primitive types mixed up (e.g. lines and triangles) in several
// 'clean' sub-meshes. Furthermore there is a configuration option (
// #AI_CONFIG_PP_SBP_REMOVE) to force #aiProcess_SortByPType to remove
// specific kinds of primitives from the imported scene, completely and forever.
// In many cases you'll probably want to set this setting to
// @code
// aiPrimitiveType_LINE|aiPrimitiveType_POINT
// @endcode
// Together with the #aiProcess_Triangulate flag you can then be sure that
// #aiFace::mNumIndices is always 3.
// @note Take a look at the @link data Data Structures page @endlink for
// more information on the layout and winding order of a face.
type AiFace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ! Number of indices defining this face.
	// ! The maximum value for this member is #AI_MAX_FACE_INDICES.
	NumIndices uint32 `protobuf:"varint,1,opt,name=NumIndices,proto3" json:"NumIndices,omitempty"`
	// ! Pointer to the indices array. Size of the array is given in numIndices.
	Indices []uint32 `protobuf:"varint,2,rep,packed,name=Indices,proto3" json:"Indices,omitempty"`
}

func (x *AiFace) Reset() {
	*x = AiFace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_pb_msg_ai_mesh_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiFace) ProtoMessage() {}

func (x *AiFace) ProtoReflect() protoreflect.Message {
	mi := &file_common_pb_msg_ai_mesh_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiFace.ProtoReflect.Descriptor instead.
func (*AiFace) Descriptor() ([]byte, []int) {
	return file_common_pb_msg_ai_mesh_proto_rawDescGZIP(), []int{1}
}

func (x *AiFace) GetNumIndices() uint32 {
	if x != nil {
		return x.NumIndices
	}
	return 0
}

func (x *AiFace) GetIndices() []uint32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

type AiMesh_ColorsArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Colors []*AiColor4D `protobuf:"bytes,1,rep,name=Colors,proto3" json:"Colors,omitempty"`
}

func (x *AiMesh_ColorsArray) Reset() {
	*x = AiMesh_ColorsArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_pb_msg_ai_mesh_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiMesh_ColorsArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiMesh_ColorsArray) ProtoMessage() {}

func (x *AiMesh_ColorsArray) ProtoReflect() protoreflect.Message {
	mi := &file_common_pb_msg_ai_mesh_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiMesh_ColorsArray.ProtoReflect.Descriptor instead.
func (*AiMesh_ColorsArray) Descriptor() ([]byte, []int) {
	return file_common_pb_msg_ai_mesh_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AiMesh_ColorsArray) GetColors() []*AiColor4D {
	if x != nil {
		return x.Colors
	}
	return nil
}

// *
// @brief Vertex texture coordinates, also known as UV channels.
//
// A mesh may contain 0 to AI_MAX_NUMBER_OF_TEXTURECOORDS per
// vertex. nullptr if not present. The array is mNumVertices in size.
type AiMesh_TextureCoordsArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextureCoords []*AiVector3D `protobuf:"bytes,1,rep,name=TextureCoords,proto3" json:"TextureCoords,omitempty"`
}

func (x *AiMesh_TextureCoordsArray) Reset() {
	*x = AiMesh_TextureCoordsArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_pb_msg_ai_mesh_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiMesh_TextureCoordsArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiMesh_TextureCoordsArray) ProtoMessage() {}

func (x *AiMesh_TextureCoordsArray) ProtoReflect() protoreflect.Message {
	mi := &file_common_pb_msg_ai_mesh_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiMesh_TextureCoordsArray.ProtoReflect.Descriptor instead.
func (*AiMesh_TextureCoordsArray) Descriptor() ([]byte, []int) {
	return file_common_pb_msg_ai_mesh_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AiMesh_TextureCoordsArray) GetTextureCoords() []*AiVector3D {
	if x != nil {
		return x.TextureCoords
	}
	return nil
}

var File_common_pb_msg_ai_mesh_proto protoreflect.FileDescriptor

var file_common_pb_msg_ai_mesh_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f,
	0x61, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x2f, 0x61, 0x69, 0x5f, 0x62, 0x6f, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x61, 0x69,
	0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9,
	0x06, 0x0a, 0x06, 0x41, 0x69, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x44, 0x52, 0x08, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x07, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x33, 0x44, 0x52, 0x07, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x12,
	0x2e, 0x0a, 0x08, 0x54, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x33, 0x44, 0x52, 0x08, 0x54, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x32, 0x0a, 0x0a, 0x42, 0x69, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x44, 0x52, 0x0a, 0x42, 0x69, 0x74, 0x61, 0x6e, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x4d,
	0x65, 0x73, 0x68, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x4d, 0x65, 0x73, 0x68, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x4e, 0x75, 0x6d, 0x55, 0x56, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x4e, 0x75, 0x6d, 0x55, 0x56,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x46, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x2e, 0x41, 0x69, 0x46, 0x61, 0x63, 0x65, 0x52, 0x05, 0x46, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x05, 0x42, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x42, 0x6f, 0x6e, 0x65, 0x52,
	0x05, 0x42, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x0a, 0x41, 0x6e, 0x69, 0x6d, 0x4d, 0x65, 0x73, 0x68, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69,
	0x41, 0x6e, 0x69, 0x6d, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x0a, 0x41, 0x6e, 0x69, 0x6d, 0x4d, 0x65,
	0x73, 0x68, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x04,
	0x41, 0x41, 0x42, 0x42, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x41, 0x41, 0x42, 0x42, 0x52, 0x04, 0x41, 0x41, 0x42, 0x42,
	0x12, 0x2e, 0x0a, 0x12, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x54, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x1a, 0x38, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x29, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x34, 0x44, 0x52, 0x06, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x1a, 0x4e, 0x0a, 0x12, 0x54, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x38, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x2e, 0x41, 0x69, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x44, 0x52, 0x0d, 0x54, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x06, 0x41, 0x69,
	0x46, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x42, 0x0f,
	0x5a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_pb_msg_ai_mesh_proto_rawDescOnce sync.Once
	file_common_pb_msg_ai_mesh_proto_rawDescData = file_common_pb_msg_ai_mesh_proto_rawDesc
)

func file_common_pb_msg_ai_mesh_proto_rawDescGZIP() []byte {
	file_common_pb_msg_ai_mesh_proto_rawDescOnce.Do(func() {
		file_common_pb_msg_ai_mesh_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_pb_msg_ai_mesh_proto_rawDescData)
	})
	return file_common_pb_msg_ai_mesh_proto_rawDescData
}

var file_common_pb_msg_ai_mesh_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_common_pb_msg_ai_mesh_proto_goTypes = []interface{}{
	(*AiMesh)(nil),                    // 0: pb_msg.AiMesh
	(*AiFace)(nil),                    // 1: pb_msg.AiFace
	(*AiMesh_ColorsArray)(nil),        // 2: pb_msg.AiMesh.ColorsArray
	(*AiMesh_TextureCoordsArray)(nil), // 3: pb_msg.AiMesh.TextureCoordsArray
	(*AiVector3D)(nil),                // 4: pb_msg.AiVector3D
	(*AiBone)(nil),                    // 5: pb_msg.AiBone
	(*AiAnimMesh)(nil),                // 6: pb_msg.AiAnimMesh
	(*AiAABB)(nil),                    // 7: pb_msg.AiAABB
	(*AiColor4D)(nil),                 // 8: pb_msg.AiColor4D
}
var file_common_pb_msg_ai_mesh_proto_depIdxs = []int32{
	4,  // 0: pb_msg.AiMesh.Vertices:type_name -> pb_msg.AiVector3D
	4,  // 1: pb_msg.AiMesh.Normals:type_name -> pb_msg.AiVector3D
	4,  // 2: pb_msg.AiMesh.Tangents:type_name -> pb_msg.AiVector3D
	4,  // 3: pb_msg.AiMesh.Bitangents:type_name -> pb_msg.AiVector3D
	2,  // 4: pb_msg.AiMesh.Colors:type_name -> pb_msg.AiMesh.ColorsArray
	3,  // 5: pb_msg.AiMesh.TextureCoords:type_name -> pb_msg.AiMesh.TextureCoordsArray
	1,  // 6: pb_msg.AiMesh.Faces:type_name -> pb_msg.AiFace
	5,  // 7: pb_msg.AiMesh.Bones:type_name -> pb_msg.AiBone
	6,  // 8: pb_msg.AiMesh.AnimMeshes:type_name -> pb_msg.AiAnimMesh
	7,  // 9: pb_msg.AiMesh.AABB:type_name -> pb_msg.AiAABB
	8,  // 10: pb_msg.AiMesh.ColorsArray.Colors:type_name -> pb_msg.AiColor4D
	4,  // 11: pb_msg.AiMesh.TextureCoordsArray.TextureCoords:type_name -> pb_msg.AiVector3D
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_common_pb_msg_ai_mesh_proto_init() }
func file_common_pb_msg_ai_mesh_proto_init() {
	if File_common_pb_msg_ai_mesh_proto != nil {
		return
	}
	file_common_pb_msg_common_proto_init()
	file_common_pb_msg_ai_bone_proto_init()
	file_common_pb_msg_ai_animesh_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_pb_msg_ai_mesh_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiMesh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_pb_msg_ai_mesh_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiFace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_pb_msg_ai_mesh_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiMesh_ColorsArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_pb_msg_ai_mesh_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiMesh_TextureCoordsArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_pb_msg_ai_mesh_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_pb_msg_ai_mesh_proto_goTypes,
		DependencyIndexes: file_common_pb_msg_ai_mesh_proto_depIdxs,
		MessageInfos:      file_common_pb_msg_ai_mesh_proto_msgTypes,
	}.Build()
	File_common_pb_msg_ai_mesh_proto = out.File
	file_common_pb_msg_ai_mesh_proto_rawDesc = nil
	file_common_pb_msg_ai_mesh_proto_goTypes = nil
	file_common_pb_msg_ai_mesh_proto_depIdxs = nil
}
