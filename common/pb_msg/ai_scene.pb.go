// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0
// source: common/pb_msg/ai_scene.proto

package pb_msg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// -------------------------------------------------------------------------------
type AiScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * Any combination of the AI_SCENE_FLAGS_XXX flags. By default
	// this value is 0, no flags are set. Most applications will
	// want to reject all scenes with the AI_SCENE_FLAGS_INCOMPLETE
	// bit set.
	Flags uint32 `protobuf:"varint,1,opt,name=Flags,proto3" json:"Flags,omitempty"`
	// * The root node of the hierarchy.
	//
	// There will always be at least the root node if the import
	// was successful (and no special flags have been set).
	// Presence of further nodes depends on the format and content
	// of the imported file.
	RootNode *AiNode `protobuf:"bytes,2,opt,name=RootNode,proto3" json:"RootNode,omitempty"`
	// * The array of meshes.
	//
	// Use the indices given in the aiNode structure to access
	// this array. The array is mNumMeshes in size. If the
	// AI_SCENE_FLAGS_INCOMPLETE flag is not set there will always
	// be at least ONE material.
	Meshes []*AiMesh `protobuf:"bytes,3,rep,name=Meshes,proto3" json:"Meshes,omitempty"`
	// * The array of materials.
	//
	// Use the index given in each aiMesh structure to access this
	// array. The array is mNumMaterials in size. If the
	// AI_SCENE_FLAGS_INCOMPLETE flag is not set there will always
	// be at least ONE material.
	Materials []*AiMaterial `protobuf:"bytes,4,rep,name=Materials,proto3" json:"Materials,omitempty"`
	// * The array of animations.
	//
	// All animations imported from the given file are listed here.
	// The array is mNumAnimations in size.
	Animations []*AiAnimation `protobuf:"bytes,5,rep,name=Animations,proto3" json:"Animations,omitempty"`
	// * The array of embedded textures.
	//
	// Not many file formats embed their textures into the file.
	// An example is Quake's MDL format (which is also used by
	// some GameStudio versions)
	Textures []*AiTexture `protobuf:"bytes,6,rep,name=Textures,proto3" json:"Textures,omitempty"`
	// * The array of light sources.
	//
	// All light sources imported from the given file are
	// listed here. The array is mNumLights in size.
	Lights []*AiLight `protobuf:"bytes,7,rep,name=Lights,proto3" json:"Lights,omitempty"`
	// * The array of cameras.
	//
	// All cameras imported from the given file are listed here.
	// The array is mNumCameras in size. The first camera in the
	// array (if existing) is the default camera view into
	// the scene.
	Cameras []*AiCamera `protobuf:"bytes,8,rep,name=Cameras,proto3" json:"Cameras,omitempty"`
	// *
	//
	//	@brief  The global metadata assigned to the scene itself.
	//
	//	This data contains global metadata which belongs to the scene like
	//	unit-conversions, versions, vendors or other model-specific data. This
	//	can be used to store format-specific metadata as well.
	MetaData []*AiMetadata `protobuf:"bytes,9,rep,name=MetaData,proto3" json:"MetaData,omitempty"`
	// * The name of the scene itself.
	Name      string        `protobuf:"bytes,10,opt,name=Name,proto3" json:"Name,omitempty"`
	Skeletons []*AiSkeleton `protobuf:"bytes,11,rep,name=Skeletons,proto3" json:"Skeletons,omitempty"`
}

func (x *AiScene) Reset() {
	*x = AiScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_pb_msg_ai_scene_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiScene) ProtoMessage() {}

func (x *AiScene) ProtoReflect() protoreflect.Message {
	mi := &file_common_pb_msg_ai_scene_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiScene.ProtoReflect.Descriptor instead.
func (*AiScene) Descriptor() ([]byte, []int) {
	return file_common_pb_msg_ai_scene_proto_rawDescGZIP(), []int{0}
}

func (x *AiScene) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *AiScene) GetRootNode() *AiNode {
	if x != nil {
		return x.RootNode
	}
	return nil
}

func (x *AiScene) GetMeshes() []*AiMesh {
	if x != nil {
		return x.Meshes
	}
	return nil
}

func (x *AiScene) GetMaterials() []*AiMaterial {
	if x != nil {
		return x.Materials
	}
	return nil
}

func (x *AiScene) GetAnimations() []*AiAnimation {
	if x != nil {
		return x.Animations
	}
	return nil
}

func (x *AiScene) GetTextures() []*AiTexture {
	if x != nil {
		return x.Textures
	}
	return nil
}

func (x *AiScene) GetLights() []*AiLight {
	if x != nil {
		return x.Lights
	}
	return nil
}

func (x *AiScene) GetCameras() []*AiCamera {
	if x != nil {
		return x.Cameras
	}
	return nil
}

func (x *AiScene) GetMetaData() []*AiMetadata {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *AiScene) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AiScene) GetSkeletons() []*AiSkeleton {
	if x != nil {
		return x.Skeletons
	}
	return nil
}

var File_common_pb_msg_ai_scene_proto protoreflect.FileDescriptor

var file_common_pb_msg_ai_scene_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f,
	0x61, 0x69, 0x5f, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x1a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x61, 0x69, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x2f, 0x61, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f,
	0x61, 0x69, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f,
	0x61, 0x69, 0x5f, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x2f, 0x61, 0x69, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x2f, 0x61, 0x69, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x2f, 0x61, 0x69, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f,
	0x61, 0x69, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x2f, 0x61, 0x69, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x03, 0x0a, 0x07, 0x41, 0x69, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67,
	0x2e, 0x41, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x4d, 0x65, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x4d, 0x65, 0x73,
	0x68, 0x52, 0x06, 0x4d, 0x65, 0x73, 0x68, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x09, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2d, 0x0a, 0x08, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x54, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x06, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x06, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x2e, 0x41, 0x69, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x07, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e,
	0x41, 0x69, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x53, 0x6b, 0x65, 0x6c,
	0x65, 0x74, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x52,
	0x09, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x73, 0x42, 0x0f, 0x5a, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_common_pb_msg_ai_scene_proto_rawDescOnce sync.Once
	file_common_pb_msg_ai_scene_proto_rawDescData = file_common_pb_msg_ai_scene_proto_rawDesc
)

func file_common_pb_msg_ai_scene_proto_rawDescGZIP() []byte {
	file_common_pb_msg_ai_scene_proto_rawDescOnce.Do(func() {
		file_common_pb_msg_ai_scene_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_pb_msg_ai_scene_proto_rawDescData)
	})
	return file_common_pb_msg_ai_scene_proto_rawDescData
}

var file_common_pb_msg_ai_scene_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_common_pb_msg_ai_scene_proto_goTypes = []interface{}{
	(*AiScene)(nil),     // 0: pb_msg.AiScene
	(*AiNode)(nil),      // 1: pb_msg.AiNode
	(*AiMesh)(nil),      // 2: pb_msg.AiMesh
	(*AiMaterial)(nil),  // 3: pb_msg.AiMaterial
	(*AiAnimation)(nil), // 4: pb_msg.AiAnimation
	(*AiTexture)(nil),   // 5: pb_msg.AiTexture
	(*AiLight)(nil),     // 6: pb_msg.AiLight
	(*AiCamera)(nil),    // 7: pb_msg.AiCamera
	(*AiMetadata)(nil),  // 8: pb_msg.AiMetadata
	(*AiSkeleton)(nil),  // 9: pb_msg.AiSkeleton
}
var file_common_pb_msg_ai_scene_proto_depIdxs = []int32{
	1, // 0: pb_msg.AiScene.RootNode:type_name -> pb_msg.AiNode
	2, // 1: pb_msg.AiScene.Meshes:type_name -> pb_msg.AiMesh
	3, // 2: pb_msg.AiScene.Materials:type_name -> pb_msg.AiMaterial
	4, // 3: pb_msg.AiScene.Animations:type_name -> pb_msg.AiAnimation
	5, // 4: pb_msg.AiScene.Textures:type_name -> pb_msg.AiTexture
	6, // 5: pb_msg.AiScene.Lights:type_name -> pb_msg.AiLight
	7, // 6: pb_msg.AiScene.Cameras:type_name -> pb_msg.AiCamera
	8, // 7: pb_msg.AiScene.MetaData:type_name -> pb_msg.AiMetadata
	9, // 8: pb_msg.AiScene.Skeletons:type_name -> pb_msg.AiSkeleton
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_common_pb_msg_ai_scene_proto_init() }
func file_common_pb_msg_ai_scene_proto_init() {
	if File_common_pb_msg_ai_scene_proto != nil {
		return
	}
	file_common_pb_msg_ai_node_proto_init()
	file_common_pb_msg_ai_mesh_proto_init()
	file_common_pb_msg_ai_texture_proto_init()
	file_common_pb_msg_ai_skeleton_proto_init()
	file_common_pb_msg_ai_meta_data_proto_init()
	file_common_pb_msg_ai_camera_proto_init()
	file_common_pb_msg_ai_light_proto_init()
	file_common_pb_msg_ai_animation_proto_init()
	file_common_pb_msg_ai_material_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_pb_msg_ai_scene_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_pb_msg_ai_scene_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_pb_msg_ai_scene_proto_goTypes,
		DependencyIndexes: file_common_pb_msg_ai_scene_proto_depIdxs,
		MessageInfos:      file_common_pb_msg_ai_scene_proto_msgTypes,
	}.Build()
	File_common_pb_msg_ai_scene_proto = out.File
	file_common_pb_msg_ai_scene_proto_rawDesc = nil
	file_common_pb_msg_ai_scene_proto_goTypes = nil
	file_common_pb_msg_ai_scene_proto_depIdxs = nil
}
