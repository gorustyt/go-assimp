syntax = "proto3";
option go_package = "common/pb_msg";
package pb_msg;
import "common/pb_msg/ai_node.proto";
import "common/pb_msg/ai_mesh.proto";
import "common/pb_msg/ai_texture.proto";
import "common/pb_msg/ai_skeleton.proto";
import "common/pb_msg/ai_meta_data.proto";
import "common/pb_msg/ai_camera.proto";
import "common/pb_msg/ai_light.proto";
import "common/pb_msg/ai_animation.proto";
import "common/pb_msg/ai_material.proto";
// -------------------------------------------------------------------------------
/** The root structure of the imported data.
 *
 *  Everything that was imported from the given file can be accessed from here.
 *  Objects of this class are generally maintained and owned by Assimp, not
 *  by the caller. You shouldn't want to instance it, nor should you ever try to
 *  delete a given scene on your own.
 */
// -------------------------------------------------------------------------------
 message AiScene {
/** Any combination of the AI_SCENE_FLAGS_XXX flags. By default
* this value is 0, no flags are set. Most applications will
* want to reject all scenes with the AI_SCENE_FLAGS_INCOMPLETE
* bit set.
*/
   uint32 Flags=1;

/** The root node of the hierarchy.
*
* There will always be at least the root node if the import
* was successful (and no special flags have been set).
* Presence of further nodes depends on the format and content
* of the imported file.
*/
   AiNode  RootNode=2;
/** The array of meshes.
*
* Use the indices given in the aiNode structure to access
* this array. The array is mNumMeshes in size. If the
* AI_SCENE_FLAGS_INCOMPLETE flag is not set there will always
* be at least ONE material.
*/
    repeated  AiMesh  Meshes=3;
/** The array of materials.
*
* Use the index given in each aiMesh structure to access this
* array. The array is mNumMaterials in size. If the
* AI_SCENE_FLAGS_INCOMPLETE flag is not set there will always
* be at least ONE material.
*/
    repeated  AiMaterial Materials=4;
/** The array of animations.
*
* All animations imported from the given file are listed here.
* The array is mNumAnimations in size.
*/
    repeated AiAnimation  Animations=5;

/** The array of embedded textures.
*
* Not many file formats embed their textures into the file.
* An example is Quake's MDL format (which is also used by
* some GameStudio versions)
*/
    repeated AiTexture Textures=6;
/** The array of light sources.
*
* All light sources imported from the given file are
* listed here. The array is mNumLights in size.
*/
   repeated AiLight Lights=7;


/** The array of cameras.
*
* All cameras imported from the given file are listed here.
* The array is mNumCameras in size. The first camera in the
* array (if existing) is the default camera view into
* the scene.
*/
   repeated AiCamera Cameras=8;

/**
 *  @brief  The global metadata assigned to the scene itself.
 *
 *  This data contains global metadata which belongs to the scene like
 *  unit-conversions, versions, vendors or other model-specific data. This
 *  can be used to store format-specific metadata as well.
 */
  repeated AiMetadata MetaData=9;

/** The name of the scene itself.
 */
   string Name=10;

    repeated  AiSkeleton  Skeletons=11;

    }