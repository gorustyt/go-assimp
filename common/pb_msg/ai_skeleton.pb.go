// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.0
// source: common/pb_msg/ai_skeleton.proto

package pb_msg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// @brief A skeleton represents the bone hierarchy of an animation.
//
// Skeleton animations can be described as a tree of bones:
//
//	   root
//	     |
//	   node1
//	   /   \
//	node3  node4
//
// If you want to calculate the transformation of node three you need to compute the
// transformation hierarchy for the transformation chain of node3:
// root->node1->node3
// Each node is represented as a skeleton instance.
type AiSkeleton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	//
	//	@brief The name of the skeleton instance.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// *
	//
	//	@brief The bone instance in the skeleton.
	Bones []*AiSkeletonBone `protobuf:"bytes,2,rep,name=Bones,proto3" json:"Bones,omitempty"`
}

func (x *AiSkeleton) Reset() {
	*x = AiSkeleton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_pb_msg_ai_skeleton_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiSkeleton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiSkeleton) ProtoMessage() {}

func (x *AiSkeleton) ProtoReflect() protoreflect.Message {
	mi := &file_common_pb_msg_ai_skeleton_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiSkeleton.ProtoReflect.Descriptor instead.
func (*AiSkeleton) Descriptor() ([]byte, []int) {
	return file_common_pb_msg_ai_skeleton_proto_rawDescGZIP(), []int{0}
}

func (x *AiSkeleton) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AiSkeleton) GetBones() []*AiSkeletonBone {
	if x != nil {
		return x.Bones
	}
	return nil
}

// *
// @brief  A skeleton bone represents a single bone is a skeleton structure.
//
// Skeleton-Animations can be represented via a skeleton struct, which describes
// a hierarchical tree assembled from skeleton bones. A bone is linked to a mesh.
// The bone knows its parent bone. If there is no parent bone the parent id is
// marked with -1.
// The skeleton-bone stores a pointer to its used armature. If there is no
// armature this value if set to nullptr.
// A skeleton bone stores its offset-matrix, which is the absolute transformation
// for the bone. The bone stores the locale transformation to its parent as well.
// You can compute the offset matrix by multiplying the hierarchy like:
// Tree: s1 -> s2 -> s3
// Offset-Matrix s3 = locale-s3 * locale-s2 * locale-s1
type AiSkeletonBone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The parent bone index, is -1 one if this bone represents the root bone.
	Parent int32 `protobuf:"varint,1,opt,name=Parent,proto3" json:"Parent,omitempty"`
	// / @brief The bone armature node - used for skeleton conversion
	// / you must enable aiProcess_PopulateArmatureData to populate this
	Armature []*AiNode `protobuf:"bytes,2,rep,name=Armature,proto3" json:"Armature,omitempty"`
	// / @brief The bone node in the scene - used for skeleton conversion
	// / you must enable aiProcess_PopulateArmatureData to populate this
	Node []*AiNode `protobuf:"bytes,3,rep,name=Node,proto3" json:"Node,omitempty"`
	// / The mesh index, which will get influenced by the weight.
	MeshId []*AiMesh `protobuf:"bytes,5,rep,name=MeshId,proto3" json:"MeshId,omitempty"`
	// / The influence weights of this bone, by vertex index.
	Weights []*AiVertexWeight `protobuf:"bytes,6,rep,name=Weights,proto3" json:"Weights,omitempty"`
	// * Matrix that transforms from bone space to mesh space in bind pose.
	//
	// This matrix describes the position of the mesh
	// in the local space of this bone when the skeleton was bound.
	// Thus it can be used directly to determine a desired vertex position,
	// given the world-space transform of the bone when animated,
	// and the position of the vertex in mesh space.
	//
	// It is sometimes called an inverse-bind matrix,
	// or inverse bind pose matrix.
	OffsetMatrix *AiMatrix4X4 `protobuf:"bytes,7,opt,name=OffsetMatrix,proto3" json:"OffsetMatrix,omitempty"`
	// / Matrix that transforms the locale bone in bind pose.
	LocalMatrix *AiMatrix4X4 `protobuf:"bytes,8,opt,name=LocalMatrix,proto3" json:"LocalMatrix,omitempty"`
}

func (x *AiSkeletonBone) Reset() {
	*x = AiSkeletonBone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_pb_msg_ai_skeleton_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiSkeletonBone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiSkeletonBone) ProtoMessage() {}

func (x *AiSkeletonBone) ProtoReflect() protoreflect.Message {
	mi := &file_common_pb_msg_ai_skeleton_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiSkeletonBone.ProtoReflect.Descriptor instead.
func (*AiSkeletonBone) Descriptor() ([]byte, []int) {
	return file_common_pb_msg_ai_skeleton_proto_rawDescGZIP(), []int{1}
}

func (x *AiSkeletonBone) GetParent() int32 {
	if x != nil {
		return x.Parent
	}
	return 0
}

func (x *AiSkeletonBone) GetArmature() []*AiNode {
	if x != nil {
		return x.Armature
	}
	return nil
}

func (x *AiSkeletonBone) GetNode() []*AiNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *AiSkeletonBone) GetMeshId() []*AiMesh {
	if x != nil {
		return x.MeshId
	}
	return nil
}

func (x *AiSkeletonBone) GetWeights() []*AiVertexWeight {
	if x != nil {
		return x.Weights
	}
	return nil
}

func (x *AiSkeletonBone) GetOffsetMatrix() *AiMatrix4X4 {
	if x != nil {
		return x.OffsetMatrix
	}
	return nil
}

func (x *AiSkeletonBone) GetLocalMatrix() *AiMatrix4X4 {
	if x != nil {
		return x.LocalMatrix
	}
	return nil
}

var File_common_pb_msg_ai_skeleton_proto protoreflect.FileDescriptor

var file_common_pb_msg_ai_skeleton_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f,
	0x61, 0x69, 0x5f, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62,
	0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x61, 0x69, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x2f, 0x61, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2f, 0x61, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x0a, 0x41, 0x69, 0x53, 0x6b, 0x65, 0x6c, 0x65,
	0x74, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x42, 0x6f, 0x6e, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e,
	0x41, 0x69, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x42, 0x6f, 0x6e, 0x65, 0x52, 0x05,
	0x42, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x0e, 0x41, 0x69, 0x53, 0x6b, 0x65, 0x6c,
	0x65, 0x74, 0x6f, 0x6e, 0x42, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x08, 0x41, 0x72, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x41, 0x72, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x5f,
	0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x4d, 0x65, 0x73, 0x68, 0x49, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x4d, 0x65, 0x73, 0x68,
	0x52, 0x06, 0x4d, 0x65, 0x73, 0x68, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x5f, 0x6d,
	0x73, 0x67, 0x2e, 0x41, 0x69, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x07, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x41, 0x69, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x34, 0x78, 0x34, 0x52, 0x0c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x12, 0x35, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x6d, 0x73,
	0x67, 0x2e, 0x41, 0x69, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x34, 0x78, 0x34, 0x52, 0x0b, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x42, 0x0f, 0x5a, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x5f, 0x6d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_common_pb_msg_ai_skeleton_proto_rawDescOnce sync.Once
	file_common_pb_msg_ai_skeleton_proto_rawDescData = file_common_pb_msg_ai_skeleton_proto_rawDesc
)

func file_common_pb_msg_ai_skeleton_proto_rawDescGZIP() []byte {
	file_common_pb_msg_ai_skeleton_proto_rawDescOnce.Do(func() {
		file_common_pb_msg_ai_skeleton_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_pb_msg_ai_skeleton_proto_rawDescData)
	})
	return file_common_pb_msg_ai_skeleton_proto_rawDescData
}

var file_common_pb_msg_ai_skeleton_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_common_pb_msg_ai_skeleton_proto_goTypes = []interface{}{
	(*AiSkeleton)(nil),     // 0: pb_msg.AiSkeleton
	(*AiSkeletonBone)(nil), // 1: pb_msg.AiSkeletonBone
	(*AiNode)(nil),         // 2: pb_msg.AiNode
	(*AiMesh)(nil),         // 3: pb_msg.AiMesh
	(*AiVertexWeight)(nil), // 4: pb_msg.AiVertexWeight
	(*AiMatrix4X4)(nil),    // 5: pb_msg.AiMatrix4x4
}
var file_common_pb_msg_ai_skeleton_proto_depIdxs = []int32{
	1, // 0: pb_msg.AiSkeleton.Bones:type_name -> pb_msg.AiSkeletonBone
	2, // 1: pb_msg.AiSkeletonBone.Armature:type_name -> pb_msg.AiNode
	2, // 2: pb_msg.AiSkeletonBone.Node:type_name -> pb_msg.AiNode
	3, // 3: pb_msg.AiSkeletonBone.MeshId:type_name -> pb_msg.AiMesh
	4, // 4: pb_msg.AiSkeletonBone.Weights:type_name -> pb_msg.AiVertexWeight
	5, // 5: pb_msg.AiSkeletonBone.OffsetMatrix:type_name -> pb_msg.AiMatrix4x4
	5, // 6: pb_msg.AiSkeletonBone.LocalMatrix:type_name -> pb_msg.AiMatrix4x4
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_common_pb_msg_ai_skeleton_proto_init() }
func file_common_pb_msg_ai_skeleton_proto_init() {
	if File_common_pb_msg_ai_skeleton_proto != nil {
		return
	}
	file_common_pb_msg_common_proto_init()
	file_common_pb_msg_ai_node_proto_init()
	file_common_pb_msg_ai_vertex_weight_proto_init()
	file_common_pb_msg_ai_mesh_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_pb_msg_ai_skeleton_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiSkeleton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_pb_msg_ai_skeleton_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AiSkeletonBone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_pb_msg_ai_skeleton_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_pb_msg_ai_skeleton_proto_goTypes,
		DependencyIndexes: file_common_pb_msg_ai_skeleton_proto_depIdxs,
		MessageInfos:      file_common_pb_msg_ai_skeleton_proto_msgTypes,
	}.Build()
	File_common_pb_msg_ai_skeleton_proto = out.File
	file_common_pb_msg_ai_skeleton_proto_rawDesc = nil
	file_common_pb_msg_ai_skeleton_proto_goTypes = nil
	file_common_pb_msg_ai_skeleton_proto_depIdxs = nil
}
