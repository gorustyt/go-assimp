syntax = "proto3";
option go_package = "common/pb_msg";
package pb_msg;
import "common/pb_msg/common.proto";
import "common/pb_msg/ai_node.proto";
import "common/pb_msg/ai_vertex_weight.proto";
import "common/pb_msg/ai_mesh.proto";
/**
 * @brief A skeleton represents the bone hierarchy of an animation.
 *
 * Skeleton animations can be described as a tree of bones:
 *                  root
 *                    |
 *                  node1
 *                  /   \
 *               node3  node4
 * If you want to calculate the transformation of node three you need to compute the
 * transformation hierarchy for the transformation chain of node3:
 * root->node1->node3
 * Each node is represented as a skeleton instance.
 */
    message AiSkeleton {
/**
 *  @brief The name of the skeleton instance.
 */
    string Name=1;

/**
 *  @brief The bone instance in the skeleton.
 */
  repeated AiSkeletonBone Bones=2;
}


    /**
 * @brief  A skeleton bone represents a single bone is a skeleton structure.
 *
 * Skeleton-Animations can be represented via a skeleton struct, which describes
 * a hierarchical tree assembled from skeleton bones. A bone is linked to a mesh.
 * The bone knows its parent bone. If there is no parent bone the parent id is
 * marked with -1.
 * The skeleton-bone stores a pointer to its used armature. If there is no
 * armature this value if set to nullptr.
 * A skeleton bone stores its offset-matrix, which is the absolute transformation
 * for the bone. The bone stores the locale transformation to its parent as well.
 * You can compute the offset matrix by multiplying the hierarchy like:
 * Tree: s1 -> s2 -> s3
 * Offset-Matrix s3 = locale-s3 * locale-s2 * locale-s1
 */
message  AiSkeletonBone {
/// The parent bone index, is -1 one if this bone represents the root bone.
    int32 Parent=1;
/// @brief The bone armature node - used for skeleton conversion
/// you must enable aiProcess_PopulateArmatureData to populate this
    repeated AiNode  Armature=2;

/// @brief The bone node in the scene - used for skeleton conversion
/// you must enable aiProcess_PopulateArmatureData to populate this
   repeated AiNode Node=3;
/// The mesh index, which will get influenced by the weight.
    repeated AiMesh MeshId=5;

/// The influence weights of this bone, by vertex index.
    repeated AiVertexWeight  Weights=6;

/** Matrix that transforms from bone space to mesh space in bind pose.
 *
 * This matrix describes the position of the mesh
 * in the local space of this bone when the skeleton was bound.
 * Thus it can be used directly to determine a desired vertex position,
 * given the world-space transform of the bone when animated,
 * and the position of the vertex in mesh space.
 *
 * It is sometimes called an inverse-bind matrix,
 * or inverse bind pose matrix.
 */
    AiMatrix4x4 OffsetMatrix=7;

/// Matrix that transforms the locale bone in bind pose.
    AiMatrix4x4 LocalMatrix=8;
    }