// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/pb_msg/ai_animation.proto

#include "common/pb_msg/ai_animation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace pb_msg {
        template <typename>
PROTOBUF_CONSTEXPR AiAnimation::AiAnimation(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.channels_)*/ {},
      /*decltype(_impl_.meshchannels_)*/ {},
      /*decltype(_impl_.morphmeshchannels_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.duration_)*/ 0,
      /*decltype(_impl_.tickspersecond_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiAnimationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiAnimationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiAnimationDefaultTypeInternal() {}
  union {
    AiAnimation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiAnimationDefaultTypeInternal _AiAnimation_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiMeshMorphAnim::AiMeshMorphAnim(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.keys_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiMeshMorphAnimDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiMeshMorphAnimDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiMeshMorphAnimDefaultTypeInternal() {}
  union {
    AiMeshMorphAnim _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiMeshMorphAnimDefaultTypeInternal _AiMeshMorphAnim_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiMeshMorphKey::AiMeshMorphKey(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.values_)*/ {},
      /* _impl_._values_cached_byte_size_ = */ {0},
      /*decltype(_impl_.weights_)*/ {},
      /*decltype(_impl_.time_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiMeshMorphKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiMeshMorphKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiMeshMorphKeyDefaultTypeInternal() {}
  union {
    AiMeshMorphKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiMeshMorphKeyDefaultTypeInternal _AiMeshMorphKey_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiNodeAnim::AiNodeAnim(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.positionkeys_)*/ {},
      /*decltype(_impl_.rotationkeys_)*/ {},
      /*decltype(_impl_.scalingkeys_)*/ {},
      /*decltype(_impl_.nodename_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.prestate_)*/ 0,
      /*decltype(_impl_.poststate_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiNodeAnimDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiNodeAnimDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiNodeAnimDefaultTypeInternal() {}
  union {
    AiNodeAnim _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiNodeAnimDefaultTypeInternal _AiNodeAnim_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiMeshAnim::AiMeshAnim(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.keys_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiMeshAnimDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiMeshAnimDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiMeshAnimDefaultTypeInternal() {}
  union {
    AiMeshAnim _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiMeshAnimDefaultTypeInternal _AiMeshAnim_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiVectorKey::AiVectorKey(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.value_)*/ nullptr,
      /*decltype(_impl_.time_)*/ 0,
    } {}
struct AiVectorKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiVectorKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiVectorKeyDefaultTypeInternal() {}
  union {
    AiVectorKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiVectorKeyDefaultTypeInternal _AiVectorKey_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiQuatKey::AiQuatKey(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.value_)*/ nullptr,
      /*decltype(_impl_.time_)*/ 0,
    } {}
struct AiQuatKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiQuatKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiQuatKeyDefaultTypeInternal() {}
  union {
    AiQuatKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiQuatKeyDefaultTypeInternal _AiQuatKey_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiMeshKey::AiMeshKey(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.time_)*/ 0,
      /*decltype(_impl_.value_)*/ 0u,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiMeshKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiMeshKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiMeshKeyDefaultTypeInternal() {}
  union {
    AiMeshKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiMeshKeyDefaultTypeInternal _AiMeshKey_default_instance_;
}  // namespace pb_msg
static ::_pb::Metadata file_level_metadata_common_2fpb_5fmsg_2fai_5fanimation_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_common_2fpb_5fmsg_2fai_5fanimation_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2fpb_5fmsg_2fai_5fanimation_2eproto = nullptr;
const ::uint32_t TableStruct_common_2fpb_5fmsg_2fai_5fanimation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimation, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimation, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimation, _impl_.tickspersecond_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimation, _impl_.channels_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimation, _impl_.meshchannels_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimation, _impl_.morphmeshchannels_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshMorphAnim, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshMorphAnim, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshMorphAnim, _impl_.keys_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshMorphKey, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshMorphKey, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshMorphKey, _impl_.values_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshMorphKey, _impl_.weights_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiNodeAnim, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiNodeAnim, _impl_.nodename_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiNodeAnim, _impl_.positionkeys_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiNodeAnim, _impl_.rotationkeys_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiNodeAnim, _impl_.scalingkeys_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiNodeAnim, _impl_.prestate_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiNodeAnim, _impl_.poststate_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshAnim, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshAnim, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshAnim, _impl_.keys_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiVectorKey, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiVectorKey, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiVectorKey, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiVectorKey, _impl_.value_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiQuatKey, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiQuatKey, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiQuatKey, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiQuatKey, _impl_.value_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshKey, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshKey, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMeshKey, _impl_.value_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::pb_msg::AiAnimation)},
        {14, -1, -1, sizeof(::pb_msg::AiMeshMorphAnim)},
        {24, -1, -1, sizeof(::pb_msg::AiMeshMorphKey)},
        {35, -1, -1, sizeof(::pb_msg::AiNodeAnim)},
        {49, -1, -1, sizeof(::pb_msg::AiMeshAnim)},
        {59, 69, -1, sizeof(::pb_msg::AiVectorKey)},
        {71, 81, -1, sizeof(::pb_msg::AiQuatKey)},
        {83, -1, -1, sizeof(::pb_msg::AiMeshKey)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::pb_msg::_AiAnimation_default_instance_._instance,
    &::pb_msg::_AiMeshMorphAnim_default_instance_._instance,
    &::pb_msg::_AiMeshMorphKey_default_instance_._instance,
    &::pb_msg::_AiNodeAnim_default_instance_._instance,
    &::pb_msg::_AiMeshAnim_default_instance_._instance,
    &::pb_msg::_AiVectorKey_default_instance_._instance,
    &::pb_msg::_AiQuatKey_default_instance_._instance,
    &::pb_msg::_AiMeshKey_default_instance_._instance,
};
const char descriptor_table_protodef_common_2fpb_5fmsg_2fai_5fanimation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n common/pb_msg/ai_animation.proto\022\006pb_m"
    "sg\032\032common/pb_msg/common.proto\"\311\001\n\013AiAni"
    "mation\022\014\n\004Name\030\001 \001(\t\022\020\n\010Duration\030\002 \001(\001\022\026"
    "\n\016TicksPerSecond\030\003 \001(\001\022$\n\010Channels\030\004 \003(\013"
    "2\022.pb_msg.AiNodeAnim\022(\n\014MeshChannels\030\005 \003"
    "(\0132\022.pb_msg.AiMeshAnim\0222\n\021MorphMeshChann"
    "els\030\006 \003(\0132\027.pb_msg.AiMeshMorphAnim\"E\n\017Ai"
    "MeshMorphAnim\022\014\n\004Name\030\001 \001(\t\022$\n\004Keys\030\002 \003("
    "\0132\026.pb_msg.AiMeshMorphKey\"\?\n\016AiMeshMorph"
    "Key\022\014\n\004Time\030\001 \001(\001\022\016\n\006Values\030\002 \003(\r\022\017\n\007Wei"
    "ghts\030\003 \003(\001\"\301\001\n\nAiNodeAnim\022\020\n\010NodeName\030\001 "
    "\001(\t\022)\n\014PositionKeys\030\002 \003(\0132\023.pb_msg.AiVec"
    "torKey\022\'\n\014RotationKeys\030\003 \003(\0132\021.pb_msg.Ai"
    "QuatKey\022(\n\013ScalingKeys\030\004 \003(\0132\023.pb_msg.Ai"
    "VectorKey\022\020\n\010PreState\030\005 \001(\005\022\021\n\tPostState"
    "\030\006 \001(\005\";\n\nAiMeshAnim\022\014\n\004Name\030\001 \001(\t\022\037\n\004Ke"
    "ys\030\002 \003(\0132\021.pb_msg.AiMeshKey\">\n\013AiVectorK"
    "ey\022\014\n\004Time\030\001 \001(\001\022!\n\005Value\030\002 \001(\0132\022.pb_msg"
    ".AiVector3D\">\n\tAiQuatKey\022\014\n\004Time\030\001 \001(\001\022#"
    "\n\005Value\030\002 \001(\0132\024.pb_msg.AiQuaternion\"(\n\tA"
    "iMeshKey\022\014\n\004Time\030\001 \001(\001\022\r\n\005Value\030\002 \001(\rB\017Z"
    "\rcommon/pb_msgb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_deps[1] =
    {
        &::descriptor_table_common_2fpb_5fmsg_2fcommon_2eproto,
};
static ::absl::once_flag descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto = {
    false,
    false,
    862,
    descriptor_table_protodef_common_2fpb_5fmsg_2fai_5fanimation_2eproto,
    "common/pb_msg/ai_animation.proto",
    &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_once,
    descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_deps,
    1,
    8,
    schemas,
    file_default_instances,
    TableStruct_common_2fpb_5fmsg_2fai_5fanimation_2eproto::offsets,
    file_level_metadata_common_2fpb_5fmsg_2fai_5fanimation_2eproto,
    file_level_enum_descriptors_common_2fpb_5fmsg_2fai_5fanimation_2eproto,
    file_level_service_descriptors_common_2fpb_5fmsg_2fai_5fanimation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_getter() {
  return &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fpb_5fmsg_2fai_5fanimation_2eproto(&descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto);
namespace pb_msg {
// ===================================================================

class AiAnimation::_Internal {
 public:
};

AiAnimation::AiAnimation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiAnimation)
}
AiAnimation::AiAnimation(const AiAnimation& from) : ::google::protobuf::Message() {
  AiAnimation* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){from._impl_.channels_},
      decltype(_impl_.meshchannels_){from._impl_.meshchannels_},
      decltype(_impl_.morphmeshchannels_){from._impl_.morphmeshchannels_},
      decltype(_impl_.name_){},
      decltype(_impl_.duration_){},
      decltype(_impl_.tickspersecond_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tickspersecond_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.tickspersecond_));

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiAnimation)
}
inline void AiAnimation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){arena},
      decltype(_impl_.meshchannels_){arena},
      decltype(_impl_.morphmeshchannels_){arena},
      decltype(_impl_.name_){},
      decltype(_impl_.duration_){0},
      decltype(_impl_.tickspersecond_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiAnimation::~AiAnimation() {
  // @@protoc_insertion_point(destructor:pb_msg.AiAnimation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiAnimation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channels_.~RepeatedPtrField();
  _impl_.meshchannels_.~RepeatedPtrField();
  _impl_.morphmeshchannels_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}
void AiAnimation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiAnimation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_channels()->Clear();
  _internal_mutable_meshchannels()->Clear();
  _internal_mutable_morphmeshchannels()->Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.duration_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tickspersecond_) -
      reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.tickspersecond_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiAnimation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 31, 2> AiAnimation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiAnimation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string Name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.name_)}},
    // double Duration = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.duration_)}},
    // double TicksPerSecond = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.tickspersecond_)}},
    // repeated .pb_msg.AiNodeAnim Channels = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.channels_)}},
    // repeated .pb_msg.AiMeshAnim MeshChannels = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 1, PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.meshchannels_)}},
    // repeated .pb_msg.AiMeshMorphAnim MorphMeshChannels = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 2, PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.morphmeshchannels_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string Name = 1;
    {PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double Duration = 2;
    {PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.duration_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double TicksPerSecond = 3;
    {PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.tickspersecond_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated .pb_msg.AiNodeAnim Channels = 4;
    {PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.channels_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiMeshAnim MeshChannels = 5;
    {PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.meshchannels_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiMeshMorphAnim MorphMeshChannels = 6;
    {PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.morphmeshchannels_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiNodeAnim>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiMeshAnim>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiMeshMorphAnim>()},
  }}, {{
    "\22\4\0\0\0\0\0\0"
    "pb_msg.AiAnimation"
    "Name"
  }},
};

::uint8_t* AiAnimation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiAnimation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "pb_msg.AiAnimation.Name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // double Duration = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_duration = this->_internal_duration();
  ::uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_duration(), target);
  }

  // double TicksPerSecond = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_tickspersecond = this->_internal_tickspersecond();
  ::uint64_t raw_tickspersecond;
  memcpy(&raw_tickspersecond, &tmp_tickspersecond, sizeof(tmp_tickspersecond));
  if (raw_tickspersecond != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_tickspersecond(), target);
  }

  // repeated .pb_msg.AiNodeAnim Channels = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiMeshAnim MeshChannels = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_meshchannels_size()); i < n; i++) {
    const auto& repfield = this->_internal_meshchannels().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiMeshMorphAnim MorphMeshChannels = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_morphmeshchannels_size()); i < n; i++) {
    const auto& repfield = this->_internal_morphmeshchannels().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiAnimation)
  return target;
}

::size_t AiAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiAnimation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_msg.AiNodeAnim Channels = 4;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->_internal_channels()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiMeshAnim MeshChannels = 5;
  total_size += 1UL * this->_internal_meshchannels_size();
  for (const auto& msg : this->_internal_meshchannels()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiMeshMorphAnim MorphMeshChannels = 6;
  total_size += 1UL * this->_internal_morphmeshchannels_size();
  for (const auto& msg : this->_internal_morphmeshchannels()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // double Duration = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_duration = this->_internal_duration();
  ::uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 9;
  }

  // double TicksPerSecond = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_tickspersecond = this->_internal_tickspersecond();
  ::uint64_t raw_tickspersecond;
  memcpy(&raw_tickspersecond, &tmp_tickspersecond, sizeof(tmp_tickspersecond));
  if (raw_tickspersecond != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiAnimation::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiAnimation::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiAnimation::GetClassData() const { return &_class_data_; }


void AiAnimation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiAnimation*>(&to_msg);
  auto& from = static_cast<const AiAnimation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiAnimation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_channels()->MergeFrom(from._internal_channels());
  _this->_internal_mutable_meshchannels()->MergeFrom(from._internal_meshchannels());
  _this->_internal_mutable_morphmeshchannels()->MergeFrom(from._internal_morphmeshchannels());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_duration = from._internal_duration();
  ::uint64_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_tickspersecond = from._internal_tickspersecond();
  ::uint64_t raw_tickspersecond;
  memcpy(&raw_tickspersecond, &tmp_tickspersecond, sizeof(tmp_tickspersecond));
  if (raw_tickspersecond != 0) {
    _this->_internal_set_tickspersecond(from._internal_tickspersecond());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiAnimation::CopyFrom(const AiAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiAnimation::IsInitialized() const {
  return true;
}

void AiAnimation::InternalSwap(AiAnimation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channels_.InternalSwap(&other->_impl_.channels_);
  _impl_.meshchannels_.InternalSwap(&other->_impl_.meshchannels_);
  _impl_.morphmeshchannels_.InternalSwap(&other->_impl_.morphmeshchannels_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.tickspersecond_)
      + sizeof(AiAnimation::_impl_.tickspersecond_)
      - PROTOBUF_FIELD_OFFSET(AiAnimation, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::google::protobuf::Metadata AiAnimation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fanimation_2eproto[0]);
}
// ===================================================================

class AiMeshMorphAnim::_Internal {
 public:
};

AiMeshMorphAnim::AiMeshMorphAnim(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiMeshMorphAnim)
}
AiMeshMorphAnim::AiMeshMorphAnim(const AiMeshMorphAnim& from) : ::google::protobuf::Message() {
  AiMeshMorphAnim* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_},
      decltype(_impl_.name_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiMeshMorphAnim)
}
inline void AiMeshMorphAnim::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena},
      decltype(_impl_.name_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiMeshMorphAnim::~AiMeshMorphAnim() {
  // @@protoc_insertion_point(destructor:pb_msg.AiMeshMorphAnim)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiMeshMorphAnim::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}
void AiMeshMorphAnim::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiMeshMorphAnim::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiMeshMorphAnim)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiMeshMorphAnim::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 35, 2> AiMeshMorphAnim::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiMeshMorphAnim_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .pb_msg.AiMeshMorphKey Keys = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiMeshMorphAnim, _impl_.keys_)}},
    // string Name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiMeshMorphAnim, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string Name = 1;
    {PROTOBUF_FIELD_OFFSET(AiMeshMorphAnim, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .pb_msg.AiMeshMorphKey Keys = 2;
    {PROTOBUF_FIELD_OFFSET(AiMeshMorphAnim, _impl_.keys_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiMeshMorphKey>()},
  }}, {{
    "\26\4\0\0\0\0\0\0"
    "pb_msg.AiMeshMorphAnim"
    "Name"
  }},
};

::uint8_t* AiMeshMorphAnim::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiMeshMorphAnim)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "pb_msg.AiMeshMorphAnim.Name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .pb_msg.AiMeshMorphKey Keys = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiMeshMorphAnim)
  return target;
}

::size_t AiMeshMorphAnim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiMeshMorphAnim)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_msg.AiMeshMorphKey Keys = 2;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_internal_keys()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiMeshMorphAnim::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiMeshMorphAnim::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiMeshMorphAnim::GetClassData() const { return &_class_data_; }


void AiMeshMorphAnim::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiMeshMorphAnim*>(&to_msg);
  auto& from = static_cast<const AiMeshMorphAnim&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiMeshMorphAnim)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiMeshMorphAnim::CopyFrom(const AiMeshMorphAnim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiMeshMorphAnim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiMeshMorphAnim::IsInitialized() const {
  return true;
}

void AiMeshMorphAnim::InternalSwap(AiMeshMorphAnim* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::google::protobuf::Metadata AiMeshMorphAnim::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fanimation_2eproto[1]);
}
// ===================================================================

class AiMeshMorphKey::_Internal {
 public:
};

AiMeshMorphKey::AiMeshMorphKey(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiMeshMorphKey)
}
AiMeshMorphKey::AiMeshMorphKey(const AiMeshMorphKey& from) : ::google::protobuf::Message() {
  AiMeshMorphKey* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_},
      /* _impl_._values_cached_byte_size_ = */ {0},
      decltype(_impl_.weights_){from._impl_.weights_},
      decltype(_impl_.time_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.time_ = from._impl_.time_;

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiMeshMorphKey)
}
inline void AiMeshMorphKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena},
      /* _impl_._values_cached_byte_size_ = */ {0},
      decltype(_impl_.weights_){arena},
      decltype(_impl_.time_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AiMeshMorphKey::~AiMeshMorphKey() {
  // @@protoc_insertion_point(destructor:pb_msg.AiMeshMorphKey)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiMeshMorphKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedField();
  _impl_.weights_.~RepeatedField();
}
void AiMeshMorphKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiMeshMorphKey::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiMeshMorphKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_values()->Clear();
  _internal_mutable_weights()->Clear();
  _impl_.time_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiMeshMorphKey::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> AiMeshMorphKey::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiMeshMorphKey_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // double Time = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(AiMeshMorphKey, _impl_.time_)}},
    // repeated uint32 Values = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiMeshMorphKey, _impl_.values_)}},
    // repeated double Weights = 3;
    {::_pbi::TcParser::FastF64P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AiMeshMorphKey, _impl_.weights_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double Time = 1;
    {PROTOBUF_FIELD_OFFSET(AiMeshMorphKey, _impl_.time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated uint32 Values = 2;
    {PROTOBUF_FIELD_OFFSET(AiMeshMorphKey, _impl_.values_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated double Weights = 3;
    {PROTOBUF_FIELD_OFFSET(AiMeshMorphKey, _impl_.weights_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AiMeshMorphKey::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiMeshMorphKey)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double Time = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time(), target);
  }

  // repeated uint32 Values = 2;
  {
    int byte_size = _impl_._values_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(2, _internal_values(),
                                                 byte_size, target);
    }
  }

  // repeated double Weights = 3;
  if (this->_internal_weights_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_weights(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiMeshMorphKey)
  return target;
}

::size_t AiMeshMorphKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiMeshMorphKey)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Values = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_values())
    ;
    _impl_._values_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated double Weights = 3;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_weights_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // double Time = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiMeshMorphKey::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiMeshMorphKey::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiMeshMorphKey::GetClassData() const { return &_class_data_; }


void AiMeshMorphKey::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiMeshMorphKey*>(&to_msg);
  auto& from = static_cast<const AiMeshMorphKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiMeshMorphKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
  _this->_internal_mutable_weights()->MergeFrom(from._internal_weights());
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = from._internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiMeshMorphKey::CopyFrom(const AiMeshMorphKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiMeshMorphKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiMeshMorphKey::IsInitialized() const {
  return true;
}

void AiMeshMorphKey::InternalSwap(AiMeshMorphKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  _impl_.weights_.InternalSwap(&other->_impl_.weights_);
        swap(_impl_.time_, other->_impl_.time_);
}

::google::protobuf::Metadata AiMeshMorphKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fanimation_2eproto[2]);
}
// ===================================================================

class AiNodeAnim::_Internal {
 public:
};

AiNodeAnim::AiNodeAnim(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiNodeAnim)
}
AiNodeAnim::AiNodeAnim(const AiNodeAnim& from) : ::google::protobuf::Message() {
  AiNodeAnim* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.positionkeys_){from._impl_.positionkeys_},
      decltype(_impl_.rotationkeys_){from._impl_.rotationkeys_},
      decltype(_impl_.scalingkeys_){from._impl_.scalingkeys_},
      decltype(_impl_.nodename_){},
      decltype(_impl_.prestate_){},
      decltype(_impl_.poststate_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.nodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.nodename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodename().empty()) {
    _this->_impl_.nodename_.Set(from._internal_nodename(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.prestate_, &from._impl_.prestate_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.poststate_) -
    reinterpret_cast<char*>(&_impl_.prestate_)) + sizeof(_impl_.poststate_));

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiNodeAnim)
}
inline void AiNodeAnim::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.positionkeys_){arena},
      decltype(_impl_.rotationkeys_){arena},
      decltype(_impl_.scalingkeys_){arena},
      decltype(_impl_.nodename_){},
      decltype(_impl_.prestate_){0},
      decltype(_impl_.poststate_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.nodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.nodename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiNodeAnim::~AiNodeAnim() {
  // @@protoc_insertion_point(destructor:pb_msg.AiNodeAnim)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiNodeAnim::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.positionkeys_.~RepeatedPtrField();
  _impl_.rotationkeys_.~RepeatedPtrField();
  _impl_.scalingkeys_.~RepeatedPtrField();
  _impl_.nodename_.Destroy();
}
void AiNodeAnim::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiNodeAnim::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiNodeAnim)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_positionkeys()->Clear();
  _internal_mutable_rotationkeys()->Clear();
  _internal_mutable_scalingkeys()->Clear();
  _impl_.nodename_.ClearToEmpty();
  ::memset(&_impl_.prestate_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.poststate_) -
      reinterpret_cast<char*>(&_impl_.prestate_)) + sizeof(_impl_.poststate_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiNodeAnim::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 34, 2> AiNodeAnim::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiNodeAnim_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string NodeName = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.nodename_)}},
    // repeated .pb_msg.AiVectorKey PositionKeys = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.positionkeys_)}},
    // repeated .pb_msg.AiQuatKey RotationKeys = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.rotationkeys_)}},
    // repeated .pb_msg.AiVectorKey ScalingKeys = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.scalingkeys_)}},
    // int32 PreState = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiNodeAnim, _impl_.prestate_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.prestate_)}},
    // int32 PostState = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiNodeAnim, _impl_.poststate_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.poststate_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string NodeName = 1;
    {PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.nodename_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .pb_msg.AiVectorKey PositionKeys = 2;
    {PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.positionkeys_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiQuatKey RotationKeys = 3;
    {PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.rotationkeys_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiVectorKey ScalingKeys = 4;
    {PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.scalingkeys_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 PreState = 5;
    {PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.prestate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 PostState = 6;
    {PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.poststate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiVectorKey>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiQuatKey>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiVectorKey>()},
  }}, {{
    "\21\10\0\0\0\0\0\0"
    "pb_msg.AiNodeAnim"
    "NodeName"
  }},
};

::uint8_t* AiNodeAnim::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiNodeAnim)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string NodeName = 1;
  if (!this->_internal_nodename().empty()) {
    const std::string& _s = this->_internal_nodename();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "pb_msg.AiNodeAnim.NodeName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .pb_msg.AiVectorKey PositionKeys = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_positionkeys_size()); i < n; i++) {
    const auto& repfield = this->_internal_positionkeys().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiQuatKey RotationKeys = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rotationkeys_size()); i < n; i++) {
    const auto& repfield = this->_internal_rotationkeys().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiVectorKey ScalingKeys = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_scalingkeys_size()); i < n; i++) {
    const auto& repfield = this->_internal_scalingkeys().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 PreState = 5;
  if (this->_internal_prestate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_prestate(), target);
  }

  // int32 PostState = 6;
  if (this->_internal_poststate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_poststate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiNodeAnim)
  return target;
}

::size_t AiNodeAnim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiNodeAnim)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_msg.AiVectorKey PositionKeys = 2;
  total_size += 1UL * this->_internal_positionkeys_size();
  for (const auto& msg : this->_internal_positionkeys()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiQuatKey RotationKeys = 3;
  total_size += 1UL * this->_internal_rotationkeys_size();
  for (const auto& msg : this->_internal_rotationkeys()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiVectorKey ScalingKeys = 4;
  total_size += 1UL * this->_internal_scalingkeys_size();
  for (const auto& msg : this->_internal_scalingkeys()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string NodeName = 1;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_nodename());
  }

  // int32 PreState = 5;
  if (this->_internal_prestate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_prestate());
  }

  // int32 PostState = 6;
  if (this->_internal_poststate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_poststate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiNodeAnim::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiNodeAnim::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiNodeAnim::GetClassData() const { return &_class_data_; }


void AiNodeAnim::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiNodeAnim*>(&to_msg);
  auto& from = static_cast<const AiNodeAnim&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiNodeAnim)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_positionkeys()->MergeFrom(from._internal_positionkeys());
  _this->_internal_mutable_rotationkeys()->MergeFrom(from._internal_rotationkeys());
  _this->_internal_mutable_scalingkeys()->MergeFrom(from._internal_scalingkeys());
  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  if (from._internal_prestate() != 0) {
    _this->_internal_set_prestate(from._internal_prestate());
  }
  if (from._internal_poststate() != 0) {
    _this->_internal_set_poststate(from._internal_poststate());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiNodeAnim::CopyFrom(const AiNodeAnim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiNodeAnim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiNodeAnim::IsInitialized() const {
  return true;
}

void AiNodeAnim::InternalSwap(AiNodeAnim* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.positionkeys_.InternalSwap(&other->_impl_.positionkeys_);
  _impl_.rotationkeys_.InternalSwap(&other->_impl_.rotationkeys_);
  _impl_.scalingkeys_.InternalSwap(&other->_impl_.scalingkeys_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nodename_, lhs_arena,
                                       &other->_impl_.nodename_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.poststate_)
      + sizeof(AiNodeAnim::_impl_.poststate_)
      - PROTOBUF_FIELD_OFFSET(AiNodeAnim, _impl_.prestate_)>(
          reinterpret_cast<char*>(&_impl_.prestate_),
          reinterpret_cast<char*>(&other->_impl_.prestate_));
}

::google::protobuf::Metadata AiNodeAnim::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fanimation_2eproto[3]);
}
// ===================================================================

class AiMeshAnim::_Internal {
 public:
};

AiMeshAnim::AiMeshAnim(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiMeshAnim)
}
AiMeshAnim::AiMeshAnim(const AiMeshAnim& from) : ::google::protobuf::Message() {
  AiMeshAnim* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_},
      decltype(_impl_.name_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiMeshAnim)
}
inline void AiMeshAnim::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena},
      decltype(_impl_.name_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiMeshAnim::~AiMeshAnim() {
  // @@protoc_insertion_point(destructor:pb_msg.AiMeshAnim)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiMeshAnim::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keys_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}
void AiMeshAnim::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiMeshAnim::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiMeshAnim)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiMeshAnim::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 30, 2> AiMeshAnim::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiMeshAnim_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .pb_msg.AiMeshKey Keys = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiMeshAnim, _impl_.keys_)}},
    // string Name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiMeshAnim, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string Name = 1;
    {PROTOBUF_FIELD_OFFSET(AiMeshAnim, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .pb_msg.AiMeshKey Keys = 2;
    {PROTOBUF_FIELD_OFFSET(AiMeshAnim, _impl_.keys_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiMeshKey>()},
  }}, {{
    "\21\4\0\0\0\0\0\0"
    "pb_msg.AiMeshAnim"
    "Name"
  }},
};

::uint8_t* AiMeshAnim::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiMeshAnim)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "pb_msg.AiMeshAnim.Name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .pb_msg.AiMeshKey Keys = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_keys().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiMeshAnim)
  return target;
}

::size_t AiMeshAnim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiMeshAnim)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_msg.AiMeshKey Keys = 2;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->_internal_keys()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiMeshAnim::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiMeshAnim::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiMeshAnim::GetClassData() const { return &_class_data_; }


void AiMeshAnim::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiMeshAnim*>(&to_msg);
  auto& from = static_cast<const AiMeshAnim&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiMeshAnim)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiMeshAnim::CopyFrom(const AiMeshAnim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiMeshAnim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiMeshAnim::IsInitialized() const {
  return true;
}

void AiMeshAnim::InternalSwap(AiMeshAnim* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.keys_.InternalSwap(&other->_impl_.keys_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::google::protobuf::Metadata AiMeshAnim::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fanimation_2eproto[4]);
}
// ===================================================================

class AiVectorKey::_Internal {
 public:
  using HasBits = decltype(std::declval<AiVectorKey>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AiVectorKey, _impl_._has_bits_);
  static const ::pb_msg::AiVector3D& value(const AiVectorKey* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pb_msg::AiVector3D& AiVectorKey::_Internal::value(const AiVectorKey* msg) {
  return *msg->_impl_.value_;
}
void AiVectorKey::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AiVectorKey::AiVectorKey(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiVectorKey)
}
AiVectorKey::AiVectorKey(const AiVectorKey& from) : ::google::protobuf::Message() {
  AiVectorKey* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.value_){nullptr},
      decltype(_impl_.time_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.value_ = new ::pb_msg::AiVector3D(*from._impl_.value_);
  }
  _this->_impl_.time_ = from._impl_.time_;

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiVectorKey)
}
inline void AiVectorKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.value_){nullptr},
      decltype(_impl_.time_){0},
  };
}
AiVectorKey::~AiVectorKey() {
  // @@protoc_insertion_point(destructor:pb_msg.AiVectorKey)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiVectorKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.value_;
}
void AiVectorKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiVectorKey::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiVectorKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.value_ != nullptr);
    _impl_.value_->Clear();
  }
  _impl_.time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiVectorKey::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> AiVectorKey::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AiVectorKey, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiVectorKey_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .pb_msg.AiVector3D Value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AiVectorKey, _impl_.value_)}},
    // double Time = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(AiVectorKey, _impl_.time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double Time = 1;
    {PROTOBUF_FIELD_OFFSET(AiVectorKey, _impl_.time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .pb_msg.AiVector3D Value = 2;
    {PROTOBUF_FIELD_OFFSET(AiVectorKey, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
  }}, {{
  }},
};

::uint8_t* AiVectorKey::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiVectorKey)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double Time = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .pb_msg.AiVector3D Value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiVectorKey)
  return target;
}

::size_t AiVectorKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiVectorKey)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb_msg.AiVector3D Value = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  // double Time = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiVectorKey::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiVectorKey::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiVectorKey::GetClassData() const { return &_class_data_; }


void AiVectorKey::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiVectorKey*>(&to_msg);
  auto& from = static_cast<const AiVectorKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiVectorKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_value()->::pb_msg::AiVector3D::MergeFrom(
        from._internal_value());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = from._internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiVectorKey::CopyFrom(const AiVectorKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiVectorKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiVectorKey::IsInitialized() const {
  return true;
}

void AiVectorKey::InternalSwap(AiVectorKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiVectorKey, _impl_.time_)
      + sizeof(AiVectorKey::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(AiVectorKey, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::google::protobuf::Metadata AiVectorKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fanimation_2eproto[5]);
}
// ===================================================================

class AiQuatKey::_Internal {
 public:
  using HasBits = decltype(std::declval<AiQuatKey>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AiQuatKey, _impl_._has_bits_);
  static const ::pb_msg::AiQuaternion& value(const AiQuatKey* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pb_msg::AiQuaternion& AiQuatKey::_Internal::value(const AiQuatKey* msg) {
  return *msg->_impl_.value_;
}
void AiQuatKey::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AiQuatKey::AiQuatKey(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiQuatKey)
}
AiQuatKey::AiQuatKey(const AiQuatKey& from) : ::google::protobuf::Message() {
  AiQuatKey* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.value_){nullptr},
      decltype(_impl_.time_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.value_ = new ::pb_msg::AiQuaternion(*from._impl_.value_);
  }
  _this->_impl_.time_ = from._impl_.time_;

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiQuatKey)
}
inline void AiQuatKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.value_){nullptr},
      decltype(_impl_.time_){0},
  };
}
AiQuatKey::~AiQuatKey() {
  // @@protoc_insertion_point(destructor:pb_msg.AiQuatKey)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiQuatKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.value_;
}
void AiQuatKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiQuatKey::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiQuatKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.value_ != nullptr);
    _impl_.value_->Clear();
  }
  _impl_.time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiQuatKey::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> AiQuatKey::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AiQuatKey, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiQuatKey_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .pb_msg.AiQuaternion Value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AiQuatKey, _impl_.value_)}},
    // double Time = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(AiQuatKey, _impl_.time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double Time = 1;
    {PROTOBUF_FIELD_OFFSET(AiQuatKey, _impl_.time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .pb_msg.AiQuaternion Value = 2;
    {PROTOBUF_FIELD_OFFSET(AiQuatKey, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiQuaternion>()},
  }}, {{
  }},
};

::uint8_t* AiQuatKey::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiQuatKey)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double Time = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .pb_msg.AiQuaternion Value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiQuatKey)
  return target;
}

::size_t AiQuatKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiQuatKey)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pb_msg.AiQuaternion Value = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  // double Time = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiQuatKey::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiQuatKey::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiQuatKey::GetClassData() const { return &_class_data_; }


void AiQuatKey::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiQuatKey*>(&to_msg);
  auto& from = static_cast<const AiQuatKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiQuatKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_value()->::pb_msg::AiQuaternion::MergeFrom(
        from._internal_value());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = from._internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiQuatKey::CopyFrom(const AiQuatKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiQuatKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiQuatKey::IsInitialized() const {
  return true;
}

void AiQuatKey::InternalSwap(AiQuatKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiQuatKey, _impl_.time_)
      + sizeof(AiQuatKey::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(AiQuatKey, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::google::protobuf::Metadata AiQuatKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fanimation_2eproto[6]);
}
// ===================================================================

class AiMeshKey::_Internal {
 public:
};

AiMeshKey::AiMeshKey(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiMeshKey)
}
AiMeshKey::AiMeshKey(const AiMeshKey& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb_msg.AiMeshKey)
}
inline void AiMeshKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){0},
      decltype(_impl_.value_){0u},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AiMeshKey::~AiMeshKey() {
  // @@protoc_insertion_point(destructor:pb_msg.AiMeshKey)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiMeshKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void AiMeshKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiMeshKey::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiMeshKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiMeshKey::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AiMeshKey::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiMeshKey_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 Value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiMeshKey, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AiMeshKey, _impl_.value_)}},
    // double Time = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(AiMeshKey, _impl_.time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double Time = 1;
    {PROTOBUF_FIELD_OFFSET(AiMeshKey, _impl_.time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // uint32 Value = 2;
    {PROTOBUF_FIELD_OFFSET(AiMeshKey, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AiMeshKey::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiMeshKey)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double Time = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time(), target);
  }

  // uint32 Value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiMeshKey)
  return target;
}

::size_t AiMeshKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiMeshKey)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Time = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = this->_internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    total_size += 9;
  }

  // uint32 Value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiMeshKey::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiMeshKey::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiMeshKey::GetClassData() const { return &_class_data_; }


void AiMeshKey::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiMeshKey*>(&to_msg);
  auto& from = static_cast<const AiMeshKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiMeshKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time = from._internal_time();
  ::uint64_t raw_time;
  memcpy(&raw_time, &tmp_time, sizeof(tmp_time));
  if (raw_time != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiMeshKey::CopyFrom(const AiMeshKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiMeshKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiMeshKey::IsInitialized() const {
  return true;
}

void AiMeshKey::InternalSwap(AiMeshKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiMeshKey, _impl_.value_)
      + sizeof(AiMeshKey::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(AiMeshKey, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata AiMeshKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fanimation_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fanimation_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
