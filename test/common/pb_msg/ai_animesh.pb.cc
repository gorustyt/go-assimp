// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/pb_msg/ai_animesh.proto

#include "common/pb_msg/ai_animesh.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace pb_msg {
        template <typename>
PROTOBUF_CONSTEXPR AiAnimMesh_ColorsArray::AiAnimMesh_ColorsArray(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.colors_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiAnimMesh_ColorsArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiAnimMesh_ColorsArrayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiAnimMesh_ColorsArrayDefaultTypeInternal() {}
  union {
    AiAnimMesh_ColorsArray _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiAnimMesh_ColorsArrayDefaultTypeInternal _AiAnimMesh_ColorsArray_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiAnimMesh_TextureCoordsArray::AiAnimMesh_TextureCoordsArray(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.texturecoords_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiAnimMesh_TextureCoordsArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiAnimMesh_TextureCoordsArrayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiAnimMesh_TextureCoordsArrayDefaultTypeInternal() {}
  union {
    AiAnimMesh_TextureCoordsArray _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiAnimMesh_TextureCoordsArrayDefaultTypeInternal _AiAnimMesh_TextureCoordsArray_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiAnimMesh::AiAnimMesh(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.vertices_)*/ {},
      /*decltype(_impl_.normals_)*/ {},
      /*decltype(_impl_.tangents_)*/ {},
      /*decltype(_impl_.bitangents_)*/ {},
      /*decltype(_impl_.colors_)*/ {},
      /*decltype(_impl_.texturecoords_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.weight_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiAnimMeshDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiAnimMeshDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiAnimMeshDefaultTypeInternal() {}
  union {
    AiAnimMesh _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiAnimMeshDefaultTypeInternal _AiAnimMesh_default_instance_;
}  // namespace pb_msg
static ::_pb::Metadata file_level_metadata_common_2fpb_5fmsg_2fai_5fanimesh_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_common_2fpb_5fmsg_2fai_5fanimesh_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2fpb_5fmsg_2fai_5fanimesh_2eproto = nullptr;
const ::uint32_t TableStruct_common_2fpb_5fmsg_2fai_5fanimesh_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh_ColorsArray, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh_ColorsArray, _impl_.colors_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh_TextureCoordsArray, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh_TextureCoordsArray, _impl_.texturecoords_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh, _impl_.vertices_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh, _impl_.normals_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh, _impl_.tangents_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh, _impl_.bitangents_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh, _impl_.colors_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh, _impl_.texturecoords_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiAnimMesh, _impl_.weight_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::pb_msg::AiAnimMesh_ColorsArray)},
        {9, -1, -1, sizeof(::pb_msg::AiAnimMesh_TextureCoordsArray)},
        {18, -1, -1, sizeof(::pb_msg::AiAnimMesh)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::pb_msg::_AiAnimMesh_ColorsArray_default_instance_._instance,
    &::pb_msg::_AiAnimMesh_TextureCoordsArray_default_instance_._instance,
    &::pb_msg::_AiAnimMesh_default_instance_._instance,
};
const char descriptor_table_protodef_common_2fpb_5fmsg_2fai_5fanimesh_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036common/pb_msg/ai_animesh.proto\022\006pb_msg"
    "\032\032common/pb_msg/common.proto\"\244\003\n\nAiAnimM"
    "esh\022\014\n\004Name\030\001 \001(\t\022$\n\010Vertices\030\002 \003(\0132\022.pb"
    "_msg.AiVector3D\022#\n\007Normals\030\003 \003(\0132\022.pb_ms"
    "g.AiVector3D\022$\n\010Tangents\030\004 \003(\0132\022.pb_msg."
    "AiVector3D\022&\n\nBitangents\030\005 \003(\0132\022.pb_msg."
    "AiVector3D\022.\n\006Colors\030\006 \003(\0132\036.pb_msg.AiAn"
    "imMesh.ColorsArray\022<\n\rTextureCoords\030\007 \003("
    "\0132%.pb_msg.AiAnimMesh.TextureCoordsArray"
    "\022\016\n\006Weight\030\t \001(\002\0320\n\013ColorsArray\022!\n\006Color"
    "s\030\001 \003(\0132\021.pb_msg.AiColor4D\032\?\n\022TextureCoo"
    "rdsArray\022)\n\rTextureCoords\030\001 \003(\0132\022.pb_msg"
    ".AiVector3DB\017Z\rcommon/pb_msgb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_deps[1] =
    {
        &::descriptor_table_common_2fpb_5fmsg_2fcommon_2eproto,
};
static ::absl::once_flag descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto = {
    false,
    false,
    516,
    descriptor_table_protodef_common_2fpb_5fmsg_2fai_5fanimesh_2eproto,
    "common/pb_msg/ai_animesh.proto",
    &descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_once,
    descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_common_2fpb_5fmsg_2fai_5fanimesh_2eproto::offsets,
    file_level_metadata_common_2fpb_5fmsg_2fai_5fanimesh_2eproto,
    file_level_enum_descriptors_common_2fpb_5fmsg_2fai_5fanimesh_2eproto,
    file_level_service_descriptors_common_2fpb_5fmsg_2fai_5fanimesh_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_getter() {
  return &descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fpb_5fmsg_2fai_5fanimesh_2eproto(&descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto);
namespace pb_msg {
// ===================================================================

class AiAnimMesh_ColorsArray::_Internal {
 public:
};

void AiAnimMesh_ColorsArray::clear_colors() {
  _internal_mutable_colors()->Clear();
}
AiAnimMesh_ColorsArray::AiAnimMesh_ColorsArray(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiAnimMesh.ColorsArray)
}
AiAnimMesh_ColorsArray::AiAnimMesh_ColorsArray(const AiAnimMesh_ColorsArray& from) : ::google::protobuf::Message() {
  AiAnimMesh_ColorsArray* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.colors_){from._impl_.colors_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiAnimMesh.ColorsArray)
}
inline void AiAnimMesh_ColorsArray::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.colors_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AiAnimMesh_ColorsArray::~AiAnimMesh_ColorsArray() {
  // @@protoc_insertion_point(destructor:pb_msg.AiAnimMesh.ColorsArray)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiAnimMesh_ColorsArray::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.colors_.~RepeatedPtrField();
}
void AiAnimMesh_ColorsArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiAnimMesh_ColorsArray::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiAnimMesh.ColorsArray)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_colors()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiAnimMesh_ColorsArray::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AiAnimMesh_ColorsArray::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiAnimMesh_ColorsArray_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .pb_msg.AiColor4D Colors = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiAnimMesh_ColorsArray, _impl_.colors_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .pb_msg.AiColor4D Colors = 1;
    {PROTOBUF_FIELD_OFFSET(AiAnimMesh_ColorsArray, _impl_.colors_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiColor4D>()},
  }}, {{
  }},
};

::uint8_t* AiAnimMesh_ColorsArray::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiAnimMesh.ColorsArray)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .pb_msg.AiColor4D Colors = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colors_size()); i < n; i++) {
    const auto& repfield = this->_internal_colors().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiAnimMesh.ColorsArray)
  return target;
}

::size_t AiAnimMesh_ColorsArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiAnimMesh.ColorsArray)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_msg.AiColor4D Colors = 1;
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->_internal_colors()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiAnimMesh_ColorsArray::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiAnimMesh_ColorsArray::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiAnimMesh_ColorsArray::GetClassData() const { return &_class_data_; }


void AiAnimMesh_ColorsArray::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiAnimMesh_ColorsArray*>(&to_msg);
  auto& from = static_cast<const AiAnimMesh_ColorsArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiAnimMesh.ColorsArray)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_colors()->MergeFrom(from._internal_colors());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiAnimMesh_ColorsArray::CopyFrom(const AiAnimMesh_ColorsArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiAnimMesh.ColorsArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiAnimMesh_ColorsArray::IsInitialized() const {
  return true;
}

void AiAnimMesh_ColorsArray::InternalSwap(AiAnimMesh_ColorsArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.colors_.InternalSwap(&other->_impl_.colors_);
}

::google::protobuf::Metadata AiAnimMesh_ColorsArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fanimesh_2eproto[0]);
}
// ===================================================================

class AiAnimMesh_TextureCoordsArray::_Internal {
 public:
};

void AiAnimMesh_TextureCoordsArray::clear_texturecoords() {
  _internal_mutable_texturecoords()->Clear();
}
AiAnimMesh_TextureCoordsArray::AiAnimMesh_TextureCoordsArray(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiAnimMesh.TextureCoordsArray)
}
AiAnimMesh_TextureCoordsArray::AiAnimMesh_TextureCoordsArray(const AiAnimMesh_TextureCoordsArray& from) : ::google::protobuf::Message() {
  AiAnimMesh_TextureCoordsArray* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.texturecoords_){from._impl_.texturecoords_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiAnimMesh.TextureCoordsArray)
}
inline void AiAnimMesh_TextureCoordsArray::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.texturecoords_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AiAnimMesh_TextureCoordsArray::~AiAnimMesh_TextureCoordsArray() {
  // @@protoc_insertion_point(destructor:pb_msg.AiAnimMesh.TextureCoordsArray)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiAnimMesh_TextureCoordsArray::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.texturecoords_.~RepeatedPtrField();
}
void AiAnimMesh_TextureCoordsArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiAnimMesh_TextureCoordsArray::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiAnimMesh.TextureCoordsArray)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_texturecoords()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiAnimMesh_TextureCoordsArray::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AiAnimMesh_TextureCoordsArray::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiAnimMesh_TextureCoordsArray_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .pb_msg.AiVector3D TextureCoords = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiAnimMesh_TextureCoordsArray, _impl_.texturecoords_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .pb_msg.AiVector3D TextureCoords = 1;
    {PROTOBUF_FIELD_OFFSET(AiAnimMesh_TextureCoordsArray, _impl_.texturecoords_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
  }}, {{
  }},
};

::uint8_t* AiAnimMesh_TextureCoordsArray::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiAnimMesh.TextureCoordsArray)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .pb_msg.AiVector3D TextureCoords = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_texturecoords_size()); i < n; i++) {
    const auto& repfield = this->_internal_texturecoords().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiAnimMesh.TextureCoordsArray)
  return target;
}

::size_t AiAnimMesh_TextureCoordsArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiAnimMesh.TextureCoordsArray)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_msg.AiVector3D TextureCoords = 1;
  total_size += 1UL * this->_internal_texturecoords_size();
  for (const auto& msg : this->_internal_texturecoords()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiAnimMesh_TextureCoordsArray::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiAnimMesh_TextureCoordsArray::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiAnimMesh_TextureCoordsArray::GetClassData() const { return &_class_data_; }


void AiAnimMesh_TextureCoordsArray::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiAnimMesh_TextureCoordsArray*>(&to_msg);
  auto& from = static_cast<const AiAnimMesh_TextureCoordsArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiAnimMesh.TextureCoordsArray)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_texturecoords()->MergeFrom(from._internal_texturecoords());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiAnimMesh_TextureCoordsArray::CopyFrom(const AiAnimMesh_TextureCoordsArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiAnimMesh.TextureCoordsArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiAnimMesh_TextureCoordsArray::IsInitialized() const {
  return true;
}

void AiAnimMesh_TextureCoordsArray::InternalSwap(AiAnimMesh_TextureCoordsArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.texturecoords_.InternalSwap(&other->_impl_.texturecoords_);
}

::google::protobuf::Metadata AiAnimMesh_TextureCoordsArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fanimesh_2eproto[1]);
}
// ===================================================================

class AiAnimMesh::_Internal {
 public:
};

void AiAnimMesh::clear_vertices() {
  _internal_mutable_vertices()->Clear();
}
void AiAnimMesh::clear_normals() {
  _internal_mutable_normals()->Clear();
}
void AiAnimMesh::clear_tangents() {
  _internal_mutable_tangents()->Clear();
}
void AiAnimMesh::clear_bitangents() {
  _internal_mutable_bitangents()->Clear();
}
AiAnimMesh::AiAnimMesh(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiAnimMesh)
}
AiAnimMesh::AiAnimMesh(const AiAnimMesh& from) : ::google::protobuf::Message() {
  AiAnimMesh* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){from._impl_.vertices_},
      decltype(_impl_.normals_){from._impl_.normals_},
      decltype(_impl_.tangents_){from._impl_.tangents_},
      decltype(_impl_.bitangents_){from._impl_.bitangents_},
      decltype(_impl_.colors_){from._impl_.colors_},
      decltype(_impl_.texturecoords_){from._impl_.texturecoords_},
      decltype(_impl_.name_){},
      decltype(_impl_.weight_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.weight_ = from._impl_.weight_;

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiAnimMesh)
}
inline void AiAnimMesh::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.vertices_){arena},
      decltype(_impl_.normals_){arena},
      decltype(_impl_.tangents_){arena},
      decltype(_impl_.bitangents_){arena},
      decltype(_impl_.colors_){arena},
      decltype(_impl_.texturecoords_){arena},
      decltype(_impl_.name_){},
      decltype(_impl_.weight_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiAnimMesh::~AiAnimMesh() {
  // @@protoc_insertion_point(destructor:pb_msg.AiAnimMesh)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiAnimMesh::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertices_.~RepeatedPtrField();
  _impl_.normals_.~RepeatedPtrField();
  _impl_.tangents_.~RepeatedPtrField();
  _impl_.bitangents_.~RepeatedPtrField();
  _impl_.colors_.~RepeatedPtrField();
  _impl_.texturecoords_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}
void AiAnimMesh::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiAnimMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiAnimMesh)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_vertices()->Clear();
  _internal_mutable_normals()->Clear();
  _internal_mutable_tangents()->Clear();
  _internal_mutable_bitangents()->Clear();
  _internal_mutable_colors()->Clear();
  _internal_mutable_texturecoords()->Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.weight_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiAnimMesh::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 6, 38, 2> AiAnimMesh::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiAnimMesh_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string Name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.name_)}},
    // repeated .pb_msg.AiVector3D Vertices = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.vertices_)}},
    // repeated .pb_msg.AiVector3D Normals = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.normals_)}},
    // repeated .pb_msg.AiVector3D Tangents = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.tangents_)}},
    // repeated .pb_msg.AiVector3D Bitangents = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 3, PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.bitangents_)}},
    // repeated .pb_msg.AiAnimMesh.ColorsArray Colors = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 4, PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.colors_)}},
    // repeated .pb_msg.AiAnimMesh.TextureCoordsArray TextureCoords = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 5, PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.texturecoords_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // float Weight = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.weight_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string Name = 1;
    {PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .pb_msg.AiVector3D Vertices = 2;
    {PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.vertices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiVector3D Normals = 3;
    {PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.normals_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiVector3D Tangents = 4;
    {PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.tangents_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiVector3D Bitangents = 5;
    {PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.bitangents_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiAnimMesh.ColorsArray Colors = 6;
    {PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.colors_), 0, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiAnimMesh.TextureCoordsArray TextureCoords = 7;
    {PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.texturecoords_), 0, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // float Weight = 9;
    {PROTOBUF_FIELD_OFFSET(AiAnimMesh, _impl_.weight_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiAnimMesh_ColorsArray>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiAnimMesh_TextureCoordsArray>()},
  }}, {{
    "\21\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "pb_msg.AiAnimMesh"
    "Name"
  }},
};

::uint8_t* AiAnimMesh::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiAnimMesh)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "pb_msg.AiAnimMesh.Name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .pb_msg.AiVector3D Vertices = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiVector3D Normals = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_normals_size()); i < n; i++) {
    const auto& repfield = this->_internal_normals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiVector3D Tangents = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tangents_size()); i < n; i++) {
    const auto& repfield = this->_internal_tangents().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiVector3D Bitangents = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bitangents_size()); i < n; i++) {
    const auto& repfield = this->_internal_bitangents().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiAnimMesh.ColorsArray Colors = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colors_size()); i < n; i++) {
    const auto& repfield = this->_internal_colors().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiAnimMesh.TextureCoordsArray TextureCoords = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_texturecoords_size()); i < n; i++) {
    const auto& repfield = this->_internal_texturecoords().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // float Weight = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_weight = this->_internal_weight();
  ::uint32_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiAnimMesh)
  return target;
}

::size_t AiAnimMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiAnimMesh)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_msg.AiVector3D Vertices = 2;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_internal_vertices()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiVector3D Normals = 3;
  total_size += 1UL * this->_internal_normals_size();
  for (const auto& msg : this->_internal_normals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiVector3D Tangents = 4;
  total_size += 1UL * this->_internal_tangents_size();
  for (const auto& msg : this->_internal_tangents()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiVector3D Bitangents = 5;
  total_size += 1UL * this->_internal_bitangents_size();
  for (const auto& msg : this->_internal_bitangents()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiAnimMesh.ColorsArray Colors = 6;
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->_internal_colors()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiAnimMesh.TextureCoordsArray TextureCoords = 7;
  total_size += 1UL * this->_internal_texturecoords_size();
  for (const auto& msg : this->_internal_texturecoords()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // float Weight = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_weight = this->_internal_weight();
  ::uint32_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiAnimMesh::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiAnimMesh::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiAnimMesh::GetClassData() const { return &_class_data_; }


void AiAnimMesh::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiAnimMesh*>(&to_msg);
  auto& from = static_cast<const AiAnimMesh&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiAnimMesh)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vertices()->MergeFrom(from._internal_vertices());
  _this->_internal_mutable_normals()->MergeFrom(from._internal_normals());
  _this->_internal_mutable_tangents()->MergeFrom(from._internal_tangents());
  _this->_internal_mutable_bitangents()->MergeFrom(from._internal_bitangents());
  _this->_internal_mutable_colors()->MergeFrom(from._internal_colors());
  _this->_internal_mutable_texturecoords()->MergeFrom(from._internal_texturecoords());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_weight = from._internal_weight();
  ::uint32_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiAnimMesh::CopyFrom(const AiAnimMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiAnimMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiAnimMesh::IsInitialized() const {
  return true;
}

void AiAnimMesh::InternalSwap(AiAnimMesh* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
  _impl_.normals_.InternalSwap(&other->_impl_.normals_);
  _impl_.tangents_.InternalSwap(&other->_impl_.tangents_);
  _impl_.bitangents_.InternalSwap(&other->_impl_.bitangents_);
  _impl_.colors_.InternalSwap(&other->_impl_.colors_);
  _impl_.texturecoords_.InternalSwap(&other->_impl_.texturecoords_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
        swap(_impl_.weight_, other->_impl_.weight_);
}

::google::protobuf::Metadata AiAnimMesh::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fanimesh_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
