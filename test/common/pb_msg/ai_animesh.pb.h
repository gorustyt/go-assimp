// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/pb_msg/ai_animesh.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common/pb_msg/common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_2fpb_5fmsg_2fai_5fanimesh_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fpb_5fmsg_2fai_5fanimesh_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto;
namespace pb_msg {
class AiAnimMesh;
struct AiAnimMeshDefaultTypeInternal;
extern AiAnimMeshDefaultTypeInternal _AiAnimMesh_default_instance_;
class AiAnimMesh_ColorsArray;
struct AiAnimMesh_ColorsArrayDefaultTypeInternal;
extern AiAnimMesh_ColorsArrayDefaultTypeInternal _AiAnimMesh_ColorsArray_default_instance_;
class AiAnimMesh_TextureCoordsArray;
struct AiAnimMesh_TextureCoordsArrayDefaultTypeInternal;
extern AiAnimMesh_TextureCoordsArrayDefaultTypeInternal _AiAnimMesh_TextureCoordsArray_default_instance_;
}  // namespace pb_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace pb_msg {

// ===================================================================


// -------------------------------------------------------------------

class AiAnimMesh_ColorsArray final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb_msg.AiAnimMesh.ColorsArray) */ {
 public:
  inline AiAnimMesh_ColorsArray() : AiAnimMesh_ColorsArray(nullptr) {}
  ~AiAnimMesh_ColorsArray() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AiAnimMesh_ColorsArray(::google::protobuf::internal::ConstantInitialized);

  AiAnimMesh_ColorsArray(const AiAnimMesh_ColorsArray& from);
  AiAnimMesh_ColorsArray(AiAnimMesh_ColorsArray&& from) noexcept
    : AiAnimMesh_ColorsArray() {
    *this = ::std::move(from);
  }

  inline AiAnimMesh_ColorsArray& operator=(const AiAnimMesh_ColorsArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AiAnimMesh_ColorsArray& operator=(AiAnimMesh_ColorsArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AiAnimMesh_ColorsArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AiAnimMesh_ColorsArray* internal_default_instance() {
    return reinterpret_cast<const AiAnimMesh_ColorsArray*>(
               &_AiAnimMesh_ColorsArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AiAnimMesh_ColorsArray& a, AiAnimMesh_ColorsArray& b) {
    a.Swap(&b);
  }
  inline void Swap(AiAnimMesh_ColorsArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AiAnimMesh_ColorsArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AiAnimMesh_ColorsArray* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AiAnimMesh_ColorsArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AiAnimMesh_ColorsArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AiAnimMesh_ColorsArray& from) {
    AiAnimMesh_ColorsArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AiAnimMesh_ColorsArray* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb_msg.AiAnimMesh.ColorsArray";
  }
  protected:
  explicit AiAnimMesh_ColorsArray(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorsFieldNumber = 1,
  };
  // repeated .pb_msg.AiColor4D Colors = 1;
  int colors_size() const;
  private:
  int _internal_colors_size() const;

  public:
  void clear_colors() ;
  ::pb_msg::AiColor4D* mutable_colors(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiColor4D >*
      mutable_colors();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiColor4D>& _internal_colors() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiColor4D>* _internal_mutable_colors();
  public:
  const ::pb_msg::AiColor4D& colors(int index) const;
  ::pb_msg::AiColor4D* add_colors();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiColor4D >&
      colors() const;
  // @@protoc_insertion_point(class_scope:pb_msg.AiAnimMesh.ColorsArray)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiColor4D > colors_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fpb_5fmsg_2fai_5fanimesh_2eproto;
};// -------------------------------------------------------------------

class AiAnimMesh_TextureCoordsArray final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb_msg.AiAnimMesh.TextureCoordsArray) */ {
 public:
  inline AiAnimMesh_TextureCoordsArray() : AiAnimMesh_TextureCoordsArray(nullptr) {}
  ~AiAnimMesh_TextureCoordsArray() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AiAnimMesh_TextureCoordsArray(::google::protobuf::internal::ConstantInitialized);

  AiAnimMesh_TextureCoordsArray(const AiAnimMesh_TextureCoordsArray& from);
  AiAnimMesh_TextureCoordsArray(AiAnimMesh_TextureCoordsArray&& from) noexcept
    : AiAnimMesh_TextureCoordsArray() {
    *this = ::std::move(from);
  }

  inline AiAnimMesh_TextureCoordsArray& operator=(const AiAnimMesh_TextureCoordsArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AiAnimMesh_TextureCoordsArray& operator=(AiAnimMesh_TextureCoordsArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AiAnimMesh_TextureCoordsArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AiAnimMesh_TextureCoordsArray* internal_default_instance() {
    return reinterpret_cast<const AiAnimMesh_TextureCoordsArray*>(
               &_AiAnimMesh_TextureCoordsArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AiAnimMesh_TextureCoordsArray& a, AiAnimMesh_TextureCoordsArray& b) {
    a.Swap(&b);
  }
  inline void Swap(AiAnimMesh_TextureCoordsArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AiAnimMesh_TextureCoordsArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AiAnimMesh_TextureCoordsArray* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AiAnimMesh_TextureCoordsArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AiAnimMesh_TextureCoordsArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AiAnimMesh_TextureCoordsArray& from) {
    AiAnimMesh_TextureCoordsArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AiAnimMesh_TextureCoordsArray* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb_msg.AiAnimMesh.TextureCoordsArray";
  }
  protected:
  explicit AiAnimMesh_TextureCoordsArray(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextureCoordsFieldNumber = 1,
  };
  // repeated .pb_msg.AiVector3D TextureCoords = 1;
  int texturecoords_size() const;
  private:
  int _internal_texturecoords_size() const;

  public:
  void clear_texturecoords() ;
  ::pb_msg::AiVector3D* mutable_texturecoords(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
      mutable_texturecoords();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>& _internal_texturecoords() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>* _internal_mutable_texturecoords();
  public:
  const ::pb_msg::AiVector3D& texturecoords(int index) const;
  ::pb_msg::AiVector3D* add_texturecoords();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
      texturecoords() const;
  // @@protoc_insertion_point(class_scope:pb_msg.AiAnimMesh.TextureCoordsArray)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D > texturecoords_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fpb_5fmsg_2fai_5fanimesh_2eproto;
};// -------------------------------------------------------------------

class AiAnimMesh final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb_msg.AiAnimMesh) */ {
 public:
  inline AiAnimMesh() : AiAnimMesh(nullptr) {}
  ~AiAnimMesh() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AiAnimMesh(::google::protobuf::internal::ConstantInitialized);

  AiAnimMesh(const AiAnimMesh& from);
  AiAnimMesh(AiAnimMesh&& from) noexcept
    : AiAnimMesh() {
    *this = ::std::move(from);
  }

  inline AiAnimMesh& operator=(const AiAnimMesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline AiAnimMesh& operator=(AiAnimMesh&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AiAnimMesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const AiAnimMesh* internal_default_instance() {
    return reinterpret_cast<const AiAnimMesh*>(
               &_AiAnimMesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AiAnimMesh& a, AiAnimMesh& b) {
    a.Swap(&b);
  }
  inline void Swap(AiAnimMesh* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AiAnimMesh* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AiAnimMesh* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AiAnimMesh>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AiAnimMesh& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AiAnimMesh& from) {
    AiAnimMesh::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AiAnimMesh* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb_msg.AiAnimMesh";
  }
  protected:
  explicit AiAnimMesh(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AiAnimMesh_ColorsArray ColorsArray;
  typedef AiAnimMesh_TextureCoordsArray TextureCoordsArray;

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 2,
    kNormalsFieldNumber = 3,
    kTangentsFieldNumber = 4,
    kBitangentsFieldNumber = 5,
    kColorsFieldNumber = 6,
    kTextureCoordsFieldNumber = 7,
    kNameFieldNumber = 1,
    kWeightFieldNumber = 9,
  };
  // repeated .pb_msg.AiVector3D Vertices = 2;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;

  public:
  void clear_vertices() ;
  ::pb_msg::AiVector3D* mutable_vertices(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
      mutable_vertices();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>& _internal_vertices() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>* _internal_mutable_vertices();
  public:
  const ::pb_msg::AiVector3D& vertices(int index) const;
  ::pb_msg::AiVector3D* add_vertices();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
      vertices() const;
  // repeated .pb_msg.AiVector3D Normals = 3;
  int normals_size() const;
  private:
  int _internal_normals_size() const;

  public:
  void clear_normals() ;
  ::pb_msg::AiVector3D* mutable_normals(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
      mutable_normals();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>& _internal_normals() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>* _internal_mutable_normals();
  public:
  const ::pb_msg::AiVector3D& normals(int index) const;
  ::pb_msg::AiVector3D* add_normals();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
      normals() const;
  // repeated .pb_msg.AiVector3D Tangents = 4;
  int tangents_size() const;
  private:
  int _internal_tangents_size() const;

  public:
  void clear_tangents() ;
  ::pb_msg::AiVector3D* mutable_tangents(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
      mutable_tangents();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>& _internal_tangents() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>* _internal_mutable_tangents();
  public:
  const ::pb_msg::AiVector3D& tangents(int index) const;
  ::pb_msg::AiVector3D* add_tangents();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
      tangents() const;
  // repeated .pb_msg.AiVector3D Bitangents = 5;
  int bitangents_size() const;
  private:
  int _internal_bitangents_size() const;

  public:
  void clear_bitangents() ;
  ::pb_msg::AiVector3D* mutable_bitangents(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
      mutable_bitangents();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>& _internal_bitangents() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>* _internal_mutable_bitangents();
  public:
  const ::pb_msg::AiVector3D& bitangents(int index) const;
  ::pb_msg::AiVector3D* add_bitangents();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
      bitangents() const;
  // repeated .pb_msg.AiAnimMesh.ColorsArray Colors = 6;
  int colors_size() const;
  private:
  int _internal_colors_size() const;

  public:
  void clear_colors() ;
  ::pb_msg::AiAnimMesh_ColorsArray* mutable_colors(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh_ColorsArray >*
      mutable_colors();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiAnimMesh_ColorsArray>& _internal_colors() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiAnimMesh_ColorsArray>* _internal_mutable_colors();
  public:
  const ::pb_msg::AiAnimMesh_ColorsArray& colors(int index) const;
  ::pb_msg::AiAnimMesh_ColorsArray* add_colors();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh_ColorsArray >&
      colors() const;
  // repeated .pb_msg.AiAnimMesh.TextureCoordsArray TextureCoords = 7;
  int texturecoords_size() const;
  private:
  int _internal_texturecoords_size() const;

  public:
  void clear_texturecoords() ;
  ::pb_msg::AiAnimMesh_TextureCoordsArray* mutable_texturecoords(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh_TextureCoordsArray >*
      mutable_texturecoords();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiAnimMesh_TextureCoordsArray>& _internal_texturecoords() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiAnimMesh_TextureCoordsArray>* _internal_mutable_texturecoords();
  public:
  const ::pb_msg::AiAnimMesh_TextureCoordsArray& texturecoords(int index) const;
  ::pb_msg::AiAnimMesh_TextureCoordsArray* add_texturecoords();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh_TextureCoordsArray >&
      texturecoords() const;
  // string Name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // float Weight = 9;
  void clear_weight() ;
  float weight() const;
  void set_weight(float value);

  private:
  float _internal_weight() const;
  void _internal_set_weight(float value);

  public:
  // @@protoc_insertion_point(class_scope:pb_msg.AiAnimMesh)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 8, 6, 38, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D > vertices_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D > normals_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D > tangents_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D > bitangents_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh_ColorsArray > colors_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh_TextureCoordsArray > texturecoords_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    float weight_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fpb_5fmsg_2fai_5fanimesh_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AiAnimMesh_ColorsArray

// repeated .pb_msg.AiColor4D Colors = 1;
inline int AiAnimMesh_ColorsArray::_internal_colors_size() const {
  return _internal_colors().size();
}
inline int AiAnimMesh_ColorsArray::colors_size() const {
  return _internal_colors_size();
}
inline ::pb_msg::AiColor4D* AiAnimMesh_ColorsArray::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiAnimMesh.ColorsArray.Colors)
  return _internal_mutable_colors()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiColor4D >*
AiAnimMesh_ColorsArray::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiAnimMesh.ColorsArray.Colors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_colors();
}
inline const ::pb_msg::AiColor4D& AiAnimMesh_ColorsArray::colors(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiAnimMesh.ColorsArray.Colors)
    return _internal_colors().Get(index);
}
inline ::pb_msg::AiColor4D* AiAnimMesh_ColorsArray::add_colors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiColor4D* _add = _internal_mutable_colors()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiAnimMesh.ColorsArray.Colors)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiColor4D >&
AiAnimMesh_ColorsArray::colors() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiAnimMesh.ColorsArray.Colors)
  return _internal_colors();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiColor4D>&
AiAnimMesh_ColorsArray::_internal_colors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.colors_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiColor4D>*
AiAnimMesh_ColorsArray::_internal_mutable_colors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.colors_;
}

// -------------------------------------------------------------------

// AiAnimMesh_TextureCoordsArray

// repeated .pb_msg.AiVector3D TextureCoords = 1;
inline int AiAnimMesh_TextureCoordsArray::_internal_texturecoords_size() const {
  return _internal_texturecoords().size();
}
inline int AiAnimMesh_TextureCoordsArray::texturecoords_size() const {
  return _internal_texturecoords_size();
}
inline ::pb_msg::AiVector3D* AiAnimMesh_TextureCoordsArray::mutable_texturecoords(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiAnimMesh.TextureCoordsArray.TextureCoords)
  return _internal_mutable_texturecoords()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
AiAnimMesh_TextureCoordsArray::mutable_texturecoords() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiAnimMesh.TextureCoordsArray.TextureCoords)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_texturecoords();
}
inline const ::pb_msg::AiVector3D& AiAnimMesh_TextureCoordsArray::texturecoords(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiAnimMesh.TextureCoordsArray.TextureCoords)
    return _internal_texturecoords().Get(index);
}
inline ::pb_msg::AiVector3D* AiAnimMesh_TextureCoordsArray::add_texturecoords() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiVector3D* _add = _internal_mutable_texturecoords()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiAnimMesh.TextureCoordsArray.TextureCoords)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
AiAnimMesh_TextureCoordsArray::texturecoords() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiAnimMesh.TextureCoordsArray.TextureCoords)
  return _internal_texturecoords();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>&
AiAnimMesh_TextureCoordsArray::_internal_texturecoords() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.texturecoords_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>*
AiAnimMesh_TextureCoordsArray::_internal_mutable_texturecoords() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.texturecoords_;
}

// -------------------------------------------------------------------

// AiAnimMesh

// string Name = 1;
inline void AiAnimMesh::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AiAnimMesh::name() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiAnimMesh.Name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AiAnimMesh::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb_msg.AiAnimMesh.Name)
}
inline std::string* AiAnimMesh::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb_msg.AiAnimMesh.Name)
  return _s;
}
inline const std::string& AiAnimMesh::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void AiAnimMesh::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AiAnimMesh::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* AiAnimMesh::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb_msg.AiAnimMesh.Name)
  return _impl_.name_.Release();
}
inline void AiAnimMesh::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb_msg.AiAnimMesh.Name)
}

// repeated .pb_msg.AiVector3D Vertices = 2;
inline int AiAnimMesh::_internal_vertices_size() const {
  return _internal_vertices().size();
}
inline int AiAnimMesh::vertices_size() const {
  return _internal_vertices_size();
}
inline ::pb_msg::AiVector3D* AiAnimMesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiAnimMesh.Vertices)
  return _internal_mutable_vertices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
AiAnimMesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiAnimMesh.Vertices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vertices();
}
inline const ::pb_msg::AiVector3D& AiAnimMesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiAnimMesh.Vertices)
    return _internal_vertices().Get(index);
}
inline ::pb_msg::AiVector3D* AiAnimMesh::add_vertices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiVector3D* _add = _internal_mutable_vertices()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiAnimMesh.Vertices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
AiAnimMesh::vertices() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiAnimMesh.Vertices)
  return _internal_vertices();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>&
AiAnimMesh::_internal_vertices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vertices_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>*
AiAnimMesh::_internal_mutable_vertices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vertices_;
}

// repeated .pb_msg.AiVector3D Normals = 3;
inline int AiAnimMesh::_internal_normals_size() const {
  return _internal_normals().size();
}
inline int AiAnimMesh::normals_size() const {
  return _internal_normals_size();
}
inline ::pb_msg::AiVector3D* AiAnimMesh::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiAnimMesh.Normals)
  return _internal_mutable_normals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
AiAnimMesh::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiAnimMesh.Normals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_normals();
}
inline const ::pb_msg::AiVector3D& AiAnimMesh::normals(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiAnimMesh.Normals)
    return _internal_normals().Get(index);
}
inline ::pb_msg::AiVector3D* AiAnimMesh::add_normals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiVector3D* _add = _internal_mutable_normals()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiAnimMesh.Normals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
AiAnimMesh::normals() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiAnimMesh.Normals)
  return _internal_normals();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>&
AiAnimMesh::_internal_normals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.normals_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>*
AiAnimMesh::_internal_mutable_normals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.normals_;
}

// repeated .pb_msg.AiVector3D Tangents = 4;
inline int AiAnimMesh::_internal_tangents_size() const {
  return _internal_tangents().size();
}
inline int AiAnimMesh::tangents_size() const {
  return _internal_tangents_size();
}
inline ::pb_msg::AiVector3D* AiAnimMesh::mutable_tangents(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiAnimMesh.Tangents)
  return _internal_mutable_tangents()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
AiAnimMesh::mutable_tangents() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiAnimMesh.Tangents)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tangents();
}
inline const ::pb_msg::AiVector3D& AiAnimMesh::tangents(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiAnimMesh.Tangents)
    return _internal_tangents().Get(index);
}
inline ::pb_msg::AiVector3D* AiAnimMesh::add_tangents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiVector3D* _add = _internal_mutable_tangents()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiAnimMesh.Tangents)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
AiAnimMesh::tangents() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiAnimMesh.Tangents)
  return _internal_tangents();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>&
AiAnimMesh::_internal_tangents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tangents_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>*
AiAnimMesh::_internal_mutable_tangents() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tangents_;
}

// repeated .pb_msg.AiVector3D Bitangents = 5;
inline int AiAnimMesh::_internal_bitangents_size() const {
  return _internal_bitangents().size();
}
inline int AiAnimMesh::bitangents_size() const {
  return _internal_bitangents_size();
}
inline ::pb_msg::AiVector3D* AiAnimMesh::mutable_bitangents(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiAnimMesh.Bitangents)
  return _internal_mutable_bitangents()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
AiAnimMesh::mutable_bitangents() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiAnimMesh.Bitangents)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bitangents();
}
inline const ::pb_msg::AiVector3D& AiAnimMesh::bitangents(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiAnimMesh.Bitangents)
    return _internal_bitangents().Get(index);
}
inline ::pb_msg::AiVector3D* AiAnimMesh::add_bitangents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiVector3D* _add = _internal_mutable_bitangents()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiAnimMesh.Bitangents)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
AiAnimMesh::bitangents() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiAnimMesh.Bitangents)
  return _internal_bitangents();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>&
AiAnimMesh::_internal_bitangents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bitangents_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>*
AiAnimMesh::_internal_mutable_bitangents() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bitangents_;
}

// repeated .pb_msg.AiAnimMesh.ColorsArray Colors = 6;
inline int AiAnimMesh::_internal_colors_size() const {
  return _internal_colors().size();
}
inline int AiAnimMesh::colors_size() const {
  return _internal_colors_size();
}
inline void AiAnimMesh::clear_colors() {
  _internal_mutable_colors()->Clear();
}
inline ::pb_msg::AiAnimMesh_ColorsArray* AiAnimMesh::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiAnimMesh.Colors)
  return _internal_mutable_colors()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh_ColorsArray >*
AiAnimMesh::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiAnimMesh.Colors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_colors();
}
inline const ::pb_msg::AiAnimMesh_ColorsArray& AiAnimMesh::colors(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiAnimMesh.Colors)
    return _internal_colors().Get(index);
}
inline ::pb_msg::AiAnimMesh_ColorsArray* AiAnimMesh::add_colors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiAnimMesh_ColorsArray* _add = _internal_mutable_colors()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiAnimMesh.Colors)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh_ColorsArray >&
AiAnimMesh::colors() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiAnimMesh.Colors)
  return _internal_colors();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiAnimMesh_ColorsArray>&
AiAnimMesh::_internal_colors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.colors_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiAnimMesh_ColorsArray>*
AiAnimMesh::_internal_mutable_colors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.colors_;
}

// repeated .pb_msg.AiAnimMesh.TextureCoordsArray TextureCoords = 7;
inline int AiAnimMesh::_internal_texturecoords_size() const {
  return _internal_texturecoords().size();
}
inline int AiAnimMesh::texturecoords_size() const {
  return _internal_texturecoords_size();
}
inline void AiAnimMesh::clear_texturecoords() {
  _internal_mutable_texturecoords()->Clear();
}
inline ::pb_msg::AiAnimMesh_TextureCoordsArray* AiAnimMesh::mutable_texturecoords(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiAnimMesh.TextureCoords)
  return _internal_mutable_texturecoords()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh_TextureCoordsArray >*
AiAnimMesh::mutable_texturecoords() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiAnimMesh.TextureCoords)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_texturecoords();
}
inline const ::pb_msg::AiAnimMesh_TextureCoordsArray& AiAnimMesh::texturecoords(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiAnimMesh.TextureCoords)
    return _internal_texturecoords().Get(index);
}
inline ::pb_msg::AiAnimMesh_TextureCoordsArray* AiAnimMesh::add_texturecoords() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiAnimMesh_TextureCoordsArray* _add = _internal_mutable_texturecoords()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiAnimMesh.TextureCoords)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh_TextureCoordsArray >&
AiAnimMesh::texturecoords() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiAnimMesh.TextureCoords)
  return _internal_texturecoords();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiAnimMesh_TextureCoordsArray>&
AiAnimMesh::_internal_texturecoords() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.texturecoords_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiAnimMesh_TextureCoordsArray>*
AiAnimMesh::_internal_mutable_texturecoords() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.texturecoords_;
}

// float Weight = 9;
inline void AiAnimMesh::clear_weight() {
  _impl_.weight_ = 0;
}
inline float AiAnimMesh::weight() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiAnimMesh.Weight)
  return _internal_weight();
}
inline void AiAnimMesh::set_weight(float value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:pb_msg.AiAnimMesh.Weight)
}
inline float AiAnimMesh::_internal_weight() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.weight_;
}
inline void AiAnimMesh::_internal_set_weight(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.weight_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_msg


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_2fpb_5fmsg_2fai_5fanimesh_2eproto_2epb_2eh
