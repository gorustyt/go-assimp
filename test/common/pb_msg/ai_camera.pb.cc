// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/pb_msg/ai_camera.proto

#include "common/pb_msg/ai_camera.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace pb_msg {
        template <typename>
PROTOBUF_CONSTEXPR AiCamera::AiCamera(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.position_)*/ nullptr,
      /*decltype(_impl_.up_)*/ nullptr,
      /*decltype(_impl_.lookat_)*/ nullptr,
      /*decltype(_impl_.horizontalfov_)*/ 0,
      /*decltype(_impl_.clipplanenear_)*/ 0,
      /*decltype(_impl_.clipplanefar_)*/ 0,
      /*decltype(_impl_.aspect_)*/ 0,
      /*decltype(_impl_.orthographicwidth_)*/ 0,
    } {}
struct AiCameraDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiCameraDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiCameraDefaultTypeInternal() {}
  union {
    AiCamera _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiCameraDefaultTypeInternal _AiCamera_default_instance_;
}  // namespace pb_msg
static ::_pb::Metadata file_level_metadata_common_2fpb_5fmsg_2fai_5fcamera_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_common_2fpb_5fmsg_2fai_5fcamera_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2fpb_5fmsg_2fai_5fcamera_2eproto = nullptr;
const ::uint32_t TableStruct_common_2fpb_5fmsg_2fai_5fcamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiCamera, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiCamera, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiCamera, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiCamera, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiCamera, _impl_.up_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiCamera, _impl_.lookat_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiCamera, _impl_.horizontalfov_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiCamera, _impl_.clipplanenear_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiCamera, _impl_.clipplanefar_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiCamera, _impl_.aspect_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiCamera, _impl_.orthographicwidth_),
    ~0u,
    0,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 17, -1, sizeof(::pb_msg::AiCamera)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::pb_msg::_AiCamera_default_instance_._instance,
};
const char descriptor_table_protodef_common_2fpb_5fmsg_2fai_5fcamera_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035common/pb_msg/ai_camera.proto\022\006pb_msg\032"
    "\032common/pb_msg/common.proto\"\361\001\n\010AiCamera"
    "\022\014\n\004Name\030\001 \001(\t\022$\n\010Position\030\002 \001(\0132\022.pb_ms"
    "g.AiVector3D\022\036\n\002Up\030\003 \001(\0132\022.pb_msg.AiVect"
    "or3D\022\"\n\006LookAt\030\004 \001(\0132\022.pb_msg.AiVector3D"
    "\022\025\n\rHorizontalFOV\030\005 \001(\002\022\025\n\rClipPlaneNear"
    "\030\006 \001(\002\022\024\n\014ClipPlaneFar\030\007 \001(\002\022\016\n\006Aspect\030\010"
    " \001(\002\022\031\n\021OrthographicWidth\030\t \001(\002B\017Z\rcommo"
    "n/pb_msgb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_common_2fpb_5fmsg_2fai_5fcamera_2eproto_deps[1] =
    {
        &::descriptor_table_common_2fpb_5fmsg_2fcommon_2eproto,
};
static ::absl::once_flag descriptor_table_common_2fpb_5fmsg_2fai_5fcamera_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fpb_5fmsg_2fai_5fcamera_2eproto = {
    false,
    false,
    336,
    descriptor_table_protodef_common_2fpb_5fmsg_2fai_5fcamera_2eproto,
    "common/pb_msg/ai_camera.proto",
    &descriptor_table_common_2fpb_5fmsg_2fai_5fcamera_2eproto_once,
    descriptor_table_common_2fpb_5fmsg_2fai_5fcamera_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_common_2fpb_5fmsg_2fai_5fcamera_2eproto::offsets,
    file_level_metadata_common_2fpb_5fmsg_2fai_5fcamera_2eproto,
    file_level_enum_descriptors_common_2fpb_5fmsg_2fai_5fcamera_2eproto,
    file_level_service_descriptors_common_2fpb_5fmsg_2fai_5fcamera_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fpb_5fmsg_2fai_5fcamera_2eproto_getter() {
  return &descriptor_table_common_2fpb_5fmsg_2fai_5fcamera_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fpb_5fmsg_2fai_5fcamera_2eproto(&descriptor_table_common_2fpb_5fmsg_2fai_5fcamera_2eproto);
namespace pb_msg {
// ===================================================================

class AiCamera::_Internal {
 public:
  using HasBits = decltype(std::declval<AiCamera>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AiCamera, _impl_._has_bits_);
  static const ::pb_msg::AiVector3D& position(const AiCamera* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb_msg::AiVector3D& up(const AiCamera* msg);
  static void set_has_up(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pb_msg::AiVector3D& lookat(const AiCamera* msg);
  static void set_has_lookat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::pb_msg::AiVector3D& AiCamera::_Internal::position(const AiCamera* msg) {
  return *msg->_impl_.position_;
}
const ::pb_msg::AiVector3D& AiCamera::_Internal::up(const AiCamera* msg) {
  return *msg->_impl_.up_;
}
const ::pb_msg::AiVector3D& AiCamera::_Internal::lookat(const AiCamera* msg) {
  return *msg->_impl_.lookat_;
}
void AiCamera::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AiCamera::clear_up() {
  if (_impl_.up_ != nullptr) _impl_.up_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AiCamera::clear_lookat() {
  if (_impl_.lookat_ != nullptr) _impl_.lookat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
AiCamera::AiCamera(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiCamera)
}
AiCamera::AiCamera(const AiCamera& from) : ::google::protobuf::Message() {
  AiCamera* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.up_){nullptr},
      decltype(_impl_.lookat_){nullptr},
      decltype(_impl_.horizontalfov_){},
      decltype(_impl_.clipplanenear_){},
      decltype(_impl_.clipplanefar_){},
      decltype(_impl_.aspect_){},
      decltype(_impl_.orthographicwidth_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_ = new ::pb_msg::AiVector3D(*from._impl_.position_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.up_ = new ::pb_msg::AiVector3D(*from._impl_.up_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.lookat_ = new ::pb_msg::AiVector3D(*from._impl_.lookat_);
  }
  ::memcpy(&_impl_.horizontalfov_, &from._impl_.horizontalfov_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.orthographicwidth_) -
    reinterpret_cast<char*>(&_impl_.horizontalfov_)) + sizeof(_impl_.orthographicwidth_));

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiCamera)
}
inline void AiCamera::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.up_){nullptr},
      decltype(_impl_.lookat_){nullptr},
      decltype(_impl_.horizontalfov_){0},
      decltype(_impl_.clipplanenear_){0},
      decltype(_impl_.clipplanefar_){0},
      decltype(_impl_.aspect_){0},
      decltype(_impl_.orthographicwidth_){0},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiCamera::~AiCamera() {
  // @@protoc_insertion_point(destructor:pb_msg.AiCamera)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiCamera::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.up_;
  if (this != internal_default_instance()) delete _impl_.lookat_;
}
void AiCamera::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiCamera::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiCamera)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.up_ != nullptr);
      _impl_.up_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.lookat_ != nullptr);
      _impl_.lookat_->Clear();
    }
  }
  ::memset(&_impl_.horizontalfov_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.orthographicwidth_) -
      reinterpret_cast<char*>(&_impl_.horizontalfov_)) + sizeof(_impl_.orthographicwidth_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiCamera::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 3, 36, 2> AiCamera::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AiCamera, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiCamera_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string Name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.name_)}},
    // .pb_msg.AiVector3D Position = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.position_)}},
    // .pb_msg.AiVector3D Up = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.up_)}},
    // .pb_msg.AiVector3D LookAt = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.lookat_)}},
    // float HorizontalFOV = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.horizontalfov_)}},
    // float ClipPlaneNear = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.clipplanenear_)}},
    // float ClipPlaneFar = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.clipplanefar_)}},
    // float Aspect = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.aspect_)}},
    // float OrthographicWidth = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.orthographicwidth_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string Name = 1;
    {PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .pb_msg.AiVector3D Position = 2;
    {PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .pb_msg.AiVector3D Up = 3;
    {PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.up_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .pb_msg.AiVector3D LookAt = 4;
    {PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.lookat_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float HorizontalFOV = 5;
    {PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.horizontalfov_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ClipPlaneNear = 6;
    {PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.clipplanenear_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float ClipPlaneFar = 7;
    {PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.clipplanefar_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float Aspect = 8;
    {PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.aspect_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float OrthographicWidth = 9;
    {PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.orthographicwidth_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
  }}, {{
    "\17\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "pb_msg.AiCamera"
    "Name"
  }},
};

::uint8_t* AiCamera::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiCamera)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "pb_msg.AiCamera.Name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .pb_msg.AiVector3D Position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .pb_msg.AiVector3D Up = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::up(this),
        _Internal::up(this).GetCachedSize(), target, stream);
  }

  // .pb_msg.AiVector3D LookAt = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lookat(this),
        _Internal::lookat(this).GetCachedSize(), target, stream);
  }

  // float HorizontalFOV = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_horizontalfov = this->_internal_horizontalfov();
  ::uint32_t raw_horizontalfov;
  memcpy(&raw_horizontalfov, &tmp_horizontalfov, sizeof(tmp_horizontalfov));
  if (raw_horizontalfov != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_horizontalfov(), target);
  }

  // float ClipPlaneNear = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_clipplanenear = this->_internal_clipplanenear();
  ::uint32_t raw_clipplanenear;
  memcpy(&raw_clipplanenear, &tmp_clipplanenear, sizeof(tmp_clipplanenear));
  if (raw_clipplanenear != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_clipplanenear(), target);
  }

  // float ClipPlaneFar = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_clipplanefar = this->_internal_clipplanefar();
  ::uint32_t raw_clipplanefar;
  memcpy(&raw_clipplanefar, &tmp_clipplanefar, sizeof(tmp_clipplanefar));
  if (raw_clipplanefar != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_clipplanefar(), target);
  }

  // float Aspect = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_aspect = this->_internal_aspect();
  ::uint32_t raw_aspect;
  memcpy(&raw_aspect, &tmp_aspect, sizeof(tmp_aspect));
  if (raw_aspect != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_aspect(), target);
  }

  // float OrthographicWidth = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_orthographicwidth = this->_internal_orthographicwidth();
  ::uint32_t raw_orthographicwidth;
  memcpy(&raw_orthographicwidth, &tmp_orthographicwidth, sizeof(tmp_orthographicwidth));
  if (raw_orthographicwidth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        9, this->_internal_orthographicwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiCamera)
  return target;
}

::size_t AiCamera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiCamera)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .pb_msg.AiVector3D Position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // .pb_msg.AiVector3D Up = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.up_);
    }

    // .pb_msg.AiVector3D LookAt = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.lookat_);
    }

  }
  // float HorizontalFOV = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_horizontalfov = this->_internal_horizontalfov();
  ::uint32_t raw_horizontalfov;
  memcpy(&raw_horizontalfov, &tmp_horizontalfov, sizeof(tmp_horizontalfov));
  if (raw_horizontalfov != 0) {
    total_size += 5;
  }

  // float ClipPlaneNear = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_clipplanenear = this->_internal_clipplanenear();
  ::uint32_t raw_clipplanenear;
  memcpy(&raw_clipplanenear, &tmp_clipplanenear, sizeof(tmp_clipplanenear));
  if (raw_clipplanenear != 0) {
    total_size += 5;
  }

  // float ClipPlaneFar = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_clipplanefar = this->_internal_clipplanefar();
  ::uint32_t raw_clipplanefar;
  memcpy(&raw_clipplanefar, &tmp_clipplanefar, sizeof(tmp_clipplanefar));
  if (raw_clipplanefar != 0) {
    total_size += 5;
  }

  // float Aspect = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_aspect = this->_internal_aspect();
  ::uint32_t raw_aspect;
  memcpy(&raw_aspect, &tmp_aspect, sizeof(tmp_aspect));
  if (raw_aspect != 0) {
    total_size += 5;
  }

  // float OrthographicWidth = 9;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_orthographicwidth = this->_internal_orthographicwidth();
  ::uint32_t raw_orthographicwidth;
  memcpy(&raw_orthographicwidth, &tmp_orthographicwidth, sizeof(tmp_orthographicwidth));
  if (raw_orthographicwidth != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiCamera::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiCamera::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiCamera::GetClassData() const { return &_class_data_; }


void AiCamera::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiCamera*>(&to_msg);
  auto& from = static_cast<const AiCamera&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiCamera)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::pb_msg::AiVector3D::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_up()->::pb_msg::AiVector3D::MergeFrom(
          from._internal_up());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_lookat()->::pb_msg::AiVector3D::MergeFrom(
          from._internal_lookat());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_horizontalfov = from._internal_horizontalfov();
  ::uint32_t raw_horizontalfov;
  memcpy(&raw_horizontalfov, &tmp_horizontalfov, sizeof(tmp_horizontalfov));
  if (raw_horizontalfov != 0) {
    _this->_internal_set_horizontalfov(from._internal_horizontalfov());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_clipplanenear = from._internal_clipplanenear();
  ::uint32_t raw_clipplanenear;
  memcpy(&raw_clipplanenear, &tmp_clipplanenear, sizeof(tmp_clipplanenear));
  if (raw_clipplanenear != 0) {
    _this->_internal_set_clipplanenear(from._internal_clipplanenear());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_clipplanefar = from._internal_clipplanefar();
  ::uint32_t raw_clipplanefar;
  memcpy(&raw_clipplanefar, &tmp_clipplanefar, sizeof(tmp_clipplanefar));
  if (raw_clipplanefar != 0) {
    _this->_internal_set_clipplanefar(from._internal_clipplanefar());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_aspect = from._internal_aspect();
  ::uint32_t raw_aspect;
  memcpy(&raw_aspect, &tmp_aspect, sizeof(tmp_aspect));
  if (raw_aspect != 0) {
    _this->_internal_set_aspect(from._internal_aspect());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_orthographicwidth = from._internal_orthographicwidth();
  ::uint32_t raw_orthographicwidth;
  memcpy(&raw_orthographicwidth, &tmp_orthographicwidth, sizeof(tmp_orthographicwidth));
  if (raw_orthographicwidth != 0) {
    _this->_internal_set_orthographicwidth(from._internal_orthographicwidth());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiCamera::CopyFrom(const AiCamera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiCamera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiCamera::IsInitialized() const {
  return true;
}

void AiCamera::InternalSwap(AiCamera* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.orthographicwidth_)
      + sizeof(AiCamera::_impl_.orthographicwidth_)
      - PROTOBUF_FIELD_OFFSET(AiCamera, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata AiCamera::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fcamera_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fcamera_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fcamera_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
