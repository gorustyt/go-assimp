// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/pb_msg/ai_light.proto

#include "common/pb_msg/ai_light.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace pb_msg {
        template <typename>
PROTOBUF_CONSTEXPR AiLight::AiLight(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.position_)*/ nullptr,
      /*decltype(_impl_.direction_)*/ nullptr,
      /*decltype(_impl_.up_)*/ nullptr,
      /*decltype(_impl_.colordiffuse_)*/ nullptr,
      /*decltype(_impl_.colorspecular_)*/ nullptr,
      /*decltype(_impl_.colorambient_)*/ nullptr,
      /*decltype(_impl_.size_)*/ nullptr,
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.attenuationconstant_)*/ 0,
      /*decltype(_impl_.attenuationlinear_)*/ 0,
      /*decltype(_impl_.attenuationquadratic_)*/ 0,
      /*decltype(_impl_.angleinnercone_)*/ 0,
      /*decltype(_impl_.angleoutercone_)*/ 0,
    } {}
struct AiLightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiLightDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiLightDefaultTypeInternal() {}
  union {
    AiLight _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiLightDefaultTypeInternal _AiLight_default_instance_;
}  // namespace pb_msg
static ::_pb::Metadata file_level_metadata_common_2fpb_5fmsg_2fai_5flight_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_common_2fpb_5fmsg_2fai_5flight_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2fpb_5fmsg_2fai_5flight_2eproto = nullptr;
const ::uint32_t TableStruct_common_2fpb_5fmsg_2fai_5flight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.up_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.attenuationconstant_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.attenuationlinear_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.attenuationquadratic_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.colordiffuse_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.colorspecular_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.colorambient_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.angleinnercone_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.angleoutercone_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiLight, _impl_.size_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    3,
    4,
    5,
    ~0u,
    ~0u,
    6,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 22, -1, sizeof(::pb_msg::AiLight)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::pb_msg::_AiLight_default_instance_._instance,
};
const char descriptor_table_protodef_common_2fpb_5fmsg_2fai_5flight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034common/pb_msg/ai_light.proto\022\006pb_msg\032\032"
    "common/pb_msg/common.proto\"\266\003\n\007AiLight\022\014"
    "\n\004Name\030\001 \001(\t\022\014\n\004Type\030\002 \001(\005\022$\n\010Position\030\003"
    " \001(\0132\022.pb_msg.AiVector3D\022%\n\tDirection\030\004 "
    "\001(\0132\022.pb_msg.AiVector3D\022\036\n\002Up\030\005 \001(\0132\022.pb"
    "_msg.AiVector3D\022\033\n\023AttenuationConstant\030\006"
    " \001(\002\022\031\n\021AttenuationLinear\030\007 \001(\002\022\034\n\024Atten"
    "uationQuadratic\030\010 \001(\002\022\'\n\014ColorDiffuse\030\t "
    "\001(\0132\021.pb_msg.AiColor3D\022(\n\rColorSpecular\030"
    "\n \001(\0132\021.pb_msg.AiColor3D\022\'\n\014ColorAmbient"
    "\030\013 \001(\0132\021.pb_msg.AiColor3D\022\026\n\016AngleInnerC"
    "one\030\014 \001(\002\022\026\n\016AngleOuterCone\030\r \001(\002\022 \n\004Siz"
    "e\030\016 \001(\0132\022.pb_msg.AiVector2DB\017Z\rcommon/pb"
    "_msgb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_common_2fpb_5fmsg_2fai_5flight_2eproto_deps[1] =
    {
        &::descriptor_table_common_2fpb_5fmsg_2fcommon_2eproto,
};
static ::absl::once_flag descriptor_table_common_2fpb_5fmsg_2fai_5flight_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fpb_5fmsg_2fai_5flight_2eproto = {
    false,
    false,
    532,
    descriptor_table_protodef_common_2fpb_5fmsg_2fai_5flight_2eproto,
    "common/pb_msg/ai_light.proto",
    &descriptor_table_common_2fpb_5fmsg_2fai_5flight_2eproto_once,
    descriptor_table_common_2fpb_5fmsg_2fai_5flight_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_common_2fpb_5fmsg_2fai_5flight_2eproto::offsets,
    file_level_metadata_common_2fpb_5fmsg_2fai_5flight_2eproto,
    file_level_enum_descriptors_common_2fpb_5fmsg_2fai_5flight_2eproto,
    file_level_service_descriptors_common_2fpb_5fmsg_2fai_5flight_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fpb_5fmsg_2fai_5flight_2eproto_getter() {
  return &descriptor_table_common_2fpb_5fmsg_2fai_5flight_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fpb_5fmsg_2fai_5flight_2eproto(&descriptor_table_common_2fpb_5fmsg_2fai_5flight_2eproto);
namespace pb_msg {
// ===================================================================

class AiLight::_Internal {
 public:
  using HasBits = decltype(std::declval<AiLight>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AiLight, _impl_._has_bits_);
  static const ::pb_msg::AiVector3D& position(const AiLight* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pb_msg::AiVector3D& direction(const AiLight* msg);
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::pb_msg::AiVector3D& up(const AiLight* msg);
  static void set_has_up(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::pb_msg::AiColor3D& colordiffuse(const AiLight* msg);
  static void set_has_colordiffuse(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pb_msg::AiColor3D& colorspecular(const AiLight* msg);
  static void set_has_colorspecular(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::pb_msg::AiColor3D& colorambient(const AiLight* msg);
  static void set_has_colorambient(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::pb_msg::AiVector2D& size(const AiLight* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::pb_msg::AiVector3D& AiLight::_Internal::position(const AiLight* msg) {
  return *msg->_impl_.position_;
}
const ::pb_msg::AiVector3D& AiLight::_Internal::direction(const AiLight* msg) {
  return *msg->_impl_.direction_;
}
const ::pb_msg::AiVector3D& AiLight::_Internal::up(const AiLight* msg) {
  return *msg->_impl_.up_;
}
const ::pb_msg::AiColor3D& AiLight::_Internal::colordiffuse(const AiLight* msg) {
  return *msg->_impl_.colordiffuse_;
}
const ::pb_msg::AiColor3D& AiLight::_Internal::colorspecular(const AiLight* msg) {
  return *msg->_impl_.colorspecular_;
}
const ::pb_msg::AiColor3D& AiLight::_Internal::colorambient(const AiLight* msg) {
  return *msg->_impl_.colorambient_;
}
const ::pb_msg::AiVector2D& AiLight::_Internal::size(const AiLight* msg) {
  return *msg->_impl_.size_;
}
void AiLight::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AiLight::clear_direction() {
  if (_impl_.direction_ != nullptr) _impl_.direction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AiLight::clear_up() {
  if (_impl_.up_ != nullptr) _impl_.up_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AiLight::clear_colordiffuse() {
  if (_impl_.colordiffuse_ != nullptr) _impl_.colordiffuse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void AiLight::clear_colorspecular() {
  if (_impl_.colorspecular_ != nullptr) _impl_.colorspecular_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void AiLight::clear_colorambient() {
  if (_impl_.colorambient_ != nullptr) _impl_.colorambient_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void AiLight::clear_size() {
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
AiLight::AiLight(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiLight)
}
AiLight::AiLight(const AiLight& from) : ::google::protobuf::Message() {
  AiLight* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.direction_){nullptr},
      decltype(_impl_.up_){nullptr},
      decltype(_impl_.colordiffuse_){nullptr},
      decltype(_impl_.colorspecular_){nullptr},
      decltype(_impl_.colorambient_){nullptr},
      decltype(_impl_.size_){nullptr},
      decltype(_impl_.type_){},
      decltype(_impl_.attenuationconstant_){},
      decltype(_impl_.attenuationlinear_){},
      decltype(_impl_.attenuationquadratic_){},
      decltype(_impl_.angleinnercone_){},
      decltype(_impl_.angleoutercone_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_ = new ::pb_msg::AiVector3D(*from._impl_.position_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.direction_ = new ::pb_msg::AiVector3D(*from._impl_.direction_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.up_ = new ::pb_msg::AiVector3D(*from._impl_.up_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.colordiffuse_ = new ::pb_msg::AiColor3D(*from._impl_.colordiffuse_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.colorspecular_ = new ::pb_msg::AiColor3D(*from._impl_.colorspecular_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.colorambient_ = new ::pb_msg::AiColor3D(*from._impl_.colorambient_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.size_ = new ::pb_msg::AiVector2D(*from._impl_.size_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.angleoutercone_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.angleoutercone_));

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiLight)
}
inline void AiLight::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.name_){},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.direction_){nullptr},
      decltype(_impl_.up_){nullptr},
      decltype(_impl_.colordiffuse_){nullptr},
      decltype(_impl_.colorspecular_){nullptr},
      decltype(_impl_.colorambient_){nullptr},
      decltype(_impl_.size_){nullptr},
      decltype(_impl_.type_){0},
      decltype(_impl_.attenuationconstant_){0},
      decltype(_impl_.attenuationlinear_){0},
      decltype(_impl_.attenuationquadratic_){0},
      decltype(_impl_.angleinnercone_){0},
      decltype(_impl_.angleoutercone_){0},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiLight::~AiLight() {
  // @@protoc_insertion_point(destructor:pb_msg.AiLight)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiLight::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.direction_;
  if (this != internal_default_instance()) delete _impl_.up_;
  if (this != internal_default_instance()) delete _impl_.colordiffuse_;
  if (this != internal_default_instance()) delete _impl_.colorspecular_;
  if (this != internal_default_instance()) delete _impl_.colorambient_;
  if (this != internal_default_instance()) delete _impl_.size_;
}
void AiLight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiLight::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiLight)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.direction_ != nullptr);
      _impl_.direction_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.up_ != nullptr);
      _impl_.up_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.colordiffuse_ != nullptr);
      _impl_.colordiffuse_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.colorspecular_ != nullptr);
      _impl_.colorspecular_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.colorambient_ != nullptr);
      _impl_.colorambient_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.angleoutercone_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.angleoutercone_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiLight::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 7, 35, 2> AiLight::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AiLight, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiLight_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string Name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.name_)}},
    // int32 Type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiLight, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.type_)}},
    // .pb_msg.AiVector3D Position = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.position_)}},
    // .pb_msg.AiVector3D Direction = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.direction_)}},
    // .pb_msg.AiVector3D Up = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.up_)}},
    // float AttenuationConstant = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.attenuationconstant_)}},
    // float AttenuationLinear = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.attenuationlinear_)}},
    // float AttenuationQuadratic = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.attenuationquadratic_)}},
    // .pb_msg.AiColor3D ColorDiffuse = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 3, 3, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.colordiffuse_)}},
    // .pb_msg.AiColor3D ColorSpecular = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 4, 4, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.colorspecular_)}},
    // .pb_msg.AiColor3D ColorAmbient = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 5, 5, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.colorambient_)}},
    // float AngleInnerCone = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.angleinnercone_)}},
    // float AngleOuterCone = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.angleoutercone_)}},
    // .pb_msg.AiVector2D Size = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 6, 6, PROTOBUF_FIELD_OFFSET(AiLight, _impl_.size_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string Name = 1;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 Type = 2;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .pb_msg.AiVector3D Position = 3;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .pb_msg.AiVector3D Direction = 4;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.direction_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .pb_msg.AiVector3D Up = 5;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.up_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float AttenuationConstant = 6;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.attenuationconstant_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float AttenuationLinear = 7;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.attenuationlinear_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float AttenuationQuadratic = 8;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.attenuationquadratic_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .pb_msg.AiColor3D ColorDiffuse = 9;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.colordiffuse_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .pb_msg.AiColor3D ColorSpecular = 10;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.colorspecular_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .pb_msg.AiColor3D ColorAmbient = 11;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.colorambient_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float AngleInnerCone = 12;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.angleinnercone_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float AngleOuterCone = 13;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.angleoutercone_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .pb_msg.AiVector2D Size = 14;
    {PROTOBUF_FIELD_OFFSET(AiLight, _impl_.size_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiColor3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiColor3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiColor3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector2D>()},
  }}, {{
    "\16\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "pb_msg.AiLight"
    "Name"
  }},
};

::uint8_t* AiLight::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiLight)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "pb_msg.AiLight.Name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 Type = 2;
  if (this->_internal_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .pb_msg.AiVector3D Position = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .pb_msg.AiVector3D Direction = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  // .pb_msg.AiVector3D Up = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::up(this),
        _Internal::up(this).GetCachedSize(), target, stream);
  }

  // float AttenuationConstant = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_attenuationconstant = this->_internal_attenuationconstant();
  ::uint32_t raw_attenuationconstant;
  memcpy(&raw_attenuationconstant, &tmp_attenuationconstant, sizeof(tmp_attenuationconstant));
  if (raw_attenuationconstant != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_attenuationconstant(), target);
  }

  // float AttenuationLinear = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_attenuationlinear = this->_internal_attenuationlinear();
  ::uint32_t raw_attenuationlinear;
  memcpy(&raw_attenuationlinear, &tmp_attenuationlinear, sizeof(tmp_attenuationlinear));
  if (raw_attenuationlinear != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_attenuationlinear(), target);
  }

  // float AttenuationQuadratic = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_attenuationquadratic = this->_internal_attenuationquadratic();
  ::uint32_t raw_attenuationquadratic;
  memcpy(&raw_attenuationquadratic, &tmp_attenuationquadratic, sizeof(tmp_attenuationquadratic));
  if (raw_attenuationquadratic != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this->_internal_attenuationquadratic(), target);
  }

  // .pb_msg.AiColor3D ColorDiffuse = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::colordiffuse(this),
        _Internal::colordiffuse(this).GetCachedSize(), target, stream);
  }

  // .pb_msg.AiColor3D ColorSpecular = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::colorspecular(this),
        _Internal::colorspecular(this).GetCachedSize(), target, stream);
  }

  // .pb_msg.AiColor3D ColorAmbient = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::colorambient(this),
        _Internal::colorambient(this).GetCachedSize(), target, stream);
  }

  // float AngleInnerCone = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angleinnercone = this->_internal_angleinnercone();
  ::uint32_t raw_angleinnercone;
  memcpy(&raw_angleinnercone, &tmp_angleinnercone, sizeof(tmp_angleinnercone));
  if (raw_angleinnercone != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_angleinnercone(), target);
  }

  // float AngleOuterCone = 13;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angleoutercone = this->_internal_angleoutercone();
  ::uint32_t raw_angleoutercone;
  memcpy(&raw_angleoutercone, &tmp_angleoutercone, sizeof(tmp_angleoutercone));
  if (raw_angleoutercone != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        13, this->_internal_angleoutercone(), target);
  }

  // .pb_msg.AiVector2D Size = 14;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiLight)
  return target;
}

::size_t AiLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiLight)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // .pb_msg.AiVector3D Position = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // .pb_msg.AiVector3D Direction = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.direction_);
    }

    // .pb_msg.AiVector3D Up = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.up_);
    }

    // .pb_msg.AiColor3D ColorDiffuse = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.colordiffuse_);
    }

    // .pb_msg.AiColor3D ColorSpecular = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.colorspecular_);
    }

    // .pb_msg.AiColor3D ColorAmbient = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.colorambient_);
    }

    // .pb_msg.AiVector2D Size = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.size_);
    }

  }
  // int32 Type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_type());
  }

  // float AttenuationConstant = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_attenuationconstant = this->_internal_attenuationconstant();
  ::uint32_t raw_attenuationconstant;
  memcpy(&raw_attenuationconstant, &tmp_attenuationconstant, sizeof(tmp_attenuationconstant));
  if (raw_attenuationconstant != 0) {
    total_size += 5;
  }

  // float AttenuationLinear = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_attenuationlinear = this->_internal_attenuationlinear();
  ::uint32_t raw_attenuationlinear;
  memcpy(&raw_attenuationlinear, &tmp_attenuationlinear, sizeof(tmp_attenuationlinear));
  if (raw_attenuationlinear != 0) {
    total_size += 5;
  }

  // float AttenuationQuadratic = 8;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_attenuationquadratic = this->_internal_attenuationquadratic();
  ::uint32_t raw_attenuationquadratic;
  memcpy(&raw_attenuationquadratic, &tmp_attenuationquadratic, sizeof(tmp_attenuationquadratic));
  if (raw_attenuationquadratic != 0) {
    total_size += 5;
  }

  // float AngleInnerCone = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angleinnercone = this->_internal_angleinnercone();
  ::uint32_t raw_angleinnercone;
  memcpy(&raw_angleinnercone, &tmp_angleinnercone, sizeof(tmp_angleinnercone));
  if (raw_angleinnercone != 0) {
    total_size += 5;
  }

  // float AngleOuterCone = 13;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angleoutercone = this->_internal_angleoutercone();
  ::uint32_t raw_angleoutercone;
  memcpy(&raw_angleoutercone, &tmp_angleoutercone, sizeof(tmp_angleoutercone));
  if (raw_angleoutercone != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiLight::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiLight::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiLight::GetClassData() const { return &_class_data_; }


void AiLight::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiLight*>(&to_msg);
  auto& from = static_cast<const AiLight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiLight)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::pb_msg::AiVector3D::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_direction()->::pb_msg::AiVector3D::MergeFrom(
          from._internal_direction());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_up()->::pb_msg::AiVector3D::MergeFrom(
          from._internal_up());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_colordiffuse()->::pb_msg::AiColor3D::MergeFrom(
          from._internal_colordiffuse());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_colorspecular()->::pb_msg::AiColor3D::MergeFrom(
          from._internal_colorspecular());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_colorambient()->::pb_msg::AiColor3D::MergeFrom(
          from._internal_colorambient());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_size()->::pb_msg::AiVector2D::MergeFrom(
          from._internal_size());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_attenuationconstant = from._internal_attenuationconstant();
  ::uint32_t raw_attenuationconstant;
  memcpy(&raw_attenuationconstant, &tmp_attenuationconstant, sizeof(tmp_attenuationconstant));
  if (raw_attenuationconstant != 0) {
    _this->_internal_set_attenuationconstant(from._internal_attenuationconstant());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_attenuationlinear = from._internal_attenuationlinear();
  ::uint32_t raw_attenuationlinear;
  memcpy(&raw_attenuationlinear, &tmp_attenuationlinear, sizeof(tmp_attenuationlinear));
  if (raw_attenuationlinear != 0) {
    _this->_internal_set_attenuationlinear(from._internal_attenuationlinear());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_attenuationquadratic = from._internal_attenuationquadratic();
  ::uint32_t raw_attenuationquadratic;
  memcpy(&raw_attenuationquadratic, &tmp_attenuationquadratic, sizeof(tmp_attenuationquadratic));
  if (raw_attenuationquadratic != 0) {
    _this->_internal_set_attenuationquadratic(from._internal_attenuationquadratic());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angleinnercone = from._internal_angleinnercone();
  ::uint32_t raw_angleinnercone;
  memcpy(&raw_angleinnercone, &tmp_angleinnercone, sizeof(tmp_angleinnercone));
  if (raw_angleinnercone != 0) {
    _this->_internal_set_angleinnercone(from._internal_angleinnercone());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_angleoutercone = from._internal_angleoutercone();
  ::uint32_t raw_angleoutercone;
  memcpy(&raw_angleoutercone, &tmp_angleoutercone, sizeof(tmp_angleoutercone));
  if (raw_angleoutercone != 0) {
    _this->_internal_set_angleoutercone(from._internal_angleoutercone());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiLight::CopyFrom(const AiLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiLight::IsInitialized() const {
  return true;
}

void AiLight::InternalSwap(AiLight* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiLight, _impl_.angleoutercone_)
      + sizeof(AiLight::_impl_.angleoutercone_)
      - PROTOBUF_FIELD_OFFSET(AiLight, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata AiLight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5flight_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5flight_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5flight_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
