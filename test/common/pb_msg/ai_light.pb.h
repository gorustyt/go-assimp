// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/pb_msg/ai_light.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fpb_5fmsg_2fai_5flight_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_2fpb_5fmsg_2fai_5flight_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common/pb_msg/common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_2fpb_5fmsg_2fai_5flight_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fpb_5fmsg_2fai_5flight_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_2fpb_5fmsg_2fai_5flight_2eproto;
namespace pb_msg {
class AiLight;
struct AiLightDefaultTypeInternal;
extern AiLightDefaultTypeInternal _AiLight_default_instance_;
}  // namespace pb_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace pb_msg {

// ===================================================================


// -------------------------------------------------------------------

class AiLight final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb_msg.AiLight) */ {
 public:
  inline AiLight() : AiLight(nullptr) {}
  ~AiLight() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AiLight(::google::protobuf::internal::ConstantInitialized);

  AiLight(const AiLight& from);
  AiLight(AiLight&& from) noexcept
    : AiLight() {
    *this = ::std::move(from);
  }

  inline AiLight& operator=(const AiLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline AiLight& operator=(AiLight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AiLight& default_instance() {
    return *internal_default_instance();
  }
  static inline const AiLight* internal_default_instance() {
    return reinterpret_cast<const AiLight*>(
               &_AiLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AiLight& a, AiLight& b) {
    a.Swap(&b);
  }
  inline void Swap(AiLight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AiLight* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AiLight* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AiLight>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AiLight& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AiLight& from) {
    AiLight::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AiLight* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb_msg.AiLight";
  }
  protected:
  explicit AiLight(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 3,
    kDirectionFieldNumber = 4,
    kUpFieldNumber = 5,
    kColorDiffuseFieldNumber = 9,
    kColorSpecularFieldNumber = 10,
    kColorAmbientFieldNumber = 11,
    kSizeFieldNumber = 14,
    kTypeFieldNumber = 2,
    kAttenuationConstantFieldNumber = 6,
    kAttenuationLinearFieldNumber = 7,
    kAttenuationQuadraticFieldNumber = 8,
    kAngleInnerConeFieldNumber = 12,
    kAngleOuterConeFieldNumber = 13,
  };
  // string Name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .pb_msg.AiVector3D Position = 3;
  bool has_position() const;
  void clear_position() ;
  const ::pb_msg::AiVector3D& position() const;
  PROTOBUF_NODISCARD ::pb_msg::AiVector3D* release_position();
  ::pb_msg::AiVector3D* mutable_position();
  void set_allocated_position(::pb_msg::AiVector3D* value);
  void unsafe_arena_set_allocated_position(::pb_msg::AiVector3D* value);
  ::pb_msg::AiVector3D* unsafe_arena_release_position();

  private:
  const ::pb_msg::AiVector3D& _internal_position() const;
  ::pb_msg::AiVector3D* _internal_mutable_position();

  public:
  // .pb_msg.AiVector3D Direction = 4;
  bool has_direction() const;
  void clear_direction() ;
  const ::pb_msg::AiVector3D& direction() const;
  PROTOBUF_NODISCARD ::pb_msg::AiVector3D* release_direction();
  ::pb_msg::AiVector3D* mutable_direction();
  void set_allocated_direction(::pb_msg::AiVector3D* value);
  void unsafe_arena_set_allocated_direction(::pb_msg::AiVector3D* value);
  ::pb_msg::AiVector3D* unsafe_arena_release_direction();

  private:
  const ::pb_msg::AiVector3D& _internal_direction() const;
  ::pb_msg::AiVector3D* _internal_mutable_direction();

  public:
  // .pb_msg.AiVector3D Up = 5;
  bool has_up() const;
  void clear_up() ;
  const ::pb_msg::AiVector3D& up() const;
  PROTOBUF_NODISCARD ::pb_msg::AiVector3D* release_up();
  ::pb_msg::AiVector3D* mutable_up();
  void set_allocated_up(::pb_msg::AiVector3D* value);
  void unsafe_arena_set_allocated_up(::pb_msg::AiVector3D* value);
  ::pb_msg::AiVector3D* unsafe_arena_release_up();

  private:
  const ::pb_msg::AiVector3D& _internal_up() const;
  ::pb_msg::AiVector3D* _internal_mutable_up();

  public:
  // .pb_msg.AiColor3D ColorDiffuse = 9;
  bool has_colordiffuse() const;
  void clear_colordiffuse() ;
  const ::pb_msg::AiColor3D& colordiffuse() const;
  PROTOBUF_NODISCARD ::pb_msg::AiColor3D* release_colordiffuse();
  ::pb_msg::AiColor3D* mutable_colordiffuse();
  void set_allocated_colordiffuse(::pb_msg::AiColor3D* value);
  void unsafe_arena_set_allocated_colordiffuse(::pb_msg::AiColor3D* value);
  ::pb_msg::AiColor3D* unsafe_arena_release_colordiffuse();

  private:
  const ::pb_msg::AiColor3D& _internal_colordiffuse() const;
  ::pb_msg::AiColor3D* _internal_mutable_colordiffuse();

  public:
  // .pb_msg.AiColor3D ColorSpecular = 10;
  bool has_colorspecular() const;
  void clear_colorspecular() ;
  const ::pb_msg::AiColor3D& colorspecular() const;
  PROTOBUF_NODISCARD ::pb_msg::AiColor3D* release_colorspecular();
  ::pb_msg::AiColor3D* mutable_colorspecular();
  void set_allocated_colorspecular(::pb_msg::AiColor3D* value);
  void unsafe_arena_set_allocated_colorspecular(::pb_msg::AiColor3D* value);
  ::pb_msg::AiColor3D* unsafe_arena_release_colorspecular();

  private:
  const ::pb_msg::AiColor3D& _internal_colorspecular() const;
  ::pb_msg::AiColor3D* _internal_mutable_colorspecular();

  public:
  // .pb_msg.AiColor3D ColorAmbient = 11;
  bool has_colorambient() const;
  void clear_colorambient() ;
  const ::pb_msg::AiColor3D& colorambient() const;
  PROTOBUF_NODISCARD ::pb_msg::AiColor3D* release_colorambient();
  ::pb_msg::AiColor3D* mutable_colorambient();
  void set_allocated_colorambient(::pb_msg::AiColor3D* value);
  void unsafe_arena_set_allocated_colorambient(::pb_msg::AiColor3D* value);
  ::pb_msg::AiColor3D* unsafe_arena_release_colorambient();

  private:
  const ::pb_msg::AiColor3D& _internal_colorambient() const;
  ::pb_msg::AiColor3D* _internal_mutable_colorambient();

  public:
  // .pb_msg.AiVector2D Size = 14;
  bool has_size() const;
  void clear_size() ;
  const ::pb_msg::AiVector2D& size() const;
  PROTOBUF_NODISCARD ::pb_msg::AiVector2D* release_size();
  ::pb_msg::AiVector2D* mutable_size();
  void set_allocated_size(::pb_msg::AiVector2D* value);
  void unsafe_arena_set_allocated_size(::pb_msg::AiVector2D* value);
  ::pb_msg::AiVector2D* unsafe_arena_release_size();

  private:
  const ::pb_msg::AiVector2D& _internal_size() const;
  ::pb_msg::AiVector2D* _internal_mutable_size();

  public:
  // int32 Type = 2;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // float AttenuationConstant = 6;
  void clear_attenuationconstant() ;
  float attenuationconstant() const;
  void set_attenuationconstant(float value);

  private:
  float _internal_attenuationconstant() const;
  void _internal_set_attenuationconstant(float value);

  public:
  // float AttenuationLinear = 7;
  void clear_attenuationlinear() ;
  float attenuationlinear() const;
  void set_attenuationlinear(float value);

  private:
  float _internal_attenuationlinear() const;
  void _internal_set_attenuationlinear(float value);

  public:
  // float AttenuationQuadratic = 8;
  void clear_attenuationquadratic() ;
  float attenuationquadratic() const;
  void set_attenuationquadratic(float value);

  private:
  float _internal_attenuationquadratic() const;
  void _internal_set_attenuationquadratic(float value);

  public:
  // float AngleInnerCone = 12;
  void clear_angleinnercone() ;
  float angleinnercone() const;
  void set_angleinnercone(float value);

  private:
  float _internal_angleinnercone() const;
  void _internal_set_angleinnercone(float value);

  public:
  // float AngleOuterCone = 13;
  void clear_angleoutercone() ;
  float angleoutercone() const;
  void set_angleoutercone(float value);

  private:
  float _internal_angleoutercone() const;
  void _internal_set_angleoutercone(float value);

  public:
  // @@protoc_insertion_point(class_scope:pb_msg.AiLight)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 14, 7, 35, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::pb_msg::AiVector3D* position_;
    ::pb_msg::AiVector3D* direction_;
    ::pb_msg::AiVector3D* up_;
    ::pb_msg::AiColor3D* colordiffuse_;
    ::pb_msg::AiColor3D* colorspecular_;
    ::pb_msg::AiColor3D* colorambient_;
    ::pb_msg::AiVector2D* size_;
    ::int32_t type_;
    float attenuationconstant_;
    float attenuationlinear_;
    float attenuationquadratic_;
    float angleinnercone_;
    float angleoutercone_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fpb_5fmsg_2fai_5flight_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AiLight

// string Name = 1;
inline void AiLight::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AiLight::name() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.Name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AiLight::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb_msg.AiLight.Name)
}
inline std::string* AiLight::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb_msg.AiLight.Name)
  return _s;
}
inline const std::string& AiLight::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void AiLight::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AiLight::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* AiLight::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb_msg.AiLight.Name)
  return _impl_.name_.Release();
}
inline void AiLight::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb_msg.AiLight.Name)
}

// int32 Type = 2;
inline void AiLight::clear_type() {
  _impl_.type_ = 0;
}
inline ::int32_t AiLight::type() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.Type)
  return _internal_type();
}
inline void AiLight::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb_msg.AiLight.Type)
}
inline ::int32_t AiLight::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_;
}
inline void AiLight::_internal_set_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .pb_msg.AiVector3D Position = 3;
inline bool AiLight::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::pb_msg::AiVector3D& AiLight::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::pb_msg::AiVector3D* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb_msg::AiVector3D&>(::pb_msg::_AiVector3D_default_instance_);
}
inline const ::pb_msg::AiVector3D& AiLight::position() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.Position)
  return _internal_position();
}
inline void AiLight::unsafe_arena_set_allocated_position(::pb_msg::AiVector3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::pb_msg::AiVector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_msg.AiLight.Position)
}
inline ::pb_msg::AiVector3D* AiLight::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pb_msg::AiVector3D* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::pb_msg::AiVector3D* AiLight::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb_msg.AiLight.Position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pb_msg::AiVector3D* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::pb_msg::AiVector3D* AiLight::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_msg::AiVector3D>(GetArenaForAllocation());
    _impl_.position_ = reinterpret_cast<::pb_msg::AiVector3D*>(p);
  }
  return _impl_.position_;
}
inline ::pb_msg::AiVector3D* AiLight::mutable_position() {
  ::pb_msg::AiVector3D* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:pb_msg.AiLight.Position)
  return _msg;
}
inline void AiLight::set_allocated_position(::pb_msg::AiVector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::pb_msg::AiVector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:pb_msg.AiLight.Position)
}

// .pb_msg.AiVector3D Direction = 4;
inline bool AiLight::has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.direction_ != nullptr);
  return value;
}
inline const ::pb_msg::AiVector3D& AiLight::_internal_direction() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::pb_msg::AiVector3D* p = _impl_.direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb_msg::AiVector3D&>(::pb_msg::_AiVector3D_default_instance_);
}
inline const ::pb_msg::AiVector3D& AiLight::direction() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.Direction)
  return _internal_direction();
}
inline void AiLight::unsafe_arena_set_allocated_direction(::pb_msg::AiVector3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.direction_);
  }
  _impl_.direction_ = reinterpret_cast<::pb_msg::AiVector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_msg.AiLight.Direction)
}
inline ::pb_msg::AiVector3D* AiLight::release_direction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::pb_msg::AiVector3D* released = _impl_.direction_;
  _impl_.direction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::pb_msg::AiVector3D* AiLight::unsafe_arena_release_direction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb_msg.AiLight.Direction)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::pb_msg::AiVector3D* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
  return temp;
}
inline ::pb_msg::AiVector3D* AiLight::_internal_mutable_direction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_msg::AiVector3D>(GetArenaForAllocation());
    _impl_.direction_ = reinterpret_cast<::pb_msg::AiVector3D*>(p);
  }
  return _impl_.direction_;
}
inline ::pb_msg::AiVector3D* AiLight::mutable_direction() {
  ::pb_msg::AiVector3D* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:pb_msg.AiLight.Direction)
  return _msg;
}
inline void AiLight::set_allocated_direction(::pb_msg::AiVector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.direction_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.direction_ = reinterpret_cast<::pb_msg::AiVector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:pb_msg.AiLight.Direction)
}

// .pb_msg.AiVector3D Up = 5;
inline bool AiLight::has_up() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.up_ != nullptr);
  return value;
}
inline const ::pb_msg::AiVector3D& AiLight::_internal_up() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::pb_msg::AiVector3D* p = _impl_.up_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb_msg::AiVector3D&>(::pb_msg::_AiVector3D_default_instance_);
}
inline const ::pb_msg::AiVector3D& AiLight::up() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.Up)
  return _internal_up();
}
inline void AiLight::unsafe_arena_set_allocated_up(::pb_msg::AiVector3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.up_);
  }
  _impl_.up_ = reinterpret_cast<::pb_msg::AiVector3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_msg.AiLight.Up)
}
inline ::pb_msg::AiVector3D* AiLight::release_up() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::pb_msg::AiVector3D* released = _impl_.up_;
  _impl_.up_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::pb_msg::AiVector3D* AiLight::unsafe_arena_release_up() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb_msg.AiLight.Up)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::pb_msg::AiVector3D* temp = _impl_.up_;
  _impl_.up_ = nullptr;
  return temp;
}
inline ::pb_msg::AiVector3D* AiLight::_internal_mutable_up() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.up_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_msg::AiVector3D>(GetArenaForAllocation());
    _impl_.up_ = reinterpret_cast<::pb_msg::AiVector3D*>(p);
  }
  return _impl_.up_;
}
inline ::pb_msg::AiVector3D* AiLight::mutable_up() {
  ::pb_msg::AiVector3D* _msg = _internal_mutable_up();
  // @@protoc_insertion_point(field_mutable:pb_msg.AiLight.Up)
  return _msg;
}
inline void AiLight::set_allocated_up(::pb_msg::AiVector3D* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.up_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.up_ = reinterpret_cast<::pb_msg::AiVector3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:pb_msg.AiLight.Up)
}

// float AttenuationConstant = 6;
inline void AiLight::clear_attenuationconstant() {
  _impl_.attenuationconstant_ = 0;
}
inline float AiLight::attenuationconstant() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.AttenuationConstant)
  return _internal_attenuationconstant();
}
inline void AiLight::set_attenuationconstant(float value) {
  _internal_set_attenuationconstant(value);
  // @@protoc_insertion_point(field_set:pb_msg.AiLight.AttenuationConstant)
}
inline float AiLight::_internal_attenuationconstant() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attenuationconstant_;
}
inline void AiLight::_internal_set_attenuationconstant(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attenuationconstant_ = value;
}

// float AttenuationLinear = 7;
inline void AiLight::clear_attenuationlinear() {
  _impl_.attenuationlinear_ = 0;
}
inline float AiLight::attenuationlinear() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.AttenuationLinear)
  return _internal_attenuationlinear();
}
inline void AiLight::set_attenuationlinear(float value) {
  _internal_set_attenuationlinear(value);
  // @@protoc_insertion_point(field_set:pb_msg.AiLight.AttenuationLinear)
}
inline float AiLight::_internal_attenuationlinear() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attenuationlinear_;
}
inline void AiLight::_internal_set_attenuationlinear(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attenuationlinear_ = value;
}

// float AttenuationQuadratic = 8;
inline void AiLight::clear_attenuationquadratic() {
  _impl_.attenuationquadratic_ = 0;
}
inline float AiLight::attenuationquadratic() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.AttenuationQuadratic)
  return _internal_attenuationquadratic();
}
inline void AiLight::set_attenuationquadratic(float value) {
  _internal_set_attenuationquadratic(value);
  // @@protoc_insertion_point(field_set:pb_msg.AiLight.AttenuationQuadratic)
}
inline float AiLight::_internal_attenuationquadratic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attenuationquadratic_;
}
inline void AiLight::_internal_set_attenuationquadratic(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attenuationquadratic_ = value;
}

// .pb_msg.AiColor3D ColorDiffuse = 9;
inline bool AiLight::has_colordiffuse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.colordiffuse_ != nullptr);
  return value;
}
inline const ::pb_msg::AiColor3D& AiLight::_internal_colordiffuse() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::pb_msg::AiColor3D* p = _impl_.colordiffuse_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb_msg::AiColor3D&>(::pb_msg::_AiColor3D_default_instance_);
}
inline const ::pb_msg::AiColor3D& AiLight::colordiffuse() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.ColorDiffuse)
  return _internal_colordiffuse();
}
inline void AiLight::unsafe_arena_set_allocated_colordiffuse(::pb_msg::AiColor3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.colordiffuse_);
  }
  _impl_.colordiffuse_ = reinterpret_cast<::pb_msg::AiColor3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_msg.AiLight.ColorDiffuse)
}
inline ::pb_msg::AiColor3D* AiLight::release_colordiffuse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::pb_msg::AiColor3D* released = _impl_.colordiffuse_;
  _impl_.colordiffuse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::pb_msg::AiColor3D* AiLight::unsafe_arena_release_colordiffuse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb_msg.AiLight.ColorDiffuse)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::pb_msg::AiColor3D* temp = _impl_.colordiffuse_;
  _impl_.colordiffuse_ = nullptr;
  return temp;
}
inline ::pb_msg::AiColor3D* AiLight::_internal_mutable_colordiffuse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.colordiffuse_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_msg::AiColor3D>(GetArenaForAllocation());
    _impl_.colordiffuse_ = reinterpret_cast<::pb_msg::AiColor3D*>(p);
  }
  return _impl_.colordiffuse_;
}
inline ::pb_msg::AiColor3D* AiLight::mutable_colordiffuse() {
  ::pb_msg::AiColor3D* _msg = _internal_mutable_colordiffuse();
  // @@protoc_insertion_point(field_mutable:pb_msg.AiLight.ColorDiffuse)
  return _msg;
}
inline void AiLight::set_allocated_colordiffuse(::pb_msg::AiColor3D* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.colordiffuse_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.colordiffuse_ = reinterpret_cast<::pb_msg::AiColor3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:pb_msg.AiLight.ColorDiffuse)
}

// .pb_msg.AiColor3D ColorSpecular = 10;
inline bool AiLight::has_colorspecular() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.colorspecular_ != nullptr);
  return value;
}
inline const ::pb_msg::AiColor3D& AiLight::_internal_colorspecular() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::pb_msg::AiColor3D* p = _impl_.colorspecular_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb_msg::AiColor3D&>(::pb_msg::_AiColor3D_default_instance_);
}
inline const ::pb_msg::AiColor3D& AiLight::colorspecular() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.ColorSpecular)
  return _internal_colorspecular();
}
inline void AiLight::unsafe_arena_set_allocated_colorspecular(::pb_msg::AiColor3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.colorspecular_);
  }
  _impl_.colorspecular_ = reinterpret_cast<::pb_msg::AiColor3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_msg.AiLight.ColorSpecular)
}
inline ::pb_msg::AiColor3D* AiLight::release_colorspecular() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::pb_msg::AiColor3D* released = _impl_.colorspecular_;
  _impl_.colorspecular_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::pb_msg::AiColor3D* AiLight::unsafe_arena_release_colorspecular() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb_msg.AiLight.ColorSpecular)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::pb_msg::AiColor3D* temp = _impl_.colorspecular_;
  _impl_.colorspecular_ = nullptr;
  return temp;
}
inline ::pb_msg::AiColor3D* AiLight::_internal_mutable_colorspecular() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.colorspecular_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_msg::AiColor3D>(GetArenaForAllocation());
    _impl_.colorspecular_ = reinterpret_cast<::pb_msg::AiColor3D*>(p);
  }
  return _impl_.colorspecular_;
}
inline ::pb_msg::AiColor3D* AiLight::mutable_colorspecular() {
  ::pb_msg::AiColor3D* _msg = _internal_mutable_colorspecular();
  // @@protoc_insertion_point(field_mutable:pb_msg.AiLight.ColorSpecular)
  return _msg;
}
inline void AiLight::set_allocated_colorspecular(::pb_msg::AiColor3D* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.colorspecular_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.colorspecular_ = reinterpret_cast<::pb_msg::AiColor3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:pb_msg.AiLight.ColorSpecular)
}

// .pb_msg.AiColor3D ColorAmbient = 11;
inline bool AiLight::has_colorambient() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.colorambient_ != nullptr);
  return value;
}
inline const ::pb_msg::AiColor3D& AiLight::_internal_colorambient() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::pb_msg::AiColor3D* p = _impl_.colorambient_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb_msg::AiColor3D&>(::pb_msg::_AiColor3D_default_instance_);
}
inline const ::pb_msg::AiColor3D& AiLight::colorambient() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.ColorAmbient)
  return _internal_colorambient();
}
inline void AiLight::unsafe_arena_set_allocated_colorambient(::pb_msg::AiColor3D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.colorambient_);
  }
  _impl_.colorambient_ = reinterpret_cast<::pb_msg::AiColor3D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_msg.AiLight.ColorAmbient)
}
inline ::pb_msg::AiColor3D* AiLight::release_colorambient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::pb_msg::AiColor3D* released = _impl_.colorambient_;
  _impl_.colorambient_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::pb_msg::AiColor3D* AiLight::unsafe_arena_release_colorambient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb_msg.AiLight.ColorAmbient)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::pb_msg::AiColor3D* temp = _impl_.colorambient_;
  _impl_.colorambient_ = nullptr;
  return temp;
}
inline ::pb_msg::AiColor3D* AiLight::_internal_mutable_colorambient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.colorambient_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_msg::AiColor3D>(GetArenaForAllocation());
    _impl_.colorambient_ = reinterpret_cast<::pb_msg::AiColor3D*>(p);
  }
  return _impl_.colorambient_;
}
inline ::pb_msg::AiColor3D* AiLight::mutable_colorambient() {
  ::pb_msg::AiColor3D* _msg = _internal_mutable_colorambient();
  // @@protoc_insertion_point(field_mutable:pb_msg.AiLight.ColorAmbient)
  return _msg;
}
inline void AiLight::set_allocated_colorambient(::pb_msg::AiColor3D* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.colorambient_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.colorambient_ = reinterpret_cast<::pb_msg::AiColor3D*>(value);
  // @@protoc_insertion_point(field_set_allocated:pb_msg.AiLight.ColorAmbient)
}

// float AngleInnerCone = 12;
inline void AiLight::clear_angleinnercone() {
  _impl_.angleinnercone_ = 0;
}
inline float AiLight::angleinnercone() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.AngleInnerCone)
  return _internal_angleinnercone();
}
inline void AiLight::set_angleinnercone(float value) {
  _internal_set_angleinnercone(value);
  // @@protoc_insertion_point(field_set:pb_msg.AiLight.AngleInnerCone)
}
inline float AiLight::_internal_angleinnercone() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.angleinnercone_;
}
inline void AiLight::_internal_set_angleinnercone(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.angleinnercone_ = value;
}

// float AngleOuterCone = 13;
inline void AiLight::clear_angleoutercone() {
  _impl_.angleoutercone_ = 0;
}
inline float AiLight::angleoutercone() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.AngleOuterCone)
  return _internal_angleoutercone();
}
inline void AiLight::set_angleoutercone(float value) {
  _internal_set_angleoutercone(value);
  // @@protoc_insertion_point(field_set:pb_msg.AiLight.AngleOuterCone)
}
inline float AiLight::_internal_angleoutercone() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.angleoutercone_;
}
inline void AiLight::_internal_set_angleoutercone(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.angleoutercone_ = value;
}

// .pb_msg.AiVector2D Size = 14;
inline bool AiLight::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline const ::pb_msg::AiVector2D& AiLight::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::pb_msg::AiVector2D* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb_msg::AiVector2D&>(::pb_msg::_AiVector2D_default_instance_);
}
inline const ::pb_msg::AiVector2D& AiLight::size() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiLight.Size)
  return _internal_size();
}
inline void AiLight::unsafe_arena_set_allocated_size(::pb_msg::AiVector2D* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = reinterpret_cast<::pb_msg::AiVector2D*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_msg.AiLight.Size)
}
inline ::pb_msg::AiVector2D* AiLight::release_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::pb_msg::AiVector2D* released = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::pb_msg::AiVector2D* AiLight::unsafe_arena_release_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb_msg.AiLight.Size)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::pb_msg::AiVector2D* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::pb_msg::AiVector2D* AiLight::_internal_mutable_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_msg::AiVector2D>(GetArenaForAllocation());
    _impl_.size_ = reinterpret_cast<::pb_msg::AiVector2D*>(p);
  }
  return _impl_.size_;
}
inline ::pb_msg::AiVector2D* AiLight::mutable_size() {
  ::pb_msg::AiVector2D* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:pb_msg.AiLight.Size)
  return _msg;
}
inline void AiLight::set_allocated_size(::pb_msg::AiVector2D* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.size_ = reinterpret_cast<::pb_msg::AiVector2D*>(value);
  // @@protoc_insertion_point(field_set_allocated:pb_msg.AiLight.Size)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_msg


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_2fpb_5fmsg_2fai_5flight_2eproto_2epb_2eh
