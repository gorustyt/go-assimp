// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/pb_msg/ai_mesh.proto

#include "common/pb_msg/ai_mesh.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace pb_msg {
        template <typename>
PROTOBUF_CONSTEXPR AiMesh_ColorsArray::AiMesh_ColorsArray(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.colors_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiMesh_ColorsArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiMesh_ColorsArrayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiMesh_ColorsArrayDefaultTypeInternal() {}
  union {
    AiMesh_ColorsArray _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiMesh_ColorsArrayDefaultTypeInternal _AiMesh_ColorsArray_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiMesh_TextureCoordsArray::AiMesh_TextureCoordsArray(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.texturecoords_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiMesh_TextureCoordsArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiMesh_TextureCoordsArrayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiMesh_TextureCoordsArrayDefaultTypeInternal() {}
  union {
    AiMesh_TextureCoordsArray _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiMesh_TextureCoordsArrayDefaultTypeInternal _AiMesh_TextureCoordsArray_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiMesh::AiMesh(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.vertices_)*/ {},
      /*decltype(_impl_.normals_)*/ {},
      /*decltype(_impl_.tangents_)*/ {},
      /*decltype(_impl_.bitangents_)*/ {},
      /*decltype(_impl_.colors_)*/ {},
      /*decltype(_impl_.texturecoords_)*/ {},
      /*decltype(_impl_.numuvcomponents_)*/ {},
      /* _impl_._numuvcomponents_cached_byte_size_ = */ {0},
      /*decltype(_impl_.faces_)*/ {},
      /*decltype(_impl_.bones_)*/ {},
      /*decltype(_impl_.animmeshes_)*/ {},
      /*decltype(_impl_.texturecoordsnames_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.aabb_)*/ nullptr,
      /*decltype(_impl_.primitivetypes_)*/ 0u,
      /*decltype(_impl_.materialindex_)*/ 0,
      /*decltype(_impl_.method_)*/ 0,
    } {}
struct AiMeshDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiMeshDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiMeshDefaultTypeInternal() {}
  union {
    AiMesh _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiMeshDefaultTypeInternal _AiMesh_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR AiFace::AiFace(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.indices_)*/ {},
      /* _impl_._indices_cached_byte_size_ = */ {0},
      /*decltype(_impl_.numindices_)*/ 0u,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct AiFaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AiFaceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AiFaceDefaultTypeInternal() {}
  union {
    AiFace _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AiFaceDefaultTypeInternal _AiFace_default_instance_;
}  // namespace pb_msg
static ::_pb::Metadata file_level_metadata_common_2fpb_5fmsg_2fai_5fmesh_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_common_2fpb_5fmsg_2fai_5fmesh_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_common_2fpb_5fmsg_2fai_5fmesh_2eproto = nullptr;
const ::uint32_t TableStruct_common_2fpb_5fmsg_2fai_5fmesh_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh_ColorsArray, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh_ColorsArray, _impl_.colors_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh_TextureCoordsArray, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh_TextureCoordsArray, _impl_.texturecoords_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.primitivetypes_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.vertices_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.normals_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.tangents_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.bitangents_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.colors_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.texturecoords_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.numuvcomponents_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.faces_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.bones_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.materialindex_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.animmeshes_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.method_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.aabb_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiMesh, _impl_.texturecoordsnames_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiFace, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiFace, _impl_.numindices_),
    PROTOBUF_FIELD_OFFSET(::pb_msg::AiFace, _impl_.indices_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::pb_msg::AiMesh_ColorsArray)},
        {9, -1, -1, sizeof(::pb_msg::AiMesh_TextureCoordsArray)},
        {18, 42, -1, sizeof(::pb_msg::AiMesh)},
        {58, -1, -1, sizeof(::pb_msg::AiFace)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::pb_msg::_AiMesh_ColorsArray_default_instance_._instance,
    &::pb_msg::_AiMesh_TextureCoordsArray_default_instance_._instance,
    &::pb_msg::_AiMesh_default_instance_._instance,
    &::pb_msg::_AiFace_default_instance_._instance,
};
const char descriptor_table_protodef_common_2fpb_5fmsg_2fai_5fmesh_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\033common/pb_msg/ai_mesh.proto\022\006pb_msg\032\032c"
    "ommon/pb_msg/common.proto\032\033common/pb_msg"
    "/ai_bone.proto\032\036common/pb_msg/ai_animesh"
    ".proto\"\200\005\n\006AiMesh\022\026\n\016PrimitiveTypes\030\001 \001("
    "\r\022$\n\010Vertices\030\002 \003(\0132\022.pb_msg.AiVector3D\022"
    "#\n\007Normals\030\003 \003(\0132\022.pb_msg.AiVector3D\022$\n\010"
    "Tangents\030\004 \003(\0132\022.pb_msg.AiVector3D\022&\n\nBi"
    "tangents\030\005 \003(\0132\022.pb_msg.AiVector3D\022*\n\006Co"
    "lors\030\006 \003(\0132\032.pb_msg.AiMesh.ColorsArray\0228"
    "\n\rTextureCoords\030\007 \003(\0132!.pb_msg.AiMesh.Te"
    "xtureCoordsArray\022\027\n\017NumUVComponents\030\010 \003("
    "\r\022\035\n\005Faces\030\t \003(\0132\016.pb_msg.AiFace\022\035\n\005Bone"
    "s\030\n \003(\0132\016.pb_msg.AiBone\022\025\n\rMaterialIndex"
    "\030\014 \001(\005\022\014\n\004Name\030\r \001(\t\022&\n\nAnimMeshes\030\016 \003(\013"
    "2\022.pb_msg.AiAnimMesh\022\016\n\006Method\030\017 \001(\005\022\034\n\004"
    "AABB\030\020 \001(\0132\016.pb_msg.AiAABB\022\032\n\022TextureCoo"
    "rdsNames\030\021 \003(\t\0320\n\013ColorsArray\022!\n\006Colors\030"
    "\001 \003(\0132\021.pb_msg.AiColor4D\032\?\n\022TextureCoord"
    "sArray\022)\n\rTextureCoords\030\001 \003(\0132\022.pb_msg.A"
    "iVector3D\"-\n\006AiFace\022\022\n\nNumIndices\030\001 \001(\r\022"
    "\017\n\007Indices\030\002 \003(\rB\017Z\rcommon/pb_msgb\006proto"
    "3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_deps[3] =
    {
        &::descriptor_table_common_2fpb_5fmsg_2fai_5fanimesh_2eproto,
        &::descriptor_table_common_2fpb_5fmsg_2fai_5fbone_2eproto,
        &::descriptor_table_common_2fpb_5fmsg_2fcommon_2eproto,
};
static ::absl::once_flag descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto = {
    false,
    false,
    841,
    descriptor_table_protodef_common_2fpb_5fmsg_2fai_5fmesh_2eproto,
    "common/pb_msg/ai_mesh.proto",
    &descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_once,
    descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_deps,
    3,
    4,
    schemas,
    file_default_instances,
    TableStruct_common_2fpb_5fmsg_2fai_5fmesh_2eproto::offsets,
    file_level_metadata_common_2fpb_5fmsg_2fai_5fmesh_2eproto,
    file_level_enum_descriptors_common_2fpb_5fmsg_2fai_5fmesh_2eproto,
    file_level_service_descriptors_common_2fpb_5fmsg_2fai_5fmesh_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_getter() {
  return &descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fpb_5fmsg_2fai_5fmesh_2eproto(&descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto);
namespace pb_msg {
// ===================================================================

class AiMesh_ColorsArray::_Internal {
 public:
};

void AiMesh_ColorsArray::clear_colors() {
  _internal_mutable_colors()->Clear();
}
AiMesh_ColorsArray::AiMesh_ColorsArray(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiMesh.ColorsArray)
}
AiMesh_ColorsArray::AiMesh_ColorsArray(const AiMesh_ColorsArray& from) : ::google::protobuf::Message() {
  AiMesh_ColorsArray* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.colors_){from._impl_.colors_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiMesh.ColorsArray)
}
inline void AiMesh_ColorsArray::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.colors_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AiMesh_ColorsArray::~AiMesh_ColorsArray() {
  // @@protoc_insertion_point(destructor:pb_msg.AiMesh.ColorsArray)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiMesh_ColorsArray::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.colors_.~RepeatedPtrField();
}
void AiMesh_ColorsArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiMesh_ColorsArray::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiMesh.ColorsArray)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_colors()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiMesh_ColorsArray::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AiMesh_ColorsArray::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiMesh_ColorsArray_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .pb_msg.AiColor4D Colors = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiMesh_ColorsArray, _impl_.colors_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .pb_msg.AiColor4D Colors = 1;
    {PROTOBUF_FIELD_OFFSET(AiMesh_ColorsArray, _impl_.colors_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiColor4D>()},
  }}, {{
  }},
};

::uint8_t* AiMesh_ColorsArray::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiMesh.ColorsArray)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .pb_msg.AiColor4D Colors = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colors_size()); i < n; i++) {
    const auto& repfield = this->_internal_colors().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiMesh.ColorsArray)
  return target;
}

::size_t AiMesh_ColorsArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiMesh.ColorsArray)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_msg.AiColor4D Colors = 1;
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->_internal_colors()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiMesh_ColorsArray::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiMesh_ColorsArray::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiMesh_ColorsArray::GetClassData() const { return &_class_data_; }


void AiMesh_ColorsArray::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiMesh_ColorsArray*>(&to_msg);
  auto& from = static_cast<const AiMesh_ColorsArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiMesh.ColorsArray)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_colors()->MergeFrom(from._internal_colors());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiMesh_ColorsArray::CopyFrom(const AiMesh_ColorsArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiMesh.ColorsArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiMesh_ColorsArray::IsInitialized() const {
  return true;
}

void AiMesh_ColorsArray::InternalSwap(AiMesh_ColorsArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.colors_.InternalSwap(&other->_impl_.colors_);
}

::google::protobuf::Metadata AiMesh_ColorsArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fmesh_2eproto[0]);
}
// ===================================================================

class AiMesh_TextureCoordsArray::_Internal {
 public:
};

void AiMesh_TextureCoordsArray::clear_texturecoords() {
  _internal_mutable_texturecoords()->Clear();
}
AiMesh_TextureCoordsArray::AiMesh_TextureCoordsArray(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiMesh.TextureCoordsArray)
}
AiMesh_TextureCoordsArray::AiMesh_TextureCoordsArray(const AiMesh_TextureCoordsArray& from) : ::google::protobuf::Message() {
  AiMesh_TextureCoordsArray* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.texturecoords_){from._impl_.texturecoords_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiMesh.TextureCoordsArray)
}
inline void AiMesh_TextureCoordsArray::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.texturecoords_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AiMesh_TextureCoordsArray::~AiMesh_TextureCoordsArray() {
  // @@protoc_insertion_point(destructor:pb_msg.AiMesh.TextureCoordsArray)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiMesh_TextureCoordsArray::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.texturecoords_.~RepeatedPtrField();
}
void AiMesh_TextureCoordsArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiMesh_TextureCoordsArray::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiMesh.TextureCoordsArray)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_texturecoords()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiMesh_TextureCoordsArray::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AiMesh_TextureCoordsArray::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiMesh_TextureCoordsArray_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .pb_msg.AiVector3D TextureCoords = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AiMesh_TextureCoordsArray, _impl_.texturecoords_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .pb_msg.AiVector3D TextureCoords = 1;
    {PROTOBUF_FIELD_OFFSET(AiMesh_TextureCoordsArray, _impl_.texturecoords_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
  }}, {{
  }},
};

::uint8_t* AiMesh_TextureCoordsArray::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiMesh.TextureCoordsArray)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .pb_msg.AiVector3D TextureCoords = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_texturecoords_size()); i < n; i++) {
    const auto& repfield = this->_internal_texturecoords().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiMesh.TextureCoordsArray)
  return target;
}

::size_t AiMesh_TextureCoordsArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiMesh.TextureCoordsArray)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_msg.AiVector3D TextureCoords = 1;
  total_size += 1UL * this->_internal_texturecoords_size();
  for (const auto& msg : this->_internal_texturecoords()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiMesh_TextureCoordsArray::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiMesh_TextureCoordsArray::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiMesh_TextureCoordsArray::GetClassData() const { return &_class_data_; }


void AiMesh_TextureCoordsArray::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiMesh_TextureCoordsArray*>(&to_msg);
  auto& from = static_cast<const AiMesh_TextureCoordsArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiMesh.TextureCoordsArray)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_texturecoords()->MergeFrom(from._internal_texturecoords());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiMesh_TextureCoordsArray::CopyFrom(const AiMesh_TextureCoordsArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiMesh.TextureCoordsArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiMesh_TextureCoordsArray::IsInitialized() const {
  return true;
}

void AiMesh_TextureCoordsArray::InternalSwap(AiMesh_TextureCoordsArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.texturecoords_.InternalSwap(&other->_impl_.texturecoords_);
}

::google::protobuf::Metadata AiMesh_TextureCoordsArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fmesh_2eproto[1]);
}
// ===================================================================

class AiMesh::_Internal {
 public:
  using HasBits = decltype(std::declval<AiMesh>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AiMesh, _impl_._has_bits_);
  static const ::pb_msg::AiAABB& aabb(const AiMesh* msg);
  static void set_has_aabb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pb_msg::AiAABB& AiMesh::_Internal::aabb(const AiMesh* msg) {
  return *msg->_impl_.aabb_;
}
void AiMesh::clear_vertices() {
  _internal_mutable_vertices()->Clear();
}
void AiMesh::clear_normals() {
  _internal_mutable_normals()->Clear();
}
void AiMesh::clear_tangents() {
  _internal_mutable_tangents()->Clear();
}
void AiMesh::clear_bitangents() {
  _internal_mutable_bitangents()->Clear();
}
void AiMesh::clear_bones() {
  _internal_mutable_bones()->Clear();
}
void AiMesh::clear_animmeshes() {
  _internal_mutable_animmeshes()->Clear();
}
void AiMesh::clear_aabb() {
  if (_impl_.aabb_ != nullptr) _impl_.aabb_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AiMesh::AiMesh(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiMesh)
}
AiMesh::AiMesh(const AiMesh& from) : ::google::protobuf::Message() {
  AiMesh* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.vertices_){from._impl_.vertices_},
      decltype(_impl_.normals_){from._impl_.normals_},
      decltype(_impl_.tangents_){from._impl_.tangents_},
      decltype(_impl_.bitangents_){from._impl_.bitangents_},
      decltype(_impl_.colors_){from._impl_.colors_},
      decltype(_impl_.texturecoords_){from._impl_.texturecoords_},
      decltype(_impl_.numuvcomponents_){from._impl_.numuvcomponents_},
      /* _impl_._numuvcomponents_cached_byte_size_ = */ {0},
      decltype(_impl_.faces_){from._impl_.faces_},
      decltype(_impl_.bones_){from._impl_.bones_},
      decltype(_impl_.animmeshes_){from._impl_.animmeshes_},
      decltype(_impl_.texturecoordsnames_){from._impl_.texturecoordsnames_},
      decltype(_impl_.name_){},
      decltype(_impl_.aabb_){nullptr},
      decltype(_impl_.primitivetypes_){},
      decltype(_impl_.materialindex_){},
      decltype(_impl_.method_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.aabb_ = new ::pb_msg::AiAABB(*from._impl_.aabb_);
  }
  ::memcpy(&_impl_.primitivetypes_, &from._impl_.primitivetypes_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.method_) -
    reinterpret_cast<char*>(&_impl_.primitivetypes_)) + sizeof(_impl_.method_));

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiMesh)
}
inline void AiMesh::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.vertices_){arena},
      decltype(_impl_.normals_){arena},
      decltype(_impl_.tangents_){arena},
      decltype(_impl_.bitangents_){arena},
      decltype(_impl_.colors_){arena},
      decltype(_impl_.texturecoords_){arena},
      decltype(_impl_.numuvcomponents_){arena},
      /* _impl_._numuvcomponents_cached_byte_size_ = */ {0},
      decltype(_impl_.faces_){arena},
      decltype(_impl_.bones_){arena},
      decltype(_impl_.animmeshes_){arena},
      decltype(_impl_.texturecoordsnames_){arena},
      decltype(_impl_.name_){},
      decltype(_impl_.aabb_){nullptr},
      decltype(_impl_.primitivetypes_){0u},
      decltype(_impl_.materialindex_){0},
      decltype(_impl_.method_){0},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
AiMesh::~AiMesh() {
  // @@protoc_insertion_point(destructor:pb_msg.AiMesh)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiMesh::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertices_.~RepeatedPtrField();
  _impl_.normals_.~RepeatedPtrField();
  _impl_.tangents_.~RepeatedPtrField();
  _impl_.bitangents_.~RepeatedPtrField();
  _impl_.colors_.~RepeatedPtrField();
  _impl_.texturecoords_.~RepeatedPtrField();
  _impl_.numuvcomponents_.~RepeatedField();
  _impl_.faces_.~RepeatedPtrField();
  _impl_.bones_.~RepeatedPtrField();
  _impl_.animmeshes_.~RepeatedPtrField();
  _internal_mutable_texturecoordsnames()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.aabb_;
}
void AiMesh::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiMesh)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_vertices()->Clear();
  _internal_mutable_normals()->Clear();
  _internal_mutable_tangents()->Clear();
  _internal_mutable_bitangents()->Clear();
  _internal_mutable_colors()->Clear();
  _internal_mutable_texturecoords()->Clear();
  _internal_mutable_numuvcomponents()->Clear();
  _internal_mutable_faces()->Clear();
  _internal_mutable_bones()->Clear();
  _internal_mutable_animmeshes()->Clear();
  _internal_mutable_texturecoordsnames()->Clear();
  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.aabb_ != nullptr);
    _impl_.aabb_->Clear();
  }
  ::memset(&_impl_.primitivetypes_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.method_) -
      reinterpret_cast<char*>(&_impl_.primitivetypes_)) + sizeof(_impl_.method_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiMesh::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 16, 10, 60, 2> AiMesh::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AiMesh, _impl_._has_bits_),
    0, // no _extensions_
    17, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294837248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AiMesh_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 PrimitiveTypes = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiMesh, _impl_.primitivetypes_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.primitivetypes_)}},
    // repeated .pb_msg.AiVector3D Vertices = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.vertices_)}},
    // repeated .pb_msg.AiVector3D Normals = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.normals_)}},
    // repeated .pb_msg.AiVector3D Tangents = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.tangents_)}},
    // repeated .pb_msg.AiVector3D Bitangents = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 3, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.bitangents_)}},
    // repeated .pb_msg.AiMesh.ColorsArray Colors = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 4, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.colors_)}},
    // repeated .pb_msg.AiMesh.TextureCoordsArray TextureCoords = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 5, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.texturecoords_)}},
    // repeated uint32 NumUVComponents = 8;
    {::_pbi::TcParser::FastV32P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.numuvcomponents_)}},
    // repeated .pb_msg.AiFace Faces = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 6, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.faces_)}},
    // repeated .pb_msg.AiBone Bones = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 7, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.bones_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 MaterialIndex = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiMesh, _impl_.materialindex_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.materialindex_)}},
    // string Name = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.name_)}},
    // repeated .pb_msg.AiAnimMesh AnimMeshes = 14;
    {::_pbi::TcParser::FastMtR1,
     {114, 63, 8, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.animmeshes_)}},
    // int32 Method = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiMesh, _impl_.method_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.method_)}},
    // .pb_msg.AiAABB AABB = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 0, 9, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.aabb_)}},
    // repeated string TextureCoordsNames = 17;
    {::_pbi::TcParser::FastUR2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.texturecoordsnames_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 PrimitiveTypes = 1;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.primitivetypes_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated .pb_msg.AiVector3D Vertices = 2;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.vertices_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiVector3D Normals = 3;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.normals_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiVector3D Tangents = 4;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.tangents_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiVector3D Bitangents = 5;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.bitangents_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiMesh.ColorsArray Colors = 6;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.colors_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiMesh.TextureCoordsArray TextureCoords = 7;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.texturecoords_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated uint32 NumUVComponents = 8;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.numuvcomponents_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated .pb_msg.AiFace Faces = 9;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.faces_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .pb_msg.AiBone Bones = 10;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.bones_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 MaterialIndex = 12;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.materialindex_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string Name = 13;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .pb_msg.AiAnimMesh AnimMeshes = 14;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.animmeshes_), -1, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 Method = 15;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.method_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .pb_msg.AiAABB AABB = 16;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.aabb_), _Internal::kHasBitsOffset + 0, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string TextureCoordsNames = 17;
    {PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.texturecoordsnames_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiVector3D>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiMesh_ColorsArray>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiMesh_TextureCoordsArray>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiFace>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiBone>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiAnimMesh>()},
    {::_pbi::TcParser::GetTable<::pb_msg::AiAABB>()},
  }}, {{
    "\15\0\0\0\0\0\0\0\0\0\0\0\4\0\0\0\22\0\0\0\0\0\0\0"
    "pb_msg.AiMesh"
    "Name"
    "TextureCoordsNames"
  }},
};

::uint8_t* AiMesh::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiMesh)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 PrimitiveTypes = 1;
  if (this->_internal_primitivetypes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_primitivetypes(), target);
  }

  // repeated .pb_msg.AiVector3D Vertices = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiVector3D Normals = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_normals_size()); i < n; i++) {
    const auto& repfield = this->_internal_normals().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiVector3D Tangents = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tangents_size()); i < n; i++) {
    const auto& repfield = this->_internal_tangents().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiVector3D Bitangents = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bitangents_size()); i < n; i++) {
    const auto& repfield = this->_internal_bitangents().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiMesh.ColorsArray Colors = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colors_size()); i < n; i++) {
    const auto& repfield = this->_internal_colors().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiMesh.TextureCoordsArray TextureCoords = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_texturecoords_size()); i < n; i++) {
    const auto& repfield = this->_internal_texturecoords().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 NumUVComponents = 8;
  {
    int byte_size = _impl_._numuvcomponents_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(8, _internal_numuvcomponents(),
                                                 byte_size, target);
    }
  }

  // repeated .pb_msg.AiFace Faces = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_faces_size()); i < n; i++) {
    const auto& repfield = this->_internal_faces().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .pb_msg.AiBone Bones = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bones_size()); i < n; i++) {
    const auto& repfield = this->_internal_bones().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 MaterialIndex = 12;
  if (this->_internal_materialindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<12>(
            stream, this->_internal_materialindex(), target);
  }

  // string Name = 13;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "pb_msg.AiMesh.Name");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // repeated .pb_msg.AiAnimMesh AnimMeshes = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_animmeshes_size()); i < n; i++) {
    const auto& repfield = this->_internal_animmeshes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 Method = 15;
  if (this->_internal_method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_method(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .pb_msg.AiAABB AABB = 16;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::aabb(this),
        _Internal::aabb(this).GetCachedSize(), target, stream);
  }

  // repeated string TextureCoordsNames = 17;
  for (int i = 0, n = this->_internal_texturecoordsnames_size(); i < n; ++i) {
    const auto& s = this->_internal_texturecoordsnames().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "pb_msg.AiMesh.TextureCoordsNames");
    target = stream->WriteString(17, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiMesh)
  return target;
}

::size_t AiMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiMesh)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb_msg.AiVector3D Vertices = 2;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->_internal_vertices()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiVector3D Normals = 3;
  total_size += 1UL * this->_internal_normals_size();
  for (const auto& msg : this->_internal_normals()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiVector3D Tangents = 4;
  total_size += 1UL * this->_internal_tangents_size();
  for (const auto& msg : this->_internal_tangents()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiVector3D Bitangents = 5;
  total_size += 1UL * this->_internal_bitangents_size();
  for (const auto& msg : this->_internal_bitangents()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiMesh.ColorsArray Colors = 6;
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->_internal_colors()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiMesh.TextureCoordsArray TextureCoords = 7;
  total_size += 1UL * this->_internal_texturecoords_size();
  for (const auto& msg : this->_internal_texturecoords()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated uint32 NumUVComponents = 8;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_numuvcomponents())
    ;
    _impl_._numuvcomponents_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .pb_msg.AiFace Faces = 9;
  total_size += 1UL * this->_internal_faces_size();
  for (const auto& msg : this->_internal_faces()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiBone Bones = 10;
  total_size += 1UL * this->_internal_bones_size();
  for (const auto& msg : this->_internal_bones()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .pb_msg.AiAnimMesh AnimMeshes = 14;
  total_size += 1UL * this->_internal_animmeshes_size();
  for (const auto& msg : this->_internal_animmeshes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string TextureCoordsNames = 17;
  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_texturecoordsnames().size());
  for (int i = 0, n = _internal_texturecoordsnames().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_texturecoordsnames().Get(i));
  }
  // string Name = 13;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // .pb_msg.AiAABB AABB = 16;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.aabb_);
  }

  // uint32 PrimitiveTypes = 1;
  if (this->_internal_primitivetypes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_primitivetypes());
  }

  // int32 MaterialIndex = 12;
  if (this->_internal_materialindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_materialindex());
  }

  // int32 Method = 15;
  if (this->_internal_method() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_method());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiMesh::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiMesh::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiMesh::GetClassData() const { return &_class_data_; }


void AiMesh::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiMesh*>(&to_msg);
  auto& from = static_cast<const AiMesh&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiMesh)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vertices()->MergeFrom(from._internal_vertices());
  _this->_internal_mutable_normals()->MergeFrom(from._internal_normals());
  _this->_internal_mutable_tangents()->MergeFrom(from._internal_tangents());
  _this->_internal_mutable_bitangents()->MergeFrom(from._internal_bitangents());
  _this->_internal_mutable_colors()->MergeFrom(from._internal_colors());
  _this->_internal_mutable_texturecoords()->MergeFrom(from._internal_texturecoords());
  _this->_internal_mutable_numuvcomponents()->MergeFrom(from._internal_numuvcomponents());
  _this->_internal_mutable_faces()->MergeFrom(from._internal_faces());
  _this->_internal_mutable_bones()->MergeFrom(from._internal_bones());
  _this->_internal_mutable_animmeshes()->MergeFrom(from._internal_animmeshes());
  _this->_internal_mutable_texturecoordsnames()->MergeFrom(from._internal_texturecoordsnames());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_aabb()->::pb_msg::AiAABB::MergeFrom(
        from._internal_aabb());
  }
  if (from._internal_primitivetypes() != 0) {
    _this->_internal_set_primitivetypes(from._internal_primitivetypes());
  }
  if (from._internal_materialindex() != 0) {
    _this->_internal_set_materialindex(from._internal_materialindex());
  }
  if (from._internal_method() != 0) {
    _this->_internal_set_method(from._internal_method());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiMesh::CopyFrom(const AiMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiMesh::IsInitialized() const {
  return true;
}

void AiMesh::InternalSwap(AiMesh* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.vertices_.InternalSwap(&other->_impl_.vertices_);
  _impl_.normals_.InternalSwap(&other->_impl_.normals_);
  _impl_.tangents_.InternalSwap(&other->_impl_.tangents_);
  _impl_.bitangents_.InternalSwap(&other->_impl_.bitangents_);
  _impl_.colors_.InternalSwap(&other->_impl_.colors_);
  _impl_.texturecoords_.InternalSwap(&other->_impl_.texturecoords_);
  _impl_.numuvcomponents_.InternalSwap(&other->_impl_.numuvcomponents_);
  _impl_.faces_.InternalSwap(&other->_impl_.faces_);
  _impl_.bones_.InternalSwap(&other->_impl_.bones_);
  _impl_.animmeshes_.InternalSwap(&other->_impl_.animmeshes_);
  _impl_.texturecoordsnames_.InternalSwap(&other->_impl_.texturecoordsnames_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.method_)
      + sizeof(AiMesh::_impl_.method_)
      - PROTOBUF_FIELD_OFFSET(AiMesh, _impl_.aabb_)>(
          reinterpret_cast<char*>(&_impl_.aabb_),
          reinterpret_cast<char*>(&other->_impl_.aabb_));
}

::google::protobuf::Metadata AiMesh::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fmesh_2eproto[2]);
}
// ===================================================================

class AiFace::_Internal {
 public:
};

AiFace::AiFace(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:pb_msg.AiFace)
}
AiFace::AiFace(const AiFace& from) : ::google::protobuf::Message() {
  AiFace* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.indices_){from._impl_.indices_},
      /* _impl_._indices_cached_byte_size_ = */ {0},
      decltype(_impl_.numindices_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.numindices_ = from._impl_.numindices_;

  // @@protoc_insertion_point(copy_constructor:pb_msg.AiFace)
}
inline void AiFace::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.indices_){arena},
      /* _impl_._indices_cached_byte_size_ = */ {0},
      decltype(_impl_.numindices_){0u},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
AiFace::~AiFace() {
  // @@protoc_insertion_point(destructor:pb_msg.AiFace)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AiFace::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.indices_.~RepeatedField();
}
void AiFace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void AiFace::Clear() {
// @@protoc_insertion_point(message_clear_start:pb_msg.AiFace)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_indices()->Clear();
  _impl_.numindices_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AiFace::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AiFace::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AiFace_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated uint32 Indices = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AiFace, _impl_.indices_)}},
    // uint32 NumIndices = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AiFace, _impl_.numindices_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AiFace, _impl_.numindices_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 NumIndices = 1;
    {PROTOBUF_FIELD_OFFSET(AiFace, _impl_.numindices_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated uint32 Indices = 2;
    {PROTOBUF_FIELD_OFFSET(AiFace, _impl_.indices_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AiFace::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb_msg.AiFace)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 NumIndices = 1;
  if (this->_internal_numindices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_numindices(), target);
  }

  // repeated uint32 Indices = 2;
  {
    int byte_size = _impl_._indices_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(2, _internal_indices(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb_msg.AiFace)
  return target;
}

::size_t AiFace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb_msg.AiFace)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Indices = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_indices())
    ;
    _impl_._indices_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // uint32 NumIndices = 1;
  if (this->_internal_numindices() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_numindices());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AiFace::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    AiFace::MergeImpl
};
const ::google::protobuf::Message::ClassData*AiFace::GetClassData() const { return &_class_data_; }


void AiFace::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AiFace*>(&to_msg);
  auto& from = static_cast<const AiFace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pb_msg.AiFace)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_indices()->MergeFrom(from._internal_indices());
  if (from._internal_numindices() != 0) {
    _this->_internal_set_numindices(from._internal_numindices());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AiFace::CopyFrom(const AiFace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb_msg.AiFace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AiFace::IsInitialized() const {
  return true;
}

void AiFace::InternalSwap(AiFace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.indices_.InternalSwap(&other->_impl_.indices_);
        swap(_impl_.numindices_, other->_impl_.numindices_);
}

::google::protobuf::Metadata AiFace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_getter, &descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto_once,
      file_level_metadata_common_2fpb_5fmsg_2fai_5fmesh_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
