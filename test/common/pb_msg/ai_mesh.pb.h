// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/pb_msg/ai_mesh.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fpb_5fmsg_2fai_5fmesh_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_common_2fpb_5fmsg_2fai_5fmesh_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "common/pb_msg/common.pb.h"
#include "common/pb_msg/ai_bone.pb.h"
#include "common/pb_msg/ai_animesh.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_common_2fpb_5fmsg_2fai_5fmesh_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fpb_5fmsg_2fai_5fmesh_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_common_2fpb_5fmsg_2fai_5fmesh_2eproto;
namespace pb_msg {
class AiFace;
struct AiFaceDefaultTypeInternal;
extern AiFaceDefaultTypeInternal _AiFace_default_instance_;
class AiMesh;
struct AiMeshDefaultTypeInternal;
extern AiMeshDefaultTypeInternal _AiMesh_default_instance_;
class AiMesh_ColorsArray;
struct AiMesh_ColorsArrayDefaultTypeInternal;
extern AiMesh_ColorsArrayDefaultTypeInternal _AiMesh_ColorsArray_default_instance_;
class AiMesh_TextureCoordsArray;
struct AiMesh_TextureCoordsArrayDefaultTypeInternal;
extern AiMesh_TextureCoordsArrayDefaultTypeInternal _AiMesh_TextureCoordsArray_default_instance_;
}  // namespace pb_msg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace pb_msg {

// ===================================================================


// -------------------------------------------------------------------

class AiMesh_ColorsArray final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb_msg.AiMesh.ColorsArray) */ {
 public:
  inline AiMesh_ColorsArray() : AiMesh_ColorsArray(nullptr) {}
  ~AiMesh_ColorsArray() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AiMesh_ColorsArray(::google::protobuf::internal::ConstantInitialized);

  AiMesh_ColorsArray(const AiMesh_ColorsArray& from);
  AiMesh_ColorsArray(AiMesh_ColorsArray&& from) noexcept
    : AiMesh_ColorsArray() {
    *this = ::std::move(from);
  }

  inline AiMesh_ColorsArray& operator=(const AiMesh_ColorsArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AiMesh_ColorsArray& operator=(AiMesh_ColorsArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AiMesh_ColorsArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AiMesh_ColorsArray* internal_default_instance() {
    return reinterpret_cast<const AiMesh_ColorsArray*>(
               &_AiMesh_ColorsArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AiMesh_ColorsArray& a, AiMesh_ColorsArray& b) {
    a.Swap(&b);
  }
  inline void Swap(AiMesh_ColorsArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AiMesh_ColorsArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AiMesh_ColorsArray* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AiMesh_ColorsArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AiMesh_ColorsArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AiMesh_ColorsArray& from) {
    AiMesh_ColorsArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AiMesh_ColorsArray* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb_msg.AiMesh.ColorsArray";
  }
  protected:
  explicit AiMesh_ColorsArray(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorsFieldNumber = 1,
  };
  // repeated .pb_msg.AiColor4D Colors = 1;
  int colors_size() const;
  private:
  int _internal_colors_size() const;

  public:
  void clear_colors() ;
  ::pb_msg::AiColor4D* mutable_colors(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiColor4D >*
      mutable_colors();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiColor4D>& _internal_colors() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiColor4D>* _internal_mutable_colors();
  public:
  const ::pb_msg::AiColor4D& colors(int index) const;
  ::pb_msg::AiColor4D* add_colors();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiColor4D >&
      colors() const;
  // @@protoc_insertion_point(class_scope:pb_msg.AiMesh.ColorsArray)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiColor4D > colors_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fpb_5fmsg_2fai_5fmesh_2eproto;
};// -------------------------------------------------------------------

class AiMesh_TextureCoordsArray final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb_msg.AiMesh.TextureCoordsArray) */ {
 public:
  inline AiMesh_TextureCoordsArray() : AiMesh_TextureCoordsArray(nullptr) {}
  ~AiMesh_TextureCoordsArray() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AiMesh_TextureCoordsArray(::google::protobuf::internal::ConstantInitialized);

  AiMesh_TextureCoordsArray(const AiMesh_TextureCoordsArray& from);
  AiMesh_TextureCoordsArray(AiMesh_TextureCoordsArray&& from) noexcept
    : AiMesh_TextureCoordsArray() {
    *this = ::std::move(from);
  }

  inline AiMesh_TextureCoordsArray& operator=(const AiMesh_TextureCoordsArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AiMesh_TextureCoordsArray& operator=(AiMesh_TextureCoordsArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AiMesh_TextureCoordsArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AiMesh_TextureCoordsArray* internal_default_instance() {
    return reinterpret_cast<const AiMesh_TextureCoordsArray*>(
               &_AiMesh_TextureCoordsArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AiMesh_TextureCoordsArray& a, AiMesh_TextureCoordsArray& b) {
    a.Swap(&b);
  }
  inline void Swap(AiMesh_TextureCoordsArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AiMesh_TextureCoordsArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AiMesh_TextureCoordsArray* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AiMesh_TextureCoordsArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AiMesh_TextureCoordsArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AiMesh_TextureCoordsArray& from) {
    AiMesh_TextureCoordsArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AiMesh_TextureCoordsArray* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb_msg.AiMesh.TextureCoordsArray";
  }
  protected:
  explicit AiMesh_TextureCoordsArray(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextureCoordsFieldNumber = 1,
  };
  // repeated .pb_msg.AiVector3D TextureCoords = 1;
  int texturecoords_size() const;
  private:
  int _internal_texturecoords_size() const;

  public:
  void clear_texturecoords() ;
  ::pb_msg::AiVector3D* mutable_texturecoords(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
      mutable_texturecoords();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>& _internal_texturecoords() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>* _internal_mutable_texturecoords();
  public:
  const ::pb_msg::AiVector3D& texturecoords(int index) const;
  ::pb_msg::AiVector3D* add_texturecoords();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
      texturecoords() const;
  // @@protoc_insertion_point(class_scope:pb_msg.AiMesh.TextureCoordsArray)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D > texturecoords_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fpb_5fmsg_2fai_5fmesh_2eproto;
};// -------------------------------------------------------------------

class AiMesh final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb_msg.AiMesh) */ {
 public:
  inline AiMesh() : AiMesh(nullptr) {}
  ~AiMesh() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AiMesh(::google::protobuf::internal::ConstantInitialized);

  AiMesh(const AiMesh& from);
  AiMesh(AiMesh&& from) noexcept
    : AiMesh() {
    *this = ::std::move(from);
  }

  inline AiMesh& operator=(const AiMesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline AiMesh& operator=(AiMesh&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AiMesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const AiMesh* internal_default_instance() {
    return reinterpret_cast<const AiMesh*>(
               &_AiMesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AiMesh& a, AiMesh& b) {
    a.Swap(&b);
  }
  inline void Swap(AiMesh* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AiMesh* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AiMesh* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AiMesh>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AiMesh& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AiMesh& from) {
    AiMesh::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AiMesh* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb_msg.AiMesh";
  }
  protected:
  explicit AiMesh(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AiMesh_ColorsArray ColorsArray;
  typedef AiMesh_TextureCoordsArray TextureCoordsArray;

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 2,
    kNormalsFieldNumber = 3,
    kTangentsFieldNumber = 4,
    kBitangentsFieldNumber = 5,
    kColorsFieldNumber = 6,
    kTextureCoordsFieldNumber = 7,
    kNumUVComponentsFieldNumber = 8,
    kFacesFieldNumber = 9,
    kBonesFieldNumber = 10,
    kAnimMeshesFieldNumber = 14,
    kTextureCoordsNamesFieldNumber = 17,
    kNameFieldNumber = 13,
    kAABBFieldNumber = 16,
    kPrimitiveTypesFieldNumber = 1,
    kMaterialIndexFieldNumber = 12,
    kMethodFieldNumber = 15,
  };
  // repeated .pb_msg.AiVector3D Vertices = 2;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;

  public:
  void clear_vertices() ;
  ::pb_msg::AiVector3D* mutable_vertices(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
      mutable_vertices();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>& _internal_vertices() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>* _internal_mutable_vertices();
  public:
  const ::pb_msg::AiVector3D& vertices(int index) const;
  ::pb_msg::AiVector3D* add_vertices();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
      vertices() const;
  // repeated .pb_msg.AiVector3D Normals = 3;
  int normals_size() const;
  private:
  int _internal_normals_size() const;

  public:
  void clear_normals() ;
  ::pb_msg::AiVector3D* mutable_normals(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
      mutable_normals();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>& _internal_normals() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>* _internal_mutable_normals();
  public:
  const ::pb_msg::AiVector3D& normals(int index) const;
  ::pb_msg::AiVector3D* add_normals();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
      normals() const;
  // repeated .pb_msg.AiVector3D Tangents = 4;
  int tangents_size() const;
  private:
  int _internal_tangents_size() const;

  public:
  void clear_tangents() ;
  ::pb_msg::AiVector3D* mutable_tangents(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
      mutable_tangents();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>& _internal_tangents() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>* _internal_mutable_tangents();
  public:
  const ::pb_msg::AiVector3D& tangents(int index) const;
  ::pb_msg::AiVector3D* add_tangents();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
      tangents() const;
  // repeated .pb_msg.AiVector3D Bitangents = 5;
  int bitangents_size() const;
  private:
  int _internal_bitangents_size() const;

  public:
  void clear_bitangents() ;
  ::pb_msg::AiVector3D* mutable_bitangents(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
      mutable_bitangents();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>& _internal_bitangents() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>* _internal_mutable_bitangents();
  public:
  const ::pb_msg::AiVector3D& bitangents(int index) const;
  ::pb_msg::AiVector3D* add_bitangents();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
      bitangents() const;
  // repeated .pb_msg.AiMesh.ColorsArray Colors = 6;
  int colors_size() const;
  private:
  int _internal_colors_size() const;

  public:
  void clear_colors() ;
  ::pb_msg::AiMesh_ColorsArray* mutable_colors(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiMesh_ColorsArray >*
      mutable_colors();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiMesh_ColorsArray>& _internal_colors() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiMesh_ColorsArray>* _internal_mutable_colors();
  public:
  const ::pb_msg::AiMesh_ColorsArray& colors(int index) const;
  ::pb_msg::AiMesh_ColorsArray* add_colors();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiMesh_ColorsArray >&
      colors() const;
  // repeated .pb_msg.AiMesh.TextureCoordsArray TextureCoords = 7;
  int texturecoords_size() const;
  private:
  int _internal_texturecoords_size() const;

  public:
  void clear_texturecoords() ;
  ::pb_msg::AiMesh_TextureCoordsArray* mutable_texturecoords(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiMesh_TextureCoordsArray >*
      mutable_texturecoords();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiMesh_TextureCoordsArray>& _internal_texturecoords() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiMesh_TextureCoordsArray>* _internal_mutable_texturecoords();
  public:
  const ::pb_msg::AiMesh_TextureCoordsArray& texturecoords(int index) const;
  ::pb_msg::AiMesh_TextureCoordsArray* add_texturecoords();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiMesh_TextureCoordsArray >&
      texturecoords() const;
  // repeated uint32 NumUVComponents = 8;
  int numuvcomponents_size() const;
  private:
  int _internal_numuvcomponents_size() const;

  public:
  void clear_numuvcomponents() ;
  ::uint32_t numuvcomponents(int index) const;
  void set_numuvcomponents(int index, ::uint32_t value);
  void add_numuvcomponents(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& numuvcomponents() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_numuvcomponents();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_numuvcomponents() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_numuvcomponents();

  public:
  // repeated .pb_msg.AiFace Faces = 9;
  int faces_size() const;
  private:
  int _internal_faces_size() const;

  public:
  void clear_faces() ;
  ::pb_msg::AiFace* mutable_faces(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiFace >*
      mutable_faces();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiFace>& _internal_faces() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiFace>* _internal_mutable_faces();
  public:
  const ::pb_msg::AiFace& faces(int index) const;
  ::pb_msg::AiFace* add_faces();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiFace >&
      faces() const;
  // repeated .pb_msg.AiBone Bones = 10;
  int bones_size() const;
  private:
  int _internal_bones_size() const;

  public:
  void clear_bones() ;
  ::pb_msg::AiBone* mutable_bones(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiBone >*
      mutable_bones();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiBone>& _internal_bones() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiBone>* _internal_mutable_bones();
  public:
  const ::pb_msg::AiBone& bones(int index) const;
  ::pb_msg::AiBone* add_bones();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiBone >&
      bones() const;
  // repeated .pb_msg.AiAnimMesh AnimMeshes = 14;
  int animmeshes_size() const;
  private:
  int _internal_animmeshes_size() const;

  public:
  void clear_animmeshes() ;
  ::pb_msg::AiAnimMesh* mutable_animmeshes(int index);
  ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh >*
      mutable_animmeshes();
  private:
  const ::google::protobuf::RepeatedPtrField<::pb_msg::AiAnimMesh>& _internal_animmeshes() const;
  ::google::protobuf::RepeatedPtrField<::pb_msg::AiAnimMesh>* _internal_mutable_animmeshes();
  public:
  const ::pb_msg::AiAnimMesh& animmeshes(int index) const;
  ::pb_msg::AiAnimMesh* add_animmeshes();
  const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh >&
      animmeshes() const;
  // repeated string TextureCoordsNames = 17;
  int texturecoordsnames_size() const;
  private:
  int _internal_texturecoordsnames_size() const;

  public:
  void clear_texturecoordsnames() ;
  const std::string& texturecoordsnames(int index) const;
  std::string* mutable_texturecoordsnames(int index);
  void set_texturecoordsnames(int index, const std::string& value);
  void set_texturecoordsnames(int index, std::string&& value);
  void set_texturecoordsnames(int index, const char* value);
  void set_texturecoordsnames(int index, const char* value, std::size_t size);
  void set_texturecoordsnames(int index, absl::string_view value);
  std::string* add_texturecoordsnames();
  void add_texturecoordsnames(const std::string& value);
  void add_texturecoordsnames(std::string&& value);
  void add_texturecoordsnames(const char* value);
  void add_texturecoordsnames(const char* value, std::size_t size);
  void add_texturecoordsnames(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& texturecoordsnames() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_texturecoordsnames();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_texturecoordsnames() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_texturecoordsnames();

  public:
  // string Name = 13;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .pb_msg.AiAABB AABB = 16;
  bool has_aabb() const;
  void clear_aabb() ;
  const ::pb_msg::AiAABB& aabb() const;
  PROTOBUF_NODISCARD ::pb_msg::AiAABB* release_aabb();
  ::pb_msg::AiAABB* mutable_aabb();
  void set_allocated_aabb(::pb_msg::AiAABB* value);
  void unsafe_arena_set_allocated_aabb(::pb_msg::AiAABB* value);
  ::pb_msg::AiAABB* unsafe_arena_release_aabb();

  private:
  const ::pb_msg::AiAABB& _internal_aabb() const;
  ::pb_msg::AiAABB* _internal_mutable_aabb();

  public:
  // uint32 PrimitiveTypes = 1;
  void clear_primitivetypes() ;
  ::uint32_t primitivetypes() const;
  void set_primitivetypes(::uint32_t value);

  private:
  ::uint32_t _internal_primitivetypes() const;
  void _internal_set_primitivetypes(::uint32_t value);

  public:
  // int32 MaterialIndex = 12;
  void clear_materialindex() ;
  ::int32_t materialindex() const;
  void set_materialindex(::int32_t value);

  private:
  ::int32_t _internal_materialindex() const;
  void _internal_set_materialindex(::int32_t value);

  public:
  // int32 Method = 15;
  void clear_method() ;
  ::int32_t method() const;
  void set_method(::int32_t value);

  private:
  ::int32_t _internal_method() const;
  void _internal_set_method(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pb_msg.AiMesh)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 16, 10, 60, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D > vertices_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D > normals_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D > tangents_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D > bitangents_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiMesh_ColorsArray > colors_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiMesh_TextureCoordsArray > texturecoords_;
    ::google::protobuf::RepeatedField<::uint32_t> numuvcomponents_;
    mutable ::google::protobuf::internal::CachedSize _numuvcomponents_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiFace > faces_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiBone > bones_;
    ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh > animmeshes_;
    ::google::protobuf::RepeatedPtrField<std::string> texturecoordsnames_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::pb_msg::AiAABB* aabb_;
    ::uint32_t primitivetypes_;
    ::int32_t materialindex_;
    ::int32_t method_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fpb_5fmsg_2fai_5fmesh_2eproto;
};// -------------------------------------------------------------------

class AiFace final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb_msg.AiFace) */ {
 public:
  inline AiFace() : AiFace(nullptr) {}
  ~AiFace() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AiFace(::google::protobuf::internal::ConstantInitialized);

  AiFace(const AiFace& from);
  AiFace(AiFace&& from) noexcept
    : AiFace() {
    *this = ::std::move(from);
  }

  inline AiFace& operator=(const AiFace& from) {
    CopyFrom(from);
    return *this;
  }
  inline AiFace& operator=(AiFace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AiFace& default_instance() {
    return *internal_default_instance();
  }
  static inline const AiFace* internal_default_instance() {
    return reinterpret_cast<const AiFace*>(
               &_AiFace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AiFace& a, AiFace& b) {
    a.Swap(&b);
  }
  inline void Swap(AiFace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AiFace* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AiFace* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AiFace>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AiFace& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AiFace& from) {
    AiFace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AiFace* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "pb_msg.AiFace";
  }
  protected:
  explicit AiFace(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicesFieldNumber = 2,
    kNumIndicesFieldNumber = 1,
  };
  // repeated uint32 Indices = 2;
  int indices_size() const;
  private:
  int _internal_indices_size() const;

  public:
  void clear_indices() ;
  ::uint32_t indices(int index) const;
  void set_indices(int index, ::uint32_t value);
  void add_indices(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& indices() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_indices();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_indices() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_indices();

  public:
  // uint32 NumIndices = 1;
  void clear_numindices() ;
  ::uint32_t numindices() const;
  void set_numindices(::uint32_t value);

  private:
  ::uint32_t _internal_numindices() const;
  void _internal_set_numindices(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:pb_msg.AiFace)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<::uint32_t> indices_;
    mutable ::google::protobuf::internal::CachedSize _indices_cached_byte_size_;
    ::uint32_t numindices_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2fpb_5fmsg_2fai_5fmesh_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AiMesh_ColorsArray

// repeated .pb_msg.AiColor4D Colors = 1;
inline int AiMesh_ColorsArray::_internal_colors_size() const {
  return _internal_colors().size();
}
inline int AiMesh_ColorsArray::colors_size() const {
  return _internal_colors_size();
}
inline ::pb_msg::AiColor4D* AiMesh_ColorsArray::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.ColorsArray.Colors)
  return _internal_mutable_colors()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiColor4D >*
AiMesh_ColorsArray::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.ColorsArray.Colors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_colors();
}
inline const ::pb_msg::AiColor4D& AiMesh_ColorsArray::colors(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.ColorsArray.Colors)
    return _internal_colors().Get(index);
}
inline ::pb_msg::AiColor4D* AiMesh_ColorsArray::add_colors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiColor4D* _add = _internal_mutable_colors()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.ColorsArray.Colors)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiColor4D >&
AiMesh_ColorsArray::colors() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.ColorsArray.Colors)
  return _internal_colors();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiColor4D>&
AiMesh_ColorsArray::_internal_colors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.colors_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiColor4D>*
AiMesh_ColorsArray::_internal_mutable_colors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.colors_;
}

// -------------------------------------------------------------------

// AiMesh_TextureCoordsArray

// repeated .pb_msg.AiVector3D TextureCoords = 1;
inline int AiMesh_TextureCoordsArray::_internal_texturecoords_size() const {
  return _internal_texturecoords().size();
}
inline int AiMesh_TextureCoordsArray::texturecoords_size() const {
  return _internal_texturecoords_size();
}
inline ::pb_msg::AiVector3D* AiMesh_TextureCoordsArray::mutable_texturecoords(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.TextureCoordsArray.TextureCoords)
  return _internal_mutable_texturecoords()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
AiMesh_TextureCoordsArray::mutable_texturecoords() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.TextureCoordsArray.TextureCoords)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_texturecoords();
}
inline const ::pb_msg::AiVector3D& AiMesh_TextureCoordsArray::texturecoords(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.TextureCoordsArray.TextureCoords)
    return _internal_texturecoords().Get(index);
}
inline ::pb_msg::AiVector3D* AiMesh_TextureCoordsArray::add_texturecoords() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiVector3D* _add = _internal_mutable_texturecoords()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.TextureCoordsArray.TextureCoords)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
AiMesh_TextureCoordsArray::texturecoords() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.TextureCoordsArray.TextureCoords)
  return _internal_texturecoords();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>&
AiMesh_TextureCoordsArray::_internal_texturecoords() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.texturecoords_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>*
AiMesh_TextureCoordsArray::_internal_mutable_texturecoords() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.texturecoords_;
}

// -------------------------------------------------------------------

// AiMesh

// uint32 PrimitiveTypes = 1;
inline void AiMesh::clear_primitivetypes() {
  _impl_.primitivetypes_ = 0u;
}
inline ::uint32_t AiMesh::primitivetypes() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.PrimitiveTypes)
  return _internal_primitivetypes();
}
inline void AiMesh::set_primitivetypes(::uint32_t value) {
  _internal_set_primitivetypes(value);
  // @@protoc_insertion_point(field_set:pb_msg.AiMesh.PrimitiveTypes)
}
inline ::uint32_t AiMesh::_internal_primitivetypes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.primitivetypes_;
}
inline void AiMesh::_internal_set_primitivetypes(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.primitivetypes_ = value;
}

// repeated .pb_msg.AiVector3D Vertices = 2;
inline int AiMesh::_internal_vertices_size() const {
  return _internal_vertices().size();
}
inline int AiMesh::vertices_size() const {
  return _internal_vertices_size();
}
inline ::pb_msg::AiVector3D* AiMesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.Vertices)
  return _internal_mutable_vertices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
AiMesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.Vertices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vertices();
}
inline const ::pb_msg::AiVector3D& AiMesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.Vertices)
    return _internal_vertices().Get(index);
}
inline ::pb_msg::AiVector3D* AiMesh::add_vertices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiVector3D* _add = _internal_mutable_vertices()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.Vertices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
AiMesh::vertices() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.Vertices)
  return _internal_vertices();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>&
AiMesh::_internal_vertices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vertices_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>*
AiMesh::_internal_mutable_vertices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vertices_;
}

// repeated .pb_msg.AiVector3D Normals = 3;
inline int AiMesh::_internal_normals_size() const {
  return _internal_normals().size();
}
inline int AiMesh::normals_size() const {
  return _internal_normals_size();
}
inline ::pb_msg::AiVector3D* AiMesh::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.Normals)
  return _internal_mutable_normals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
AiMesh::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.Normals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_normals();
}
inline const ::pb_msg::AiVector3D& AiMesh::normals(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.Normals)
    return _internal_normals().Get(index);
}
inline ::pb_msg::AiVector3D* AiMesh::add_normals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiVector3D* _add = _internal_mutable_normals()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.Normals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
AiMesh::normals() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.Normals)
  return _internal_normals();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>&
AiMesh::_internal_normals() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.normals_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>*
AiMesh::_internal_mutable_normals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.normals_;
}

// repeated .pb_msg.AiVector3D Tangents = 4;
inline int AiMesh::_internal_tangents_size() const {
  return _internal_tangents().size();
}
inline int AiMesh::tangents_size() const {
  return _internal_tangents_size();
}
inline ::pb_msg::AiVector3D* AiMesh::mutable_tangents(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.Tangents)
  return _internal_mutable_tangents()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
AiMesh::mutable_tangents() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.Tangents)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tangents();
}
inline const ::pb_msg::AiVector3D& AiMesh::tangents(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.Tangents)
    return _internal_tangents().Get(index);
}
inline ::pb_msg::AiVector3D* AiMesh::add_tangents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiVector3D* _add = _internal_mutable_tangents()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.Tangents)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
AiMesh::tangents() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.Tangents)
  return _internal_tangents();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>&
AiMesh::_internal_tangents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tangents_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>*
AiMesh::_internal_mutable_tangents() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tangents_;
}

// repeated .pb_msg.AiVector3D Bitangents = 5;
inline int AiMesh::_internal_bitangents_size() const {
  return _internal_bitangents().size();
}
inline int AiMesh::bitangents_size() const {
  return _internal_bitangents_size();
}
inline ::pb_msg::AiVector3D* AiMesh::mutable_bitangents(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.Bitangents)
  return _internal_mutable_bitangents()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >*
AiMesh::mutable_bitangents() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.Bitangents)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bitangents();
}
inline const ::pb_msg::AiVector3D& AiMesh::bitangents(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.Bitangents)
    return _internal_bitangents().Get(index);
}
inline ::pb_msg::AiVector3D* AiMesh::add_bitangents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiVector3D* _add = _internal_mutable_bitangents()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.Bitangents)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiVector3D >&
AiMesh::bitangents() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.Bitangents)
  return _internal_bitangents();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>&
AiMesh::_internal_bitangents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bitangents_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiVector3D>*
AiMesh::_internal_mutable_bitangents() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bitangents_;
}

// repeated .pb_msg.AiMesh.ColorsArray Colors = 6;
inline int AiMesh::_internal_colors_size() const {
  return _internal_colors().size();
}
inline int AiMesh::colors_size() const {
  return _internal_colors_size();
}
inline void AiMesh::clear_colors() {
  _internal_mutable_colors()->Clear();
}
inline ::pb_msg::AiMesh_ColorsArray* AiMesh::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.Colors)
  return _internal_mutable_colors()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiMesh_ColorsArray >*
AiMesh::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.Colors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_colors();
}
inline const ::pb_msg::AiMesh_ColorsArray& AiMesh::colors(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.Colors)
    return _internal_colors().Get(index);
}
inline ::pb_msg::AiMesh_ColorsArray* AiMesh::add_colors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiMesh_ColorsArray* _add = _internal_mutable_colors()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.Colors)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiMesh_ColorsArray >&
AiMesh::colors() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.Colors)
  return _internal_colors();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiMesh_ColorsArray>&
AiMesh::_internal_colors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.colors_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiMesh_ColorsArray>*
AiMesh::_internal_mutable_colors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.colors_;
}

// repeated .pb_msg.AiMesh.TextureCoordsArray TextureCoords = 7;
inline int AiMesh::_internal_texturecoords_size() const {
  return _internal_texturecoords().size();
}
inline int AiMesh::texturecoords_size() const {
  return _internal_texturecoords_size();
}
inline void AiMesh::clear_texturecoords() {
  _internal_mutable_texturecoords()->Clear();
}
inline ::pb_msg::AiMesh_TextureCoordsArray* AiMesh::mutable_texturecoords(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.TextureCoords)
  return _internal_mutable_texturecoords()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiMesh_TextureCoordsArray >*
AiMesh::mutable_texturecoords() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.TextureCoords)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_texturecoords();
}
inline const ::pb_msg::AiMesh_TextureCoordsArray& AiMesh::texturecoords(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.TextureCoords)
    return _internal_texturecoords().Get(index);
}
inline ::pb_msg::AiMesh_TextureCoordsArray* AiMesh::add_texturecoords() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiMesh_TextureCoordsArray* _add = _internal_mutable_texturecoords()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.TextureCoords)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiMesh_TextureCoordsArray >&
AiMesh::texturecoords() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.TextureCoords)
  return _internal_texturecoords();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiMesh_TextureCoordsArray>&
AiMesh::_internal_texturecoords() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.texturecoords_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiMesh_TextureCoordsArray>*
AiMesh::_internal_mutable_texturecoords() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.texturecoords_;
}

// repeated uint32 NumUVComponents = 8;
inline int AiMesh::_internal_numuvcomponents_size() const {
  return _internal_numuvcomponents().size();
}
inline int AiMesh::numuvcomponents_size() const {
  return _internal_numuvcomponents_size();
}
inline void AiMesh::clear_numuvcomponents() {
  _internal_mutable_numuvcomponents()->Clear();
}
inline ::uint32_t AiMesh::numuvcomponents(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.NumUVComponents)
  return _internal_numuvcomponents().Get(index);
}
inline void AiMesh::set_numuvcomponents(int index, ::uint32_t value) {
  _internal_mutable_numuvcomponents()->Set(index, value);
  // @@protoc_insertion_point(field_set:pb_msg.AiMesh.NumUVComponents)
}
inline void AiMesh::add_numuvcomponents(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_numuvcomponents()->Add(value);
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.NumUVComponents)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& AiMesh::numuvcomponents() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.NumUVComponents)
  return _internal_numuvcomponents();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* AiMesh::mutable_numuvcomponents() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.NumUVComponents)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_numuvcomponents();
}

inline const ::google::protobuf::RepeatedField<::uint32_t>& AiMesh::_internal_numuvcomponents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.numuvcomponents_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* AiMesh::_internal_mutable_numuvcomponents() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.numuvcomponents_;
}

// repeated .pb_msg.AiFace Faces = 9;
inline int AiMesh::_internal_faces_size() const {
  return _internal_faces().size();
}
inline int AiMesh::faces_size() const {
  return _internal_faces_size();
}
inline void AiMesh::clear_faces() {
  _internal_mutable_faces()->Clear();
}
inline ::pb_msg::AiFace* AiMesh::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.Faces)
  return _internal_mutable_faces()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiFace >*
AiMesh::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.Faces)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_faces();
}
inline const ::pb_msg::AiFace& AiMesh::faces(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.Faces)
    return _internal_faces().Get(index);
}
inline ::pb_msg::AiFace* AiMesh::add_faces() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiFace* _add = _internal_mutable_faces()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.Faces)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiFace >&
AiMesh::faces() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.Faces)
  return _internal_faces();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiFace>&
AiMesh::_internal_faces() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.faces_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiFace>*
AiMesh::_internal_mutable_faces() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.faces_;
}

// repeated .pb_msg.AiBone Bones = 10;
inline int AiMesh::_internal_bones_size() const {
  return _internal_bones().size();
}
inline int AiMesh::bones_size() const {
  return _internal_bones_size();
}
inline ::pb_msg::AiBone* AiMesh::mutable_bones(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.Bones)
  return _internal_mutable_bones()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiBone >*
AiMesh::mutable_bones() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.Bones)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bones();
}
inline const ::pb_msg::AiBone& AiMesh::bones(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.Bones)
    return _internal_bones().Get(index);
}
inline ::pb_msg::AiBone* AiMesh::add_bones() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiBone* _add = _internal_mutable_bones()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.Bones)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiBone >&
AiMesh::bones() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.Bones)
  return _internal_bones();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiBone>&
AiMesh::_internal_bones() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bones_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiBone>*
AiMesh::_internal_mutable_bones() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bones_;
}

// int32 MaterialIndex = 12;
inline void AiMesh::clear_materialindex() {
  _impl_.materialindex_ = 0;
}
inline ::int32_t AiMesh::materialindex() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.MaterialIndex)
  return _internal_materialindex();
}
inline void AiMesh::set_materialindex(::int32_t value) {
  _internal_set_materialindex(value);
  // @@protoc_insertion_point(field_set:pb_msg.AiMesh.MaterialIndex)
}
inline ::int32_t AiMesh::_internal_materialindex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.materialindex_;
}
inline void AiMesh::_internal_set_materialindex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.materialindex_ = value;
}

// string Name = 13;
inline void AiMesh::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AiMesh::name() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.Name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AiMesh::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb_msg.AiMesh.Name)
}
inline std::string* AiMesh::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.Name)
  return _s;
}
inline const std::string& AiMesh::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void AiMesh::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AiMesh::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* AiMesh::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb_msg.AiMesh.Name)
  return _impl_.name_.Release();
}
inline void AiMesh::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb_msg.AiMesh.Name)
}

// repeated .pb_msg.AiAnimMesh AnimMeshes = 14;
inline int AiMesh::_internal_animmeshes_size() const {
  return _internal_animmeshes().size();
}
inline int AiMesh::animmeshes_size() const {
  return _internal_animmeshes_size();
}
inline ::pb_msg::AiAnimMesh* AiMesh::mutable_animmeshes(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.AnimMeshes)
  return _internal_mutable_animmeshes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh >*
AiMesh::mutable_animmeshes() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.AnimMeshes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_animmeshes();
}
inline const ::pb_msg::AiAnimMesh& AiMesh::animmeshes(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.AnimMeshes)
    return _internal_animmeshes().Get(index);
}
inline ::pb_msg::AiAnimMesh* AiMesh::add_animmeshes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::pb_msg::AiAnimMesh* _add = _internal_mutable_animmeshes()->Add();
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.AnimMeshes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_msg::AiAnimMesh >&
AiMesh::animmeshes() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.AnimMeshes)
  return _internal_animmeshes();
}
inline const ::google::protobuf::RepeatedPtrField<::pb_msg::AiAnimMesh>&
AiMesh::_internal_animmeshes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.animmeshes_;
}
inline ::google::protobuf::RepeatedPtrField<::pb_msg::AiAnimMesh>*
AiMesh::_internal_mutable_animmeshes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.animmeshes_;
}

// int32 Method = 15;
inline void AiMesh::clear_method() {
  _impl_.method_ = 0;
}
inline ::int32_t AiMesh::method() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.Method)
  return _internal_method();
}
inline void AiMesh::set_method(::int32_t value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:pb_msg.AiMesh.Method)
}
inline ::int32_t AiMesh::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_;
}
inline void AiMesh::_internal_set_method(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_ = value;
}

// .pb_msg.AiAABB AABB = 16;
inline bool AiMesh::has_aabb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aabb_ != nullptr);
  return value;
}
inline const ::pb_msg::AiAABB& AiMesh::_internal_aabb() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::pb_msg::AiAABB* p = _impl_.aabb_;
  return p != nullptr ? *p : reinterpret_cast<const ::pb_msg::AiAABB&>(::pb_msg::_AiAABB_default_instance_);
}
inline const ::pb_msg::AiAABB& AiMesh::aabb() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.AABB)
  return _internal_aabb();
}
inline void AiMesh::unsafe_arena_set_allocated_aabb(::pb_msg::AiAABB* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.aabb_);
  }
  _impl_.aabb_ = reinterpret_cast<::pb_msg::AiAABB*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pb_msg.AiMesh.AABB)
}
inline ::pb_msg::AiAABB* AiMesh::release_aabb() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pb_msg::AiAABB* released = _impl_.aabb_;
  _impl_.aabb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::pb_msg::AiAABB* AiMesh::unsafe_arena_release_aabb() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:pb_msg.AiMesh.AABB)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::pb_msg::AiAABB* temp = _impl_.aabb_;
  _impl_.aabb_ = nullptr;
  return temp;
}
inline ::pb_msg::AiAABB* AiMesh::_internal_mutable_aabb() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.aabb_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb_msg::AiAABB>(GetArenaForAllocation());
    _impl_.aabb_ = reinterpret_cast<::pb_msg::AiAABB*>(p);
  }
  return _impl_.aabb_;
}
inline ::pb_msg::AiAABB* AiMesh::mutable_aabb() {
  ::pb_msg::AiAABB* _msg = _internal_mutable_aabb();
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.AABB)
  return _msg;
}
inline void AiMesh::set_allocated_aabb(::pb_msg::AiAABB* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.aabb_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.aabb_ = reinterpret_cast<::pb_msg::AiAABB*>(value);
  // @@protoc_insertion_point(field_set_allocated:pb_msg.AiMesh.AABB)
}

// repeated string TextureCoordsNames = 17;
inline int AiMesh::_internal_texturecoordsnames_size() const {
  return _internal_texturecoordsnames().size();
}
inline int AiMesh::texturecoordsnames_size() const {
  return _internal_texturecoordsnames_size();
}
inline void AiMesh::clear_texturecoordsnames() {
  _internal_mutable_texturecoordsnames()->Clear();
}
inline std::string* AiMesh::add_texturecoordsnames() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_texturecoordsnames()->Add();
  // @@protoc_insertion_point(field_add_mutable:pb_msg.AiMesh.TextureCoordsNames)
  return _s;
}
inline const std::string& AiMesh::texturecoordsnames(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiMesh.TextureCoordsNames)
  return _internal_texturecoordsnames().Get(index);
}
inline std::string* AiMesh::mutable_texturecoordsnames(int index) {
  // @@protoc_insertion_point(field_mutable:pb_msg.AiMesh.TextureCoordsNames)
  return _internal_mutable_texturecoordsnames()->Mutable(index);
}
inline void AiMesh::set_texturecoordsnames(int index, const std::string& value) {
  _internal_mutable_texturecoordsnames()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pb_msg.AiMesh.TextureCoordsNames)
}
inline void AiMesh::set_texturecoordsnames(int index, std::string&& value) {
  _internal_mutable_texturecoordsnames()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pb_msg.AiMesh.TextureCoordsNames)
}
inline void AiMesh::set_texturecoordsnames(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_texturecoordsnames()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_msg.AiMesh.TextureCoordsNames)
}
inline void AiMesh::set_texturecoordsnames(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_texturecoordsnames()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_msg.AiMesh.TextureCoordsNames)
}
inline void AiMesh::set_texturecoordsnames(int index, absl::string_view value) {
  _internal_mutable_texturecoordsnames()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:pb_msg.AiMesh.TextureCoordsNames)
}
inline void AiMesh::add_texturecoordsnames(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_texturecoordsnames()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.TextureCoordsNames)
}
inline void AiMesh::add_texturecoordsnames(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_texturecoordsnames()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:pb_msg.AiMesh.TextureCoordsNames)
}
inline void AiMesh::add_texturecoordsnames(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_texturecoordsnames()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb_msg.AiMesh.TextureCoordsNames)
}
inline void AiMesh::add_texturecoordsnames(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_texturecoordsnames()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb_msg.AiMesh.TextureCoordsNames)
}
inline void AiMesh::add_texturecoordsnames(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_texturecoordsnames()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:pb_msg.AiMesh.TextureCoordsNames)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AiMesh::texturecoordsnames() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiMesh.TextureCoordsNames)
  return _internal_texturecoordsnames();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* AiMesh::mutable_texturecoordsnames() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiMesh.TextureCoordsNames)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_texturecoordsnames();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AiMesh::_internal_texturecoordsnames() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.texturecoordsnames_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AiMesh::_internal_mutable_texturecoordsnames() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.texturecoordsnames_;
}

// -------------------------------------------------------------------

// AiFace

// uint32 NumIndices = 1;
inline void AiFace::clear_numindices() {
  _impl_.numindices_ = 0u;
}
inline ::uint32_t AiFace::numindices() const {
  // @@protoc_insertion_point(field_get:pb_msg.AiFace.NumIndices)
  return _internal_numindices();
}
inline void AiFace::set_numindices(::uint32_t value) {
  _internal_set_numindices(value);
  // @@protoc_insertion_point(field_set:pb_msg.AiFace.NumIndices)
}
inline ::uint32_t AiFace::_internal_numindices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.numindices_;
}
inline void AiFace::_internal_set_numindices(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.numindices_ = value;
}

// repeated uint32 Indices = 2;
inline int AiFace::_internal_indices_size() const {
  return _internal_indices().size();
}
inline int AiFace::indices_size() const {
  return _internal_indices_size();
}
inline void AiFace::clear_indices() {
  _internal_mutable_indices()->Clear();
}
inline ::uint32_t AiFace::indices(int index) const {
  // @@protoc_insertion_point(field_get:pb_msg.AiFace.Indices)
  return _internal_indices().Get(index);
}
inline void AiFace::set_indices(int index, ::uint32_t value) {
  _internal_mutable_indices()->Set(index, value);
  // @@protoc_insertion_point(field_set:pb_msg.AiFace.Indices)
}
inline void AiFace::add_indices(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_indices()->Add(value);
  // @@protoc_insertion_point(field_add:pb_msg.AiFace.Indices)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& AiFace::indices() const {
  // @@protoc_insertion_point(field_list:pb_msg.AiFace.Indices)
  return _internal_indices();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* AiFace::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:pb_msg.AiFace.Indices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_indices();
}

inline const ::google::protobuf::RepeatedField<::uint32_t>& AiFace::_internal_indices() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.indices_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* AiFace::_internal_mutable_indices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.indices_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb_msg


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_common_2fpb_5fmsg_2fai_5fmesh_2eproto_2epb_2eh
